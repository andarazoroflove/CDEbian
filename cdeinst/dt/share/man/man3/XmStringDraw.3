'\" t
...\" StrDrA.sgm /main/8 1996/09/08 21:04:18 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmStringDraw" "library call"
.SH "NAME"
\fBXmStringDraw\fP \(em A compound string function that draws a compound string in an X window
.iX "XmStringDraw"
.iX "compound string functions" "XmStringDraw"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
\fBvoid \fBXmStringDraw\fP\fR(
\fBDisplay \fB* d\fR\fR,
\fBWindow \fBw\fR\fR,
\fBXmRenderTable \fBrendertable\fR\fR,
\fBXmString \fBstring\fR\fR,
\fBGC \fBgc\fR\fR,
\fBPosition \fBx\fR\fR,
\fBPosition \fBy\fR\fR,
\fBDimension \fBwidth\fR\fR,
\fBunsigned char \fBalignment\fR\fR,
\fBunsigned char \fBlayout_direction\fR\fR,
\fBXRectangle \fB* clip\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
\fBXmStringDraw\fP draws a compound string in an X Window\&.
If a compound string segment uses a
rendition
that
contains
a font set, the graphic context passed to this
routine will have the GC font member left in an undefined
state\&. The underlying \fBXmbStringDraw\fP function called
by this routine modifies the font ID field of the GC passed
into it and does not attempt to restore the font ID to the
incoming value\&. If the compound string segment is not drawn
using a font set, the graphic context must contain a valid font
member\&. Graphic contexts created by \fBXtGetGC\fP are not
valid for this routine; instead, use \fBXtAllocateGC\fP
to create a graphic context\&.
.IP "\fId\fP" 10
Specifies the display\&.
.IP "\fIw\fP" 10
Specifies the window\&.
.IP "\fIrendertable\fP" 10
Specifies the render table\&.
.IP "\fIstring\fP" 10
Specifies the string\&.
.IP "\fIgc\fP" 10
Specifies the graphics context to use\&.
.IP "\fIx\fP" 10
Specifies a coordinate of the rectangle that will contain the displayed
compound string\&.
.IP "\fIy\fP" 10
Specifies a coordinate of the rectangle that will contain the displayed
compound string\&.
.IP "\fIwidth\fP" 10
Specifies the width of the rectangle that will contain the
displayed compound string\&.
.IP "\fIalignment\fP" 10
Specifies how the string will be aligned within the specified rectangle\&.
It is either \fBXmALIGNMENT_BEGINNING\fP, \fBXmALIGNMENT_CENTER\fP, or
\fBXmALIGNMENT_END\fP\&.
.IP "\fIlayout_direction\fP" 10
Controls the direction in which the segments of the compound string will
be laid out\&. It also determines the meaning of the \fIalignment\fP parameter\&.
.IP "\fIclip\fP" 10
Allows the application to restrict the area into which the compound string
will be drawn\&.
If the value is NULL, clipping will be determined by the GC\&.
.SH "RELATED"
.PP
\fBXmStringCreate\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
