'\" t
...\" StrTaE.sgm /main/7 1996/09/08 21:07:43 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmStringTableUnparse" "library call"
.SH "NAME"
\fBXmStringTableUnparse\fP \(em A convenience function that converts a table of compound strings to an array of text
.iX "XmStringTableUnparse"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
\fBXtPointer * \fBXmStringTableUnparse\fP\fR(
\fBXmStringTable \fBtable\fR\fR,
\fBCardinal \fBcount\fR\fR,
\fBXmStringTag \fBtag\fR\fR,
\fBXmTextType \fBtag_type\fR\fR,
\fBXmTextType \fBoutput_type\fR\fR,
\fBXmParseTable \fBparse\fR\fR,
\fBCardinal \fBparse_count\fR\fR,
\fBXmParseModel \fBparse_model\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
\fBXmStringTableUnparse\fP takes an array of compound strings,
allocates a string array for the type of characters determined by
\fItype\fP with an equal number of slots, calls
\fBXmStringUnparse\fP
on each compound string in \fItable\fP,
and inserts the resulting string in the corresponding slot in the array\&.
.IP "\fItable\fP" 10
Specifies an \fBXmStringTable\fR containing the compound string to be
converted\&.
.IP "\fIcount\fP" 10
Specifies the number of compound strings in \fItable\fP\&.
.IP "\fItag\fP" 10
Specifies the tag to be used in matching with text segments\&.
The two
types of tag types are \fBXmFONTLIST_DEFAULT_TAG\fP and
\fB_MOTIF_DEFAULT_LOCALE\fP\&.
Only segments tagged with \fItag\fP
will be returned\&. If \fItag\fP is NULL, all segments will be matched\&.
.IP "\fItag_type\fP" 10
Specifies the type of tag to be searched for\&. These types include
\fBXmMULTIBYTE_TEXT\fP, \fBXmWIDECHAR_TEXT\fP, and
\fBXmCHARSET_TEXT\fP\&.
.IP "\fIoutput_type\fP" 10
Specifies the type of text to be generated\&. These types include
\fBXmMULTIBYTE_TEXT\fP, \fBXmWIDECHAR_TEXT\fP, and
\fBXmCHARSET_TEXT\fP\&.
.IP "\fIparse\fP" 10
Specifies the parse table to be used\&.
.IP "\fIparse_count\fP" 10
Specifies the number of items in \fIparse\fP\&.
.IP "\fIparse_model\fP" 10
Specifies which non-text components to be considered in matching in
\fIparse_table\fP\&. Possible values are:
.RS
.IP "\fBXmOUTPUT_ALL\fP" 10
Puts out all matching components\&.
.IP "\fBXmOUTPUT_BETWEEN\fP" 10
Puts out only those matching components that are between two matching
text components\&.
.IP "\fBXmOUTPUT_BEGINNING\fP" 10
Puts out only those matching components that are at the beginning of a
matching text component\&.
.IP "\fBXmOUTPUT_END\fP" 10
Puts out only those matching components that are at the end of a
matching text component\&.
.IP "\fBXmOUTPUT_BOTH\fP" 10
Puts out only those matching components that are at the beginning or
end of a
matching text component\&.
.RE
.SH "RETURN"
.PP
Returns an allocated array of allocated strings\&.
The application is responsible for managing the allocated space\&.
The application can recover the allocated strings space by calling \fBXtFree\fP
\fIcount\fP times (that is, one time for each allocated string)\&.
The application can then recover the allocated array by calling
\fBXtFree\fP on the allocated array itself\&.
.SH "RELATED"
.PP
\fBXmStringTab\&.\fP
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
