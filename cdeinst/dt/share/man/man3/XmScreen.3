'\" t
...\" Screen.sgm /main/11 1996/09/08 21:00:14 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmScreen" "library call"
.SH "NAME"
\fBXmScreen\fP \(em The Screen widget class
.iX "XmScreen"
.iX "widget class" "XmScreen"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Screen\&.h>
.fi
.SH "DESCRIPTION"
.PP
The XmScreen object is used by Motif widgets to store information that
is specific to a screen\&. It also allows the toolkit to store certain
information on widget hierarchies that would otherwise be unavailable\&.
Each client has one XmScreen object for each screen that it accesses\&.
.PP
An XmScreen object is automatically created when the application creates
the first shell on a screen (usually accomplished by a call to
\fBXtAppInitialize\fP or \fBXtAppCreateShell\fP)\&.
It is not necessary to create an XmScreen object by any other means\&.
An application can use the function \fBXmGetXmScreen\fP to obtain the
widget ID of the XmScreen object for a given screen\&.
.PP
An application cannot supply initial values for XmScreen resources as
arguments to a call to any function that creates widgets\&.
The application or user can supply initial values in a resource file\&.
After creating the first shell on the screen, the application can use
\fBXmGetXmScreen\fP to obtain the widget ID of the XmScreen object and
then call \fBXtSetValues\fP to set the XmScreen resources\&.
.SS "Classes"
.PP
Screen inherits behavior and resources from \fBCore\fP\&.
.PP
The class pointer is \fBxmScreenClass\fP\&.
.PP
The class name is \fBXmScreen\fP\&.
.SS "New Resources"
.PP
The following table defines a set of widget resources used by the
programmer to specify data\&. The programmer can also set the resource
values for the inherited classes to set attributes for this widget\&.
To reference a resource by name or by class in an \fB\&.Xdefaults\fP file,
remove the \fBXmN\fP or \fBXmC\fP prefix and use the remaining letters\&.
To specify one of the defined values for a resource in an \fB\&.Xdefaults\fP
file, remove the \fBXm\fP prefix and use the remaining letters (in
either lowercase or uppercase, but include any underscores between
words)\&. The codes in the access column indicate if the given resource
can be set at creation time (C), set by using \fBXtSetValues\fP
(S), retrieved by using \fBXtGetValues\fP (G), or is not
applicable (N/A)\&.
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmScreen Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNbitmapConversionModelXmCBitmapConversionModelXtEnumXmPIXMAPCSG??
_____
XmNcolorAllocationProcXmCColorAllocationProcXtProcNULLCSG??
_____
XmNcolorCalculationProcXmCColorCalculationProcXtProcNULLCSG??
_____
XmNdarkThresholdXmCDarkThresholdintdynamicC
_____
XmNdefaultCopyCursorIconXmCDefaultCopyCursorIconWidgetNULLCSG
_____
XmNdefaultInvalidCursorIconXmCDefaultInvalidCursorIconWidgetNULLCSG
_____
XmNdefaultLinkCursorIconXmCDefaultLinkCursorIconWidgetNULLCSG
_____
XmNdefaultMoveCursorIconXmCDefaultMoveCursorIconWidgetNULLCSG
_____
XmNdefaultNoneCursorIconXmCDefaultNoneCursorIconWidgetNULLCSG
_____
XmNdefaultSourceCursorIconXmCDefaultSourceCursorIconWidgetNULLCSG
_____
XmNdefaultValidCursorIconXmCDefaultValidCursorIconWidgetNULLCSG
_____
XmNfontXmCFontXFontStruct *NULLCSG
_____
XmNforegroundThresholdXmCForegroundThresholdintdynamicC
_____
XmNhorizontalFontUnitXmCHorizontalFontUnitintdynamicCSG
_____
XmNinsensitiveStippleBitmapXmCinsensitiveStippleBitmapBitmap"50_foreground"CSG
_____
XmNlightThresholdXmCLightThresholdintdynamicC
_____
XmNmenuCursorXmCCursorCursorarrowC
_____
XmNmoveOpaqueXmCMoveOpaqueBooleanFalseCSG
_____
XmNunpostBehaviorXmCUnpostBehaviorunsigned charXmUNPOST_AND_REPLAYCSG
_____
XmNuseColorObjectXmCUseColorObjectBooleanFalseC
_____
XmNuserDataXmCUserDataXtPointerNULLCSG
_____
XmNverticalFontUnitXmCVerticalFontUnitintdynamicCSG
_____
.TE
.IP "\fBXmNbitmapConversionModel\fP" 10
Provides a policy for the conversion of xbm and xpm files to the \fBPixmap\fP
type\&. This resource takes the following values:
.RS
.IP "\fBXmMATCH_DEPTH\fP" 10
From a supplied xbm or xpm file, generates a converted pixmap file having the
same depth as the widget\&.
.IP "\fBXmDYNAMIC_DEPTH\fP" 10
Converts an input xbm file to a \fBPixmap\fP of depth 1,
or converts an input xpm file to a \fBPixmap\fP having the
same depth as the widget\&.
.RE
.IP "\fBXmNcolorAllocationProc\fP" 10
Identifies the procedure to be used for color allocation\&.
Normally, this procedure is an application-defined color allocation
procedure\&. However, if no application-defined color allocation
procedure is set, the system uses Motif\&'s predefined color allocation
procedure\&.
.IP "\fBXmNcolorCalculationProc\fP" 10
Identifies the procedure to be used for per-widget color calculation\&.
Normally, this procedure is an application-defined color calculation
procedure\&. However, if no application-defined color calculation
procedure is set, the system uses Motif\&'s predefined color calculation
procedure\&.
.IP "\fBXmNdarkThreshold\fP" 10
An integer between 0 (zero) and 100, inclusive, that specifies a level
of perceived brightness for a color\&. If the perceived brightness
of the background color is below this level, Motif treats the background
as "dark" when computing default shadow and select colors\&.
If this resource is specified for a particular screen, it applies to
widgets created on that screen; otherwise it applies to widgets
created on all screens\&. The default value is implementation
specific\&.
.IP "\fBXmNdefaultCopyCursorIcon\fP" 10
Specifies the DragIcon used during a drag operation when
the operation is a copy and no other pixmap is specified by
the application\&. If this resource is NULL, a system default icon is used\&.
The system default icon is
determined by the Display resource \fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultInvalidCursorIcon\fP" 10
Specifies the DragIcon used to indicate that the cursor
is over an invalid drop site during a drag operation when no
other pixmap symbol is specified by the application\&. If this resource is NULL, a
system default icon is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultLinkCursorIcon\fP" 10
Specifies the DragIcon used during a drag operation when
the operation is a link and no other pixmap is specified
by the application\&. If this resource is NULL, a system default icon is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultMoveCursorIcon\fP" 10
Specifies the DragIcon used during a drag operation when
the operation is a move and no other pixmap is specified by
the application\&. If this resource is NULL, a system default icon is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultNoneCursorIcon\fP" 10
Specifies the DragIcon used to indicate that the cursor is
not over a drop site during a drag operation when no other pixmap
is specified by the application\&. If this resource is NULL, a system default icon
is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultSourceCursorIcon\fP" 10
Specifies the depth-1 pixmap used as a cursor when an
\fBXmNsourceCursorIcon\fP is not provided by the DragContext, or
it is not usable\&. If this resource is NULL, a system default icon is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNdefaultValidCursorIcon\fP" 10
Specifies the DragIcon used to indicate that the cursor is
over a valid drop site during a drag operation when no other pixmap
is specified by the application\&. If this resource is NULL, a system default icon
is used\&.
The system default icon is determined by the Display resource
\fBXmNenableDragIcon\fP\&.
.IP "\fBXmNfont\fP" 10
Specifies a font for use in computing values for
\fBXmNhorizontalFontUnit\fP and \fBXmNverticalFontUnit\fP\&. When an
application is initialized, this resource can be supplied in a
resource file or through the standard command line options \fB-fn\fP,
\fB-font\fP, and \fB-xrm\fP\&. Note that this resource is used only
for the calculation of the font unit values\&. To specify a font to be
used to display text, use a widget\&'s render table resource
(\fBXmNrenderTable\fP)\&.
.IP "\fBXmNforegroundThreshold\fP" 10
An integer between 0 (zero) and 100, inclusive, that specifies a level of
perceived brightness for a color\&. If the perceived brightness of the
background color is equal to or below this level, Motif treats the
background as "dark" when computing the default foreground and highlight
colors\&. If the perceived brightness of the background color is above
this level, Motif treats the background as "light" when computing the
default foreground and highlight colors\&. When the background is "dark,"
the default foreground and highlight is white; when the background is
"light," the default foreground and highlight is black\&. If this
resource is specified for a particular screen, it applies to widgets
created on that screen; otherwise, it applies to widgets created on all
screens\&. The default value is implementation specific\&.
.IP "\fBXmNhorizontalFontUnit\fP" 10
Specifies the horizontal component of the font units used by
\fBXmConvertUnits\fP, and is used to interpret the values of geometry
resources when the \fBXmNshellUnitType\fP resource of VendorShell or the
\fBXmNunitType\fP resource of Gadget, Manager, or Primitive has the
value \fBXm100TH_FONT_UNITS\fP\&.
If no initial value is supplied for this resource, the default is
computed from the font specified in \fBXmNfont\fP\&.
If no initial value is supplied for this resource or for \fBXmNfont\fP,
the default is 10\&.
.IP "" 10
If a call to \fBXtSetValues\fP specifies a value for
\fBXmNhorizontalFontUnit\fP, this resource is set to that value\&.
If a call to \fBXtSetValues\fP specifies a value for \fBXmNfont\fP but
not for \fBXmNhorizontalFontUnit\fP, this resource is set to a value
computed from the new \fBXmNfont\fP\&.
.IP "" 10
A horizontal font unit is derived from a font as follows:
.RS
.IP "   \(bu" 6
If the font has an \fBAVERAGE_WIDTH\fP property, the horizontal font
unit is the \fBAVERAGE_WIDTH\fP property divided by 10\&.
.IP "   \(bu" 6
If the font has no \fBAVERAGE_WIDTH\fP property but has a
\fBQUAD_WIDTH\fP property, the horizontal font unit is the
\fBQUAD_WIDTH\fP property\&.
.IP "   \(bu" 6
If the font has no \fBAVERAGE_WIDTH\fP or \fBQUAD_WIDTH\fP property, the
horizontal font unit is the sum of the font structure\&'s \fImin_bounds\&.width\fP
and \fImax_bounds\&.width\fP divided by 2\&.3\&.
.RE
.IP "\fBXmNinsensitiveStippleBitmap\fP" 10
Provides widgets with the bitmap to use when generating the
insensitive visual\&. This bitmap is to be used as the stipple for the
rendering of insensitive visuals\&.
.IP "\fBXmNlightThreshold\fP" 10
An integer between 0 (zero) and 100, inclusive, that specifies a level of
perceived brightness for a color\&. If the perceived brightness of the
background color is above this level, Motif treats the background as
"light" when computing default shadow and select colors\&. If this
resource is specified for a particular screen, it applies to widgets
created on that screen; otherwise, it applies to widgets created on all
screens\&. The default value is implementation specific\&.
.IP "\fBXmNmenuCursor\fP" 10
Sets a variable that controls the cursor used whenever this
application posts a menu\&. This resource can be specified
only once at application
startup time, either by placing it within a defaults file or by using the
\fB-xrm\fP command line argument\&. For example:
.IP "" 10
\fBmyProg -xrm "*menuCursor: arrow"\fP
.IP "" 10
The menu cursor can also be selected in the program through
the function \fBXmSetMenuCursor\fP\&.
The following list shows acceptable cursor names\&. If the application
does not specify a cursor or if an invalid name is supplied, the
default cursor (an arrow pointing up and to the right) is used\&.
.RS
.IP "\fBX_cursor\fP" 10
\fIleftbutton\fP
.IP "\fIarrow\fP" 10
\fBll_angle\fP
.IP "\fBbased_arrow_down\fP" 10
\fBlr_angle\fP
.IP "\fBbased_arrow_up\fP" 10
\fIman\fP
.IP "\fIboat\fP" 10
\fImiddlebutton\fP
.IP "\fIbogosity\fP" 10
\fImouse\fP
.IP "\fBbottom_left_corner\fP" 10
\fIpencil\fP
.IP "\fBbottom_right_corner\fP" 10
\fIpirate\fP
.IP "\fBbottom_side\fP" 10
\fIplus\fP
.IP "\fBbottom_tee\fP" 10
\fBquestion_arrow\fP
.IP "\fBbox_spiral\fP" 10
\fBright_ptr\fP
.IP "\fBcenter_ptr\fP" 10
\fBright_side\fP
.IP "\fIcircle\fP" 10
\fBright_tee\fP
.IP "\fIclock\fP" 10
\fIrightbutton\fP
.IP "\fBcoffee_mug\fP" 10
\fBrtl_logo\fP
.IP "\fIcross\fP" 10
\fIsailboat\fP
.IP "\fBcross_reverse\fP" 10
\fBsb_down_arrow\fP
.IP "\fIcrosshair\fP" 10
\fBsb_h_double_arrow\fP
.IP "\fBdiamond_cross\fP" 10
\fBsb_left_arrow\fP
.IP "\fIdot\fP" 10
\fBsb_right_arrow\fP
.IP "\fIdotbox\fP" 10
\fBsb_up_arrow\fP
.IP "\fBdouble_arrow\fP" 10
\fBsb_v_double_arrow\fP
.IP "\fBdraft_large\fP" 10
\fIshuttle\fP
.IP "\fBdraft_small\fP" 10
\fIsizing\fP
.IP "\fBdraped_box\fP" 10
\fIspider\fP
.IP "\fIexchange\fP" 10
\fIspraycan\fP
.IP "\fIfleur\fP" 10
\fIstar\fP
.IP "\fIgobbler\fP" 10
\fItarget\fP
.IP "\fIgumby\fP" 10
\fItcross\fP
.IP "\fBhand1\fP" 10
\fBtop_left_arrow\fP
.IP "\fBhand2\fP" 10
\fBtop_left_corner\fP
.IP "\fIheart\fP" 10
\fBtop_right_corner\fP
.IP "\fIicon\fP" 10
\fBtop_side\fP
.IP "\fBiron_cross\fP" 10
\fBleft_ptr\fP
.IP "\fBleft_side\fP" 10
\fBtop_tee\fP
.IP "\fBleft_tee\fP" 10
\fItrek\fP
.IP "\fBul_angle\fP" 10
\fIumbrella\fP
.IP "\fBur_angle\fP" 10
\fIwatch\fP
.IP "\fBxterm\fP" 10
.RE
.IP "\fBXmNmoveOpaque\fP" 10
Specifies whether an interactive operation that moves a window, such as
tearing off and dragging a tear-off menu or moving a window in MWM,
displays an outline of the window or a representation of the window
itself during the move\&.
If the value is True, the operation displays a representation of the
window during the move\&.
If the value is False, the operation displays an outline of the window\&.
.IP "\fBXmNunpostBehavior\fP" 10
Specifies the behavior of an active menu posted in traversal mode when
a subsequent menu button selection is made outside the posted
menu\&. When the value is \fBXmUNPOST_AND_REPLAY\fP, the resource
unposts the menu hierarchy and causes the server to replay the event to the
window in which the pointer is located\&. When the value is
\fBXmUNPOST\fP, the resource unposts the hierarchy without replaying the
event\&.
.IP "\fBXmNuseColorObject\fP" 10
Enables and disables the sharing of colors between widgets, and the
dynamic changing of colors\&. A value of False disables this, and a
value of True enables it\&.
.IP "\fBXmNuserData\fP" 10
Allows the application to attach
any necessary specific data to the widget\&. This is an internally
unused resource\&.
.IP "\fBXmNverticalFontUnit\fP" 10
Specifies the vertical component of the font units used by
\fBXmConvertUnits\fP and used to interpret the values of geometry
resources when the \fBXmNshellUnitType\fP resource of VendorShell or the
\fBXmNunitType\fP resource of Gadget, Manager, or Primitive has the
value \fBXm100TH_FONT_UNITS\fP\&.
If no initial value is supplied for this resource, the default is
computed from the font specified in \fBXmNfont\fP\&.
If no initial value is supplied for this resource or for \fBXmNfont\fP,
the default is 10\&.
.IP "" 10
If a call to \fBXtSetValues\fP specifies a value for
\fBXmNverticalFontUnit\fP, this resource is set to that value\&.
If a call to \fBXtSetValues\fP specifies a value for \fBXmNfont\fP but
not for \fBXmNverticalFontUnit\fP, this resource is set to a value
computed from the new \fBXmNfont\fP\&.
.IP "" 10
A vertical font unit is derived from a font as follows:
.RS
.IP "   \(bu" 6
If the font has a \fBPIXEL_SIZE\fP property, the vertical font unit is
the \fBPIXEL_SIZE\fP property divided by 1\&.8\&.
.IP "   \(bu" 6
If the font has no \fBPIXEL_SIZE\fP property but has \fBPOINT_SIZE\fP
and \fBRESOLUTION_Y\fP properties, the vertical font unit is the product
of the \fBPOINT_SIZE\fP and \fBRESOLUTION_Y\fP properties divided by
1400\&.
.IP "   \(bu" 6
If the font has no \fBPIXEL_SIZE\fP, \fBPOINT_SIZE\fP, or
\fBRESOLUTION_Y\fP properties, the vertical font unit is the sum of the
font structure\&'s \fImax_bounds\&.ascent\fP and
\fImax_bounds\&.descent\fP divided by 2\&.2\&.
.RE
.SS "Inherited Resources"
.PP
All of the superclass resources inherited by \fBXmScreen\fP are
designated N/A (not applicable)\&.
.SH "RELATED"
.PP
\fBCore\fP(3),
\fBXmDisplay\fP(3),
\fBXmGetXmScreen\fP(3), and
\fBXmSetMenuCursor\fP(3),
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
