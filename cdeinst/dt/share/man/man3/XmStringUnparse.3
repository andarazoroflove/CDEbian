'\" t
...\" StrUnp.sgm /main/8 1996/09/08 21:07:59 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmStringUnparse" "library call"
.SH "NAME"
\fBXmStringUnparse\fP \(em A compound string function that unparses text
.iX "XmStringUnparse"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
\fBXtPointer \fBXmStringUnparse\fP\fR(
\fBXmString \fBstring\fR\fR,
\fBXmStringTag \fBtag\fR\fR,
\fBXmTextType \fBtag_type\fR\fR,
\fBXmTextType \fBoutput_type\fR\fR,
\fBXmParseTable \fBparse_table\fR\fR,
\fBCardinal \fBparse_count\fR\fR,
\fBXmParseModel \fBparse_model\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
\fBXmStringUnparse\fP looks in the input \fIstring\fP for text
segments that are
tagged with locale or charset tags that match \fItag\fP\&. The
\fItag_type\fP
parameter specifies whether the tag is a locale or charset type\&.
If \fItag\fP has a value of NULL, all the segments are matched\&. When
a text segment is found with a matching tag, it is added to the end of
a resulting string\&. The characters in the
resulting string are of type \fIoutput_type\fP\&.
.PP
\fBXmStringUnparse\fP also checks \fIstring\fP for components that
match components in \fIparse_table\fP, and also to see if the
component matches the condition specified by \fIparse_model\fP\&. If
the string component matches in both checks, then the associated
character is added to the end of the resulting string\&.
.IP "\fIstring\fP" 10
Specifies the \fBXmString\fR to be converted\&.
.IP "\fItag\fP" 10
Specifies the tag to be used in matching with text segments\&. Only text
segments that match \fItag\fP will be included in the resulting
string\&. If \fItag\fP has a value of NULL, all segments are considered
as
matches, and \fItag_type\fP is ignored\&.
.IP "\fItag_type\fP" 10
Specifies the type of tag to be searched for, including
\fBXmMULTIBYTE_TEXT\fP, \fBXmWIDECHAR_TEXT\fP, and
\fBXmCHARSET_TEXT\fP\&.
.IP "\fIoutput_type\fP" 10
Specifies the type of text to be returned in the string, including
\fBXmMULTIBYTE_TEXT\fP, \fBXmWIDECHAR_TEXT\fP, and
\fBXmCHARSET_TEXT\fP\&.
.IP "\fIparse_table\fP" 10
Specifies the parse table to be used in scanning for compound string
components to be
converted to other characters\&.
.IP "\fIparse_count\fP" 10
Specifies how many entries are in \fIparse_table\fP\&.
.IP "\fIparse_model\fP" 10
Specifies which non-text components to be considered in matching in
\fIparse_table\fP\&. These include:
.RS
.IP "\fBXmOUTPUT_ALL\fP" 10
Puts out all matching components\&.
.IP "\fBXmOUTPUT_BETWEEN\fP" 10
Puts out only those matching components that are between two matching
text components\&.
.IP "\fBXmOUTPUT_BEGINNING\fP" 10
Puts out only those matching components that are at the beginning of a
matching text component\&.
.IP "\fBXmOUTPUT_END\fP" 10
Puts out only those matching components that are at the end of a
matching text component\&.
.IP "\fBXmOUTPUT_BOTH\fP" 10
Puts out only those matching components that are at the beginning or end
of a matching text component\&.
.RE
.SH "RETURN"
.PP
Returns a newly allocated string containing characters of a type
determined by \fIoutput_type\fP\&.
The application is responsible for managing this allocated space\&.
The application can recover this allocated space by calling \fBXtFree\fP\&.
.SH "RELATED"
.PP
\fBXmString\fP(3), \fBXmParseTable\fP(3), \fBXmParseMapping\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
