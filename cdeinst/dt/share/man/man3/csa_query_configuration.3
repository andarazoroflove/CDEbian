'\" t
...\" query_co.sgm /main/4 1996/08/30 15:37:52 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "csa_query_configuration" "library call"
.SH "NAME"
\fBcsa_query_configuration\fP \(em Determine information about the installed CSA configuration
.SH "SYNOPSIS"
.PP
.nf
#include <xcmc\&.h>
\fBCSA_return_code \fBcsa_query_configuration\fP\fR(
\fBCSA_session_handle \fBsession\fR\fR,
\fBCSA_enum \fBitem\fR\fR,
\fBCSA_buffer *\fBreference\fR\fR,
\fBCSA_extension *\fBquery_configuration_extensions\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The
\fBcsa_query_configuration\fP function queries the underlying implementation\&'s
configuration, and returns the information requested about
it, allocating memory when necessary\&.
The underlying
configuration file format is implementation dependent\&.
.SH "ARGUMENTS"
.SS "Session (Session Handle)"
.PP
Opaque session handle that represents a session with the
calendaring service\&.
.PP
Session handles are created by a logon function call and
invalidated with a logoff function call\&.
.PP
Session may be
\fBNULL\fP to indicate that there is no session and that session
independent information should be returned\&.
This will
provide default logon information\&.
.PP
If this value is set to a valid Session Handle, session
dependent configuration information will be returned\&.
.PP
If the session handle is invalid, then the error
\fBCSA_E_INVALID_SESSION_HANDLE\fP is returned\&.
.SS "Item (Enum)"
.PP
This argument indicates which configuration information
should be returned\&.
If the specified item is not
appropriate for the implementation, the error
\fBCSA_E_UNSUPPORTED_ENUM\fP is returned\&.
The possible values include:
.IP "CSA_CONFIG_CHARACTER_SET" 10
The reference argument will be a pointer to the array of
character set FPI strings for the implementation\&.
The
array will be terminated with a
\fBNULL\fP string\&.
The first character set FPI in the array is the
default character set used if the caller does not specify
one explicitly\&.
This pointer to the array should be freed
using
\fBcsa_free\fP(3)\&. This FPI is used by the caller at logon to specify to the
implementation to use a different character set than the
default\&.
.IP "CSA_CONFIG_LINE_TERM" 10
The reference argument will be a pointer to a
\fBCSA_enum\fR variable, which will be set to a value of
.IP "CSA_LINE_TERM_CRLF" 10
if the line delimiter is a carriage return followed by a line feed,
\fBCSA_LINE_TERM_LF\fP if the line delimiter is a line feed, or
\fBCSA_LINE_TERM_CR\fP if the line delimiter is a carriage return\&.
.IP "CSA_CONFIG_DEFAULT_SERVICE" 10
The returned reference argument will be a pointer to a
\fBCSA_string\fR into which the default service name will be returned\&.
A pointer value of
\fBNULL\fP will be written if no default service name is available\&.
This pointer should be freed using
\fBcsa_free\fP(3)\&. This string, along with the one returned by
\fBCSA_CONFIG_DEFAULT_USER,\fP can be used as defaults in user dialogs when asking for the
service name, user name, and password\&.
This will be
returned in the implementation default character set\&.
.IP "CSA_CONFIG_DEFAULT_USER" 10
The reference argument will be a pointer to a
\fBCSA_string,\fP into which the default user name will be returned\&.
A
pointer value of
\fBNULL\fP will be written if no default user name is available\&.
This
pointer should be freed using
\fBcsa_free\fP(3)\&. This string, along with the one returned by
\fBCSA_CONFIG_DEFAULT_SERVICE,\fP can be used as defaults in user dialogs when asking for the
provider name, user name, and password\&.
This will be
returned in the implementation default character set\&.
.IP "CSA_CONFIG_REQ_PASSWORD" 10
The reference argument will be a pointer to a
\fBCSA_enum\fR variable, which will be set to a value of
\fBCSA_REQUIRED_NO\fP if the password is not required to logon,
\fBCSA_REQUIRED_OPT\fP if the password is optional to logon, or
\fBCSA_REQUIRED_YES\fP if the password is required to logon\&.
.IP "CSA_CONFIG_REQ_SERVICE" 10
The reference argument will be a pointer to a
\fBCSA_enum\fR variable, which will be set to a value of
\fBCSA_REQUIRED_NO\fP if the service name is not required to logon,
\fBCSA_REQUIRED_OPT\fP if the service name is optional to logon, or
\fBCSA_REQUIRED_YES\fP if the service name is required to logon\&.
.IP "CSA_CONFIG_REQ_USER" 10
The reference argument will be a pointer to a
\fBCSA_enum\fR variable, which will be set to a value of
\fBCSA_REQUIRED_NO\fP if the user name is not required to logon,
\fBCSA_REQUIRED_OPT\fP if the user name is optional to logon, or
\fBCSA_REQUIRED_YES\fP if the user name is required to logon\&.
.IP "CSA_CONFIG_UI_AVAIL" 10
The reference argument will be a pointer to a
\fBCSA_boolean\fR variable, which will be set to a true value if there is UI
provided by the CSA implementation\&.
.IP "CSA_CONFIG_VER_IMPLEM" 10
The reference argument will be a pointer to a
\fBCSA_string\fR variable, which will be set to the CSA formal public
identifier for the version number for the implementation\&.
This pointer should be freed using
\fBcsa_free\fP(3)\&.
.IP "CSA_CONFIG_VER_SPEC" 10
The reference argument will be a pointer to a
\fBCSA_string\fR variable, which will be set to the CSA formal public
identifier for the CSA specification version number
supported by this implementation\&.
This pointer should be
freed using
\fBcsa_free\fP(3)\&.
.PP
The error
\fBCSA_E_UNSUPPORTED_ENUM\fP is returned if the specified value is not supported by the
implementation\&.
.SS "Query Configuration Extensions (Extension)"
.PP
A pointer to an array of
\fBCSA_extension\fR structures for this function\&.
The array may contain both
input extensions for providing additional information to
the function and output extensions for receiving
information from the function\&.
A value of
\fBNULL\fP indicates that the caller is not using any extensions\&.
See the extensions structure for more information\&.
.PP
Through extensions, the application can find out which
extensions are available\&.
The extension to do this is
\fBCSA_X_COM_SUPPORT_EXT\&.\fP Any CSA implementation that supports extensions must
support this extension\&.
For more information on this
extension, see the common extensions section of the
extensions appendix in this document
.SH "RETURN VALUE"
.SS "Reference (Buffer)"
.PP
This argument points to the buffer in which to receive the
configuration information\&.
The type of the variable or
buffer depends on the item argument\&.
.SS "Query Configuration Extensions (Extension)"
.PP
If output extensions were passed to the function in the
extensions list, the results from the service will be
available in the extension\&.
See the extensions structure for more information\&.
Whether the function succeeded or
not, and, if not, why\&.
It may be success or one of the
values listed under ERRORS below\&.
.SH "ERRORS"
.PP
The
\fBcsa_query_configuration\fP function returns the following error values:
.IP "CSA_E_FAILURE" 10
There was a general failure that does not
fit the description of any other error code\&.
.IP "CSA_E_INSUFFICIENT_MEMORY" 10
Insufficient memory was available to complete the requested operation\&.
.IP "CSA_E_INVALID_ENUM" 10
A
\fBCSA_enum\fR value is invalid\&.
.IP "CSA_E_INVALID_FLAG" 10
A flag value in the
\fIflags\fP argument was invalid\&.
.IP "CSA_E_INVALID_FUNCTION_EXT" 10
The function extension requested is invalid\&.
.IP "CSA_E_INVALID_PARAMETER" 10
A function parameter was invalid\&.
.IP "CSA_E_INVALID_SESSION_HANDLE" 10
The specified Session Handle is invalid or no longer valid
(e\&.g\&., after logging off)\&.
.IP "CSA_E_NOT_SUPPORTED" 10
The operation requested is not supported by this implementation\&.
.IP "CSA_E_SERVICE_UNAVAILABLE" 10
The requested calendar service is unavailable\&.
.IP "CSA_E_UNSUPPORTED_ENUM" 10
The specified enumerated value is not valid\&.
.IP "CSA_E_UNSUPPORTED_FLAG" 10
The flag requested is not supported\&.
.IP "CSA_E_UNSUPPORTED_FUNCTION_EXT" 10
The specified function extension is not supported or
\fBCSA_EXT_REQUIRED\fP is set\&.
.SH "SEE ALSO"
.PP
\fBcsa/csa\&.h - csacsa\fP(5), \fBcsa_add_calendar\fP(3), \fBcsa_add_entry\fP(3), \fBcsa_call_callbacks\fP(3), \fBcsa_delete_calendar\fP(3), \fBcsa_delete_entry\fP(3), \fBcsa_free\fP(3), \fBcsa_free_time_search\fP(3), \fBcsa_list_calendar_attributes\fP(3), \fBcsa_list_calendars\fP(3), \fBcsa_list_entries\fP(3), \fBcsa_list_entry_attributes\fP(3), \fBcsa_list_entry_sequence\fP(3), \fBcsa_logoff\fP(3), \fBcsa_logon\fP(3), \fBcsa_look_up\fP(3), \fBcsa_read_calendar_attributes\fP(3), \fBcsa_read_entry_attributes\fP(3), \fBcsa_read_next_reminder\fP(3), \fBcsa_register_callback\fP(3), \fBcsa_unregister_callback\fP(3), \fBcsa_update_calendar_attributes\fP(3), \fBcsa_update_entry_attributes\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:40
