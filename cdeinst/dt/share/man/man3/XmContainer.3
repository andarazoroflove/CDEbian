'\" t
...\" ContainA.sgm /main/12 1996/09/08 20:31:35 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmContainer" "library call"
.SH "NAME"
\fBXmContainer\fP \(em The Container widget class
.iX "XmContainer"
.iX "container" "Container"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Container\&.h>
.fi
.SH "DESCRIPTION"
.PP
Container manages child widgets that have the \fBContainerItem\fP trait\&.
These child widgets can be viewed in several different
layout formats,
selected using different selection types and techniques,
and directly manipulated by the user\&.
.PP
Three different formats or views are supported by the Container\&.
They are specified via the \fBXmNentryViewType\fP resource:
.IP "   \(bu" 6
\fBXmLARGE_ICON\fP
.IP "   \(bu" 6
\fBXmSMALL_ICON\fP
.IP "   \(bu" 6
\fBXmANY_ICON\fP
.PP
Three different layout types are supported by the Container\&.
They are specified by the \fBXmNlayoutType\fP resource:
.IP "   \(bu" 6
\fBXmSPATIAL\fP
.IP "   \(bu" 6
\fBXmOUTLINE\fP
.IP "   \(bu" 6
\fBXmDETAIL\fP
.PP
In the \fBXmSPATIAL\fP layout type, several other resources
(\fBXmNspatialStyle\fP, \fBXmNspatialIncludeModel\fP, \fBXmNspatialSnapModel\fP)
control the positioning of the items within the Container;
an application programmer can specify these resources so that the Container
strictly enforces the position of each item or so that the Container positions
items according to constraint resources specified for each item\&.
The user, however, can alter the position of an item in the \fBXmSPATIAL\fP
layout type
within the Container by direct manipulation; for example, by pressing
\fBBTransfer\fP over the item and then dragging and releasing
\fBBTransfer\fP
over some location within the Container\&.
.PP
In the \fBXmOUTLINE\fP layout type, the Container controls the positioning of
the items\&. Items within the Container can have parent-child
relationships between them\&. Each item\&'s \fBXmNentryParent\fP resource can
specify another item in the same Container as its parent;
items with a non-NULL value
for \fBXmNentryParent\fP can only be displayed in the \fBXmOUTLINE\fP layout
type\&. In the \fBXmOUTLINE\fP layout type,
items are positioned in a tree configuration with connecting lines drawn
to illustrate the relationships\&.
Items are positioned top to bottom in the order specified by
\fBXmNpositionIndex\fP within their parent\&.
Container positions a PushButton next to each item that has a parent
relationship to other items\&. The PushButton contains a pixmap to illustrate
whether the child items are shown or not; the user can activate the
PushButton to toggle between showing or hiding the child items\&.
Direct manipulation to alter the
position of the item is not supported in the \fBXmOUTLINE\fP layout
type\&.
Note that the \fBXmNtraversalOn\fP resource of the PushButtons created
by Container are set to False\&.
.PP
The \fBXmDETAIL\fP layout type is the same as \fBXmOUTLINE\fP, except that
each item can also display additional information as rows in
columns with column headers specified in the \fBXmNdetailColumnHeading\fP
resources\&. In each item row, the item\&'s detail information
(see the reference page on \fBXmIconGadget\fR for a description of the
\fBXmNentryDetail\fP resource)
is displayed\&. Items are positioned top to bottom
in the order specified by
\fBXmNpositionIndex\fP within the parent\&.
.SS "Selection"
.PP
When a child widget of the container is selected, the container
specifies that the item should display the appropriate visual
information to the user via the \fBContainerItem\fP trait\&.
The application program is notified of selection
changes through \fBXmNselectionCallback\fP\&.
.PP
The container uses four selection policies:
.IP "   \(bu" 6
Single
.IP "   \(bu" 6
Browse
.IP "   \(bu" 6
Multiple
.IP "   \(bu" 6
Extended
.PP
In Single Select and Browse Select modes, only one item can be selected at a
time\&. Pressing \fBBSelect\fP
on an item selects it and deselects any other selected item\&.
Pressing \fBBSelect\fP over an empty space in the Container deselects
all items\&. In Browse Select, dragging \fBBSelect\fP moves the selection
as the pointer is moved\&.
.PP
In Multiple Select and Extended Select modes, any number of items can be
selected at the same time\&.
In Multiple Select, pressing and dragging \fBBSelect\fP or
\fBBExtend\fP to specify an item, range of items, or group of discontiguous
items
causes the selection states of those items to be toggled\&. In Extended Select,
pressing and dragging \fBBSelect\fP to indicate an item, range of items,
or group of discontiguous
items selects those items and deselects all others\&. Pressing
and dragging \fBBExtend\fP in Extended Select to indicate an item,
range of items, or discontiguous group of items causes the selection states
of those items to be toggled\&.
.PP
Several techniques are available to indicate an item, range of items, or
group of discontiguous items in the Multiple Select and Extended Select modes\&.
.PP
In the \fBXmSPATIAL\fP and \fBXmOUTLINE\fP layout types,
the \fBXmNselectionTechnique\fP resource specifies the techniques to be used
to indicate items\&. The default specification of \fBXmTOUCH_OVER\fP
allows both the Random-Swipe and Marquee techniques to be used when
\fBXmNlayoutStyle\fP is \fBXmSPATIAL\fP\&. The default specification of
\fBXmTOUCH_OVER\fP allows the Range-Swipe, Range-Click, and Marquee techniques
to be used when \fBXmNlayoutStyle\fP is \fBXmOUTLINE\fP\&.
.PP
Discontiguous groups of items can be selected using the Random-Swipe
technique\&.
In the Random-Swipe
technique, pressing \fBBSelect\fP (or \fBBExtend\fP) over an item and dragging
\fBBSelect\fP over other items selects all of those items\&. Only those
items that pointer passed over are selected\&.
.PP
In the Range-Swipe
technique, the user presses \fBBSelect\fP (or \fBBExtend\fP) over the first
item and releases \fBBSelect\fP over the last item; all items within the range
between the first and last item are selected whether the pointer actually
passed over them or not\&.
In the Range-Click technique, the user presses and releases
\fBBSelect\fP (or \fBBExtend\fP) over the first item and then presses and
releases \fBBExtend\fP over the last item\&.
.PP
In the Marquee technique, pressing \fBBSelect\fP (or \fBBExtend\fP)
over a blank space within the
Container indicates the starting point of a Marquee rectangle\&. Dragging
\fBBSelect\fP draws a Marquee rectangle (rubberband line) between the
starting point and current pointer\&. All items completely within the Marquee
rectangle are selected\&.
.PP
Specifying \fBXmTOUCH_ONLY\fP for \fBXmNselectionTechnique\fP enforces
the Random-Swipe technique even when \fBBSelect\fP (or \fBBExtend\fP)
is pressed over a blank space\&.
Similarly, specifying \fBXmMARQUEE\fP enforces the
Marquee technique even when \fBBSelect\fP (or \fBBExtend\fP)
is pressed over an item; since the item over which the press occurs is
only partially included in the Marquee rectangle, it is not selected\&.
\fBXmMARQUEE_EXTEND_START\fP and \fBXmMARQUEE_EXTEND_BOTH\fP enforce the
Marquee technique and also cause the rectangle to extend automatically around
the first item indicated and, for \fBXmMARQUEE_EXTEND_BOTH\fP, the last item\&.
.PP
In the \fBXmDETAIL\fP layout type, the Range-Swipe and
Range-Click techniques
are available to indicate a range of items for selection\&.
.PP
Container uses the \fBXmQTcontainerItem\fP, \fBXmQTscrollFrame\fP, and
\fBXmQTspecifyRenderTable\fP
traits and holds the
\fBXmQTcontainer\fP and \fBXmQTtransfer\fP traits\&.
.SS "Data Transfer Behavior"
.PP
Container supports dragging of selected items from the widget\&.
Depending on the value of \fBXmNprimaryOwnership\fP, Container can also
support primary selection\&.
.PP
As a source of data, Container supports the following targets and
associated conversions of data to these targets:
.IP "\fIlocale\fP" 10
If the \fIlocale\fP target matches the widget\&'s locale, the widget
transfers the selected items in the encoding of the locale\&.
The value for each item transferred, except the last, includes a trailing
separator\&.
Each item value is the \fBXmNlabelString\fP of the
item\&.
.IP "\fBCOMPOUND_TEXT\fP" 10
The widget transfers the selected items as type \fBCOMPOUND_TEXT\fP\&.
The value for each item transferred, except the last, includes a trailing
separator\&.
Each item value is the \fBXmNlabelString\fP of the
item\&.
.IP "\fBDELETE\fP" 10
The widget deletes the selected items\&.
.IP "\fBPIXMAP\fP" 10
The widget transfers a list of the pixmap IDs of the selected items as
type \fBDRAWABLE\fP\&.
.IP "\fBSTRING\fP" 10
The widget transfers the selected items as type \fBSTRING\fP\&.
The value for each item transferred, except the last, includes a trailing
separator\&.
Each item value is the \fBXmNlabelString\fP of the
item\&.
.IP "\fBTEXT\fP" 10
If the selected items are fully convertible to the encoding of the
locale, the widget transfers the selected items in the encoding of the
locale\&.
Otherwise, the widget transfers the selected items as type
\fBCOMPOUND_TEXT\fP\&.
The value for each item transferred, except the last, includes a trailing
separator\&.
Each item value is the \fBXmNlabelString\fP of the
item\&.
.IP "\fB_MOTIF_CLIPBOARD_TARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets it
supports for immediate transfer for the \fBCLIPBOARD\fP selection\&.
These include \fB_MOTIF_COMPOUND_STRING\fP and \fBPIXMAP\fP\&.
If the selected items are fully convertible to \fBSTRING\fP, these also
include \fBSTRING\fP; otherwise, they also include \fBCOMPOUND_TEXT\fP\&.
.IP "\fB_MOTIF_COMPOUND_STRING\fP" 10
The widget transfers the selected items as a compound string in
Byte Stream format\&.
The value for each item transferred, except the last, includes a trailing
separator\&.
Each item value is the \fBXmNlabelString\fP of the
item\&.
.IP "\fB_MOTIF_DEFERRED_CLIPBOARD_TARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets it
supports for delayed transfer for the \fBCLIPBOARD\fP selection\&.
This widget currently supplies no targets for
\fB_MOTIF_DEFERRED_CLIPBOARD_TARGETS\fP\&.
.IP "\fB_MOTIF_DRAG_OFFSET\fP" 10
The widget transfers a list of two 16-bit numbers, of type
\fBINTEGER\fP, representing an x and y offset for an item being dragged\&.
This offset is calculated so that, if the offset were added to the x and
y coordinates at the drop site, and the dragged pixmap placed at that
position, it would correspond to the position the user would expect the
pixmap to placed at, based on the drag icon used at the drop site\&.
.IP "\fB_MOTIF_EXPORT_TARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets to be
used as the value of the DragContext\&'s \fBXmNexportTargets\fP in a
drag-and-drop transfer\&.
These include \fB_MOTIF_COMPOUND_STRING\fP, \fBPIXMAP\fP,
\fBCOMPOUND_TEXT\fP, the encoding of the locale, \fBSTRING\fP,
\fBTEXT\fP, \fBBACKGROUND\fP, and \fBFOREGROUND\fP\&.
.PP
As a source of data, Container also supports the following standard
Motif targets:
.IP "\fBBACKGROUND\fP" 10
The widget transfers \fBXmNbackground\fP as type \fBPIXEL\fP\&.
.IP "\fBCLASS\fP" 10
The widget finds the first shell in the widget hierarchy that has a
\fBWM_CLASS\fP property and transfers the contents as text in the
current locale\&.
.IP "\fBCLIENT_WINDOW\fP" 10
The widget finds the first shell in the widget hierarchy and transfers
its window as type \fBWINDOW\fP\&.
.IP "\fBCOLORMAP\fP" 10
The widget transfers \fBXmNcolormap\fP as type \fBCOLORMAP\fP\&.
.IP "\fBFOREGROUND\fP" 10
The widget transfers \fBXmNforeground\fP as type \fBPIXEL\fP\&.
.IP "\fBNAME\fP" 10
The widget finds the first shell in the widget hierarchy that has a
\fBWM_NAME\fP property and transfers the contents as text in the current
locale\&.
.IP "\fBTARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets it
supports\&.
These include the standard targets in this list\&.
These also include \fB_MOTIF_COMPOUND_STRING\fP, \fBPIXMAP\fP,
\fBCOMPOUND_TEXT\fP, the encoding of the locale, \fBSTRING\fP, and
\fBTEXT\fP\&.
.IP "\fBTIMESTAMP\fP" 10
The widget transfers the timestamp used to acquire the selection as type
\fBINTEGER\fP\&.
.IP "\fB_MOTIF_RENDER_TABLE\fP" 10
The widget transfers \fBXmNrenderTable\fP if it exists, or else the
default text render table, as type \fBSTRING\fP\&.
.IP "\fB_MOTIF_ENCODING_REGISTRY\fP" 10
The widget transfers its encoding registry as type \fBSTRING\fP\&.
The value is a list of NULL separated items in the
form of tag encoding pairs\&.
This target symbolizes the transfer target for the
Motif Segment Encoding Registry\&.
Widgets and applications can use this Registry to register
text encoding formats for specified render table tags\&.
Applications access this Registry by calling
\fBXmRegisterSegmentEncoding\fP and \fBXmMapSegmentEncoding\fP\&.
.PP
As a destination for data, Container supports only the dropping of items
being dragged from the same widget\&.
Subclasses and the \fBXmNdestinationCallback\fP procedures are
responsible for any other data transfers to the widget\&.
.SS "Classes"
.PP
Container inherits behavior, resources, and traits from the \fBCore\fP,
\fBComposite\fP, \fBConstraint\fP,
and \fBXmManager\fP classes\&.
.PP
The class pointer is \fBxmContainerWidgetClass\fP\&.
.PP
The class name is \fBXmContainer\fP\&.
.SS "New Resources"
.PP
The following table defines a set of widget resources used by the
programmer to specify data\&. The programmer can also set the resource
values for the inherited classes to set attributes for this widget\&.
To reference a resource by name or by class in a \fB\&.Xdefaults\fP file,
remove the \fBXmN\fP or \fBXmC\fP prefix and use the remaining letters\&.
To specify one of the defined values for a resource in a \fB\&.Xdefaults\fP
file, remove the \fBXm\fP prefix and use the remaining letters (in
either lowercase or uppercase, but include any underscores between
words)\&. The codes in the access column indicate whether the given resource
can be set at creation time (C), set by using \fBXtSetValues\fP
(S), retrieved by using \fBXtGetValues\fP (G), or is not
applicable (N/A)\&.
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmContainer Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNautomaticSelectionXmCAutomaticSelectionunsigned charXmAUTO_SELECTCSG
_____
XmNcollapsedStatePixmapXmCCollapsedStatePixmapPixmapdynamicCSG
_____
XmNconvertCallbackXmCCallbackXtCallbackListNULLC
_____
XmNdefaultActionCallbackXmCCallbackXtCallbackListNULLC
_____
XmNdestinationCallbackXmCCallbackXtCallbackListNULLC
_____
XmNdetailColumnHeadingXmCDetailColumnHeadingXmStringTableNULLCSG
_____
XmNdetailColumnHeadingCountXmCDetailColumnHeadingCountCardinal0CSG
_____
XmNdetailOrderXmCDetailOrderCardinal *NULLCSG
_____
XmNdetailOrderCountXmCDetailOrderCountCardinaldynamicCSG
_____
XmNdetailTabListXmCDetailTabListXmTabListNULLCSG
_____
XmNentryViewTypeXmCEntryViewTypeunsigned charXmANY_ICONCSG
_____
XmNexpandedStatePixmapXmCExpandedStatePixmapPixmapdynamicCSG
_____
XmNfontListXmCFontListXmFontListNULLCSG
_____
XmNlargeCellHeightXmCCellHeightDimensiondynamicCSG
_____
XmNlargeCellWidthXmCCellWidthDimensiondynamicCSG
_____
XmNlayoutTypeXmCLayoutTypeunsigned charXmSPATIALCSG
_____
XmNmarginHeightXmCMarginHeightDimension0CSG
_____
XmNmarginWidthXmCMarginWidthDimension0CSG
_____
XmNoutlineButtonPolicyXmCOutlineButtonPolicyunsigned charXmOUTLINE_BUTTON_PRESENTCSG
_____
XmNoutlineChangedCallbackXmCCallbackXtCallbackListNULLC
_____
XmNoutlineColumnWidthXmCOutlineColumnWidthDimensiondynamicCSG
_____
XmNoutlineIndentationXmCOutlineIndentationDimension40CSG
_____
XmNoutlineLineStyleXmCLineStyleunsigned charXmSINGLECSG
_____
XmNprimaryOwnershipXmCprimaryOwnershipunsigned charXmOWN_POSSIBLE_MULTIPLECSG
_____
XmNrenderTableXmCRenderTableXmRenderTabledynamicCSG
_____
XmNselectColorXmCSelectColorPixeldynamicCSG
_____
XmNselectedObjectsXmCSelectedObjectsWidgetListNULLSG
_____
XmNselectedObjectCountXmCSelectedObjectCountunsigned int0SG
_____
XmNselectionCallbackXmCCallbackXtCallbackListNULLC
_____
XmNselectionPolicyXmCSelectionPolicyunsigned charXmEXTENDED_SELECTCSG
_____
XmNselectionTechniqueXmCSelectionTechniqueunsigned charXmTOUCH_OVERCSG
_____
XmNsmallCellHeightXmCCellHeightDimensiondynamicCSG
_____
XmNsmallCellWidthXmCCellWidthDimensiondynamicCSG
_____
XmNspatialIncludeModelXmCSpatialIncludeModelunsigned charXmAPPENDCSG
_____
XmNspatialResizeModelXmCSpatialResizeModelunsigned charXmGROW_MINORCSG
_____
XmNspatialSnapModelXmCSpatialSnapModelunsigned charXmNONECSG
_____
XmNspatialStyleXmCSpatialStyleunsigned charXmGRIDCSG
_____
.TE
.IP "\fBXmNautomaticSelection\fP" 10
Indicates whether the Container invokes selection callbacks when each
item is selected (or toggled) or whether selection callbacks are not
invoked until the user has completed selection actions (for example,
the user has released the mouse button)\&. It can have one of the following
values:
.RS
.IP "\fBXmAUTO_SELECT\fP" 10
Makes selection callbacks automatically when each
item is selected or toggled\&. This may also be the value \fBTRUE\fP\&.
.IP "\fBXmNO_AUTO_SELECT\fP" 10
Delays selection callbacks until the
user has finished selection actions\&. This may also be the value \fBFALSE\fP\&.
.RE
.IP "\fBXmNcollapsedStatePixmap\fP" 10
Specifies the pixmap to display on a PushButton next to a Container item
with child items, when \fBXmNoutlineButtonPolicy\fP is
\fBXmOUTLINE_BUTTON_PRESENT\fP\&.
\fBXmNcollapsedStatePixmap\fP indicates that the child items are not displayed\&.
If set to \fBXmUNSPECIFIED_PIXMAP\fP, a default pixmap showing an
arrow pointing up is used\&.
.IP "\fBXmNconvertCallback\fP" 10
Specifies a list of callbacks called when the Container is asked to
convert a selection\&.
The type of the structure whose address is passed to these callbacks is
\fBXmConvertCallbackStruct\fR\&.
The reason is \fBXmCR_OK\fP\&.
.IP "\fBXmNdefaultActionCallback\fP" 10
Specifies a list of callbacks to call when the user double-clicks
an item or presses
\fB<Enter>\fP or
\fB<Return>\fP over an item\&.
The callback structure is \fBXmContainerSelectCallbackStruct\fR\&.
The reason is \fBXmCR_DEFAULT_ACTION\fP\&.
.IP "\fBXmNdestinationCallback\fP" 10
Specifies a list of callbacks called when the Container is the
destination of a transfer operation\&.
The type of the structure whose address is passed to these callbacks is
\fBXmDestinationCallbackStruct\fR\&.
The reason is \fBXmCR_OK\fP\&.
.IP "\fBXmNdetailColumnHeading\fP" 10
Specifies a table of \fBXmString\fRs to display as the headings to columns\&.
If NULL, or if \fBXmNlayoutType\fP
is not \fBXmDETAIL\fP, no heading is displayed\&.
.IP "\fBXmNdetailColumnHeadingCount\fP" 10
Specifies a count of \fBXmString\fRs in the table specified for
\fBXmNdetailColumnHeading\fP\&.
.IP "\fBXmNdetailOrder\fP" 10
Specifies an array of
\fBCardinal\fRs that indicate which column detail information,
and in which order, each Container child will display its detail information\&.
This resource is ignored if \fBXmNlayoutType\fP is not \fBXmDETAIL\fP\&.
If NULL, the the default behavior is determined by \fBXmNdetailOrderCount\fP\&.
.IP "\fBXmNdetailOrderCount\fP" 10
Specifies a count of \fBCardinal\fRs in the array specified for
\fBXmNdetailOrder\fP\&.
If \fBXmNdetailOrder\fP is NULL and \fBXmNdetailOrderCount\fP is not 0, then
each Container child displays its detail information in order from column
1 to the \fBXmNdetailOrderCount\fP column number\&. If \fBXmNdetailOrderCount\fP
is 0, then a default is calculated from the detail order count
information of each item accessed via the \fBContainerItem\fP trait\&.
.IP "\fBXmNdetailTabList\fP" 10
Indicates an \fBXmTabList\fR specifying the start
of each column in the \fBXmDETAIL\fP layout\&.
If this resource is set to NULL, then Container calculates an \fBXmTabList\fR\&.
This resource is ignored if \fBXmNlayoutType\fP is not \fBXmDETAIL\fP\&.
.IP "\fBXmNentryViewType\fP" 10
Specifies the view type for all Container children\&. The view type is
specified for each item via the \fBContainerItem\fP trait\&.
It can have one of the following values:
.RS
.IP "\fBXmANY_ICON\fP" 10
No specification is made for Container children\&. Children use their own
default specifications\&.
.IP "\fBXmLARGE_ICON\fP" 10
The view type for all children is \fBXmLARGE_ICON\fP\&.
.IP "\fBXmSMALL_ICON\fP" 10
The view type for all children is \fBXmSMALL_ICON\fP\&.
.RE
.IP "\fBXmNexpandedStatePixmap\fP" 10
Specifies the pixmap to display on a PushButton next to a Container item
with child items, when \fBXmNoutlineButtonPolicy\fP is
\fBXmOUTLINE_BUTTON_PRESENT\fP\&.
\fBXmNexpandedStatePixmap\fP indicates that the child items are displayed\&.
If set to \fBXmUNSPECIFIED_PIXMAP\fP, a default pixmap showing
an arrow pointing down is used\&.
.IP "\fBXmNfontList\fP" 10
Specifies the fontlist associated with \fBXmContainer\fP\&. The fontlist
is an obsolete construct and has been superseded by the render table\&.
It is included for compatibility with earlier versions of Motif, and
for applications that do not easily support render tables\&. The
default fontlist is derived from the default render table; and if
both a fontlist and a render table are specified, the render table
takes precedence\&.
.IP "\fBXmNlargeCellHeight\fP" 10
Specifies the height of a cell for \fBXmGRID\fP or
\fBXmCELLS\fP spatial style when
\fBXmNentryViewType\fP is \fBXmLARGE_ICON\fP or \fBXmANY_ICON\fP\&.
.IP "\fBXmNlargeCellWidth\fP" 10
Specifies the width of a cell for \fBXmGRID\fP or
\fBXmCELLS\fP spatial style when
\fBXmNentryViewType\fP is \fBXmLARGE_ICON\fP or \fBXmANY_ICON\fP\&.
.IP "\fBXmNlayoutType\fP" 10
Specifies the policy for laying out child widgets within the Container\&.
It can have one of the following values:
.RS
.IP "\fBXmDETAIL\fP" 10
Displays items in the same manner as when the resource is \fBXmOUTLINE\fP,
except that each item displays detail information next to it\&.
.IP "\fBXmOUTLINE\fP" 10
Displays items in a tree configuration,
in \fBXmNpositionIndex\fP within \fBXmNentryParent\fP order, with connecting
lines drawn to show their parent-child relationships\&.
.IP "\fBXmSPATIAL\fP" 10
Displays items according to \fBXmNspatialStyle\fP\&.
Items with \fBXmNentryParent\fP values are not displayed\&.
.RE
.IP "\fBXmNmarginHeight\fP" 10
Specifies the margin spacing at the top and bottom of the Container\&.
.IP "\fBXmNmarginWidth\fP" 10
Specifies the margin spacing at the left and right sides of the Container\&.
.IP "\fBXmNoutlineButtonPolicy\fP" 10
Specifies whether or not to display buttons for users to expand and collapse
the display of items\&.
It can have one of the following values:
.RS
.IP "\fBXmOUTLINE_BUTTON_ABSENT\fP" 10
Do not display the outline buttons\&.
.IP "\fBXmOUTLINE_BUTTON_PRESENT\fP" 10
Display the outline buttons\&.
.RE
.IP "\fBXmNoutlineChangedCallback\fP" 10
Specifies a list of callbacks to call when an item\&'s \fBXmNoutlineState\fP
is changed\&.
The callback structure is \fBXmContainerOutlineCallbackStruct\fR\&.
The reason is \fBXmCR_COLLAPSED\fP or \fBXmCR_EXPANDED\fP,
depending on the new value of \fBXmNoutlineState\fP\&.
.IP "\fBXmNoutlineColumnWidth\fP" 10
Specifies the width of the first column displayed when \fBXmNlayoutType\fP
is \fBXmDETAIL\fP\&. Specifies the preferred width of the Container (without the
margins) when \fBXmNlayoutType\fP is \fBXmOUTLINE\fP\&.
If not specified, Container will determine a default value equal to the
widest space necessary to display an item\&'s pixmap and
\fBXmNoutlineIndentation\fP\&.
.IP "\fBXmNoutlineIndentation\fP" 10
Specifies the distance to indent for the display of
child items when \fBXmNlayoutType\fP is \fBXmOUTLINE\fP or \fBXmDETAIL\fP\&.
.IP "\fBXmNoutlineLineStyle\fP" 10
Specifies whether to draw lines between items with parent-child
relationships when \fBXmNlayoutType\fP
is \fBXmOUTLINE\fP or \fBXmDETAIL\fP\&.
It can have one of the following values:
.RS
.IP "\fBXmNO_LINE\fP" 10
Draws no line\&.
.IP "\fBXmSINGLE\fP" 10
Draws a line one pixel wide\&.
.RE
.IP "\fBXmNprimaryOwnership\fP" 10
Specifies whether Container takes ownership of the primary selection when a
selection is made inside it\&. This resource can take the following values:
.RS
.IP "\fBXmOWN_NEVER\fP" 10
Never takes ownership\&.
.IP "\fBXmOWN_ALWAYS\fP" 10
Always takes ownership\&.
.IP "\fBXmOWN_MULTIPLE\fP" 10
Only takes ownership if more than one element has been
selected\&.
.IP "\fBXmOWN_POSSIBLE_MULTIPLE\fP" 10
Only takes ownership if more than one element
can be selected at a time\&.
.RE
.IP "\fBXmNrenderTable\fP" 10
Specifies the \fBXmRenderTable\fR that is inherited by all children
of the Container\&.
The default is implementation dependent\&.
If both a render table and a fontlist are specified, the render table
will take precedence\&.
.IP "\fBXmNselectColor\fP" 10
Specifies a Pixel that can be accessed by children of the Container and
used to indicate that the child is in a selected state\&. In addition to
a Pixel value, the following symbolic values can be specified:
.RS
.IP "\fBXmDEFAULT_SELECT_COLOR\fP" 10
Specifies a color between the background and the bottom shadow color\&.
.IP "\fBXmREVERSED_GROUND_COLORS\fP" 10
Forces the select color to the foreground color and causes the default color
of any text rendered over the select color to be the background color\&.
.IP "\fBHIGHLIGHT_COLOR\fP" 10
Forces the fill color to use the highlight color\&.
.RE
.IP "\fBXmNselectedObjectCount\fP" 10
Specifies the number of widgets in the selected items list\&.
The value must be the number of items in \fBXmNselectedObjects\fP\&.
.IP "\fBXmNselectedObjects\fP" 10
An array of widgets that represents the Container items that
are currently selected, either by the user or by the application\&.
.IP "" 10
If the application sets \fBXmNselectedObjects\fP to an array of widgets,
those array elements that are valid Container items are selected\&.
.IP "\fBXmNselectionCallback\fP" 10
Specifies a list of callbacks to call when an item is selected\&.
The callback structure is \fBXmContainerSelectCallbackStruct\fR\&.
The reason is \fBXmCR_SINGLE_SELECT\fP, \fBXmCR_BROWSE_SELECT\fP,
\fBXmCR_MULTIPLE_SELECT\fP, or \fBXmCR_EXTENDED_MULTIPLE\fP, depending on
\fBXmNselectionPolicy\fP\&.
.IP "\fBXmNselectionPolicy\fP" 10
Defines the interpretation of the selection action\&. This can be one of the
following values:
.RS
.IP "\fBXmSINGLE_SELECT\fP" 10
Allows only single selections\&.
.IP "\fBXmBROWSE_SELECT\fP" 10
Allows "drag and browse" selections\&.
.IP "\fBXmMULTIPLE_SELECT\fP" 10
Allows multiple selections\&.
.IP "\fBXmEXTENDED_SELECT\fP" 10
Allows extended selections\&.
.RE
.IP "\fBXmNselectionTechnique\fP" 10
Specifies the selection technique to use when the Container displays
items in a 2-dimensional layout
(\fBXmNentryViewType\fP is \fBXmLARGE_ICON\fP or \fBXmSMALL_ICON\fP)\&.
In the \fBXmDETAIL\fP layout, the \fBXmNselectionTechnique\fP
resource is treated as \fBXmTOUCH_ONLY\fP\&. In either case,
it can have one of the following
values:
.RS
.IP "\fBXmMARQUEE\fP" 10
Uses the Marquee technique only\&.
.IP "\fBXmMARQUEE_EXTEND_START\fP" 10
Uses the Marquee technique only and extends
the Marquee rectangle around any item under the Marquee start point\&.
.IP "\fBXmMARQUEE_EXTEND_BOTH\fP" 10
Uses the Marquee technique only and extends
the Marquee rectangle around any items under the Marquee start and end points\&.
.IP "\fBXmTOUCH_ONLY\fP" 10
Uses the Random-Swipe technique only if
\fBXmNlayoutType\fP is \fBXmSPATIAL\fP\&.
Otherwise, uses the Range-Swipe and Range-Click techniques\&.
.IP "\fBXmTOUCH_OVER\fP" 10
If the selection action begins over an item
and \fBXmNlayoutType\fP is \fBXmSPATIAL\fP, uses
the Random-Swipe technique\&.
If the selection action begins over an item
and \fBXmNlayoutType\fP is \fBXmOUTLINE\fP or \fBXmDETAIL\fP, uses
the Range-Swipe and Range-Click techniques\&.
Uses the Marquee technique if the select action
begins over an unoccupied area in the Container\&.
.RE
.IP "\fBXmNsmallCellHeight\fP" 10
Specifies the height of a cell for \fBXmGRID\fP or
\fBXmCELLS\fP spatial style when
\fBXmNentryViewType\fP is \fBXmSMALL_ICON\fP\&.
.IP "\fBXmNsmallCellWidth\fP" 10
Specifies the width of a cell for \fBXmGRID\fP or
\fBXmCELLS\fP spatial style when
\fBXmNentryViewType\fP is \fBXmSMALL_ICON\fP\&.
.IP "\fBXmNspatialIncludeModel\fP" 10
Specifies the layout of an item when the item is managed
in the Container when \fBXmNlayoutType\fP is
\fBXmSPATIAL\fP and \fBXmNspatialStyle\fP is \fBXmGRID\fP or \fBXmCELLS\fP\&.
It can have one of the following values:
.RS
.IP "\fBXmAPPEND\fP" 10
Places the item after the last occupied cell according to
\fBXmNlayoutDirection\fP\&.
.IP "\fBXmCLOSEST\fP" 10
Places the item in the free cell closest to the position
specified by \fBXmNx\fP and \fBXmNy\fP\&.
.IP "\fBXmFIRST_FIT\fP" 10
Places the item in the first free cell
according to \fBXmNlayoutDirection\fP\&.
.RE
.IP "\fBXmNspatialResizeModel\fP" 10
Specifies how Container will attempt to grow its dimensions
when \fBXmNlayoutType\fP is
\fBXmSPATIAL\fP and \fBXmNspatialStyle\fP is \fBXmGRID\fP or \fBXmCELLS\fP
and there are not enough cells to contain a new Container item\&.
It can have one of the following values:
.RS
.IP "\fBXmGROW_BALANCED\fP" 10
Container will request both width and height growth from its parent\&.
.IP "\fBXmGROW_MAJOR\fP" 10
Container will request growth in its major dimension from its parent\&.
Container\&'s major dimension is width when the precedence of
\fBXmNlayoutDirection\fP is horizontal, and height when vertical\&.
.IP "\fBXmGROW_MINOR\fP" 10
Container will request growth in its minor dimension from its parent\&.
Container\&'s minor dimension is height when the precedence of
\fBXmNlayoutDirection\fP is horizontal, and width when vertical\&.
.RE
.IP "\fBXmNspatialSnapModel\fP" 10
Specifies how Container will position an item within the cell layout
when \fBXmNlayoutType\fP is
\fBXmSPATIAL\fP and \fBXmNspatialStyle\fP is \fBXmGRID\fP or \fBXmCELLS\fP\&.
It can have one of the following values:
.RS
.IP "\fBXmCENTER\fP" 10
Center the items as follows, depending on the value of \fBXmNentryViewType\fP:
.RS
.IP "\fBXmLARGE_ICON\fP" 10
The child is centered in
the cell horizontally and baseline-aligned vertically\&.
.IP "\fBXmSMALL_ICON\fP" 10
The child is centered in the cell vertically on its baseline and aligned
with the left or right of the cell horizontally, depending on
the value of \fBXmNlayoutDirection\fP\&.
.RE
.IP "\fBXmSNAP_TO_GRID\fP" 10
Position the item at the upper-left or upper-right corner of the cell(s),
depending on the value of \fBXmNlayoutDirection\fP\&.
.IP "\fBXmNONE\fP" 10
Position the item according to the position
specified by \fBXmNx\fP and \fBXmNy\fP\&.
If the position is not within the coordinates of the cell(s),
then position the item at the upper-left or upper-right corner of the cell(s),
depending on the value of \fBXmNlayoutDirection\fP\&.
.RE
.IP "\fBXmNspatialStyle\fP" 10
Specifies the layout of Container items when \fBXmNlayoutType\fP is
\fBXmSPATIAL\fP\&. It can have one of the following values:
.RS
.IP "\fBXmCELLS\fP" 10
Lays out items within a grid of same-size cells\&.
Each item occupies as many cells as required to contain the item dimensions\&.
.IP "\fBXmGRID\fP" 10
Lays out items within a grid of same-size cells\&.
Each item occupies only one cell\&. Items that are larger than the cell
size may overlap other items\&.
.IP "\fBXmNONE\fP" 10
Lays out items according to \fBXmNx\fP and
\fBXmNy\fP\&.
.RE
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmContainer Constraint Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNentryParentXmCWidgetWidgetNULLCSG
_____
XmNoutlineStateXmCOutlineStateunsigned charXmCOLLAPSEDCSG
_____
XmNpositionIndexXmCPositionIndexintdynamicCSG
_____
.TE
.IP "\fBXmNentryParent\fP" 10
Specifies the widget that is this item\&'s logical parent\&.
A value of NULL indicates that this is a root-level item\&. Parent-child
information is displayed only when the \fBXmNlayoutPolicy\fP is \fBXmOUTLINE\fP
or \fBXmDETAIL\fP\&.
.IP "\fBXmNoutlineState\fP" 10
Specifies whether to display child items when \fBXmNlayoutPolicy\fP is
\fBXmOUTLINE\fP or \fBXmDETAIL\fP\&.
It can have one of the following values:
.RS
.IP "\fBXmCOLLAPSED\fP" 10
Does not display child items\&.
.IP "\fBXmEXPANDED\fP" 10
Displays child items\&.
.RE
.IP "\fBXmNpositionIndex\fP" 10
Specifies the order of items in the Container for display\&.
When \fBXmNlayoutType\fP is \fBXmOUTLINE\fP or \fBXmDETAIL\fP, items are
displayed in \fBXmNpositionIndex\fP order within \fBXmNentryParent\fP\&.
Items that
have an \fBXmNentryParent\fP resource are ignored when \fBXmNlayoutType\fP is
\fBXmSPATIAL\fP\&.
If \fBXmNpositionIndex\fP is not specified, it defaults to the
\fBXmNpositionIndex\fP value plus 1 of the item with the highest
\fBXmNpositionIndex\fP that has the same \fBXmNentryParent\fP if such
an item exists; otherwise, it defaults to 0\&.
.SS "Inherited Resources"
.PP
Container inherits behavior and resources from the
superclasses described in the following tables\&.
For a complete description of each resource, refer to the
reference page for that superclass\&.
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmManager Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNbottomShadowColorXmCBottomShadowColorPixeldynamicCSG
_____
XmNbottomShadowPixmapXmCBottomShadowPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNforegroundXmCForegroundPixeldynamicCSG
_____
XmNhelpCallbackXmCCallbackXtCallbackListNULLC
_____
XmNhighlightColorXmCHighlightColorPixeldynamicCSG
_____
XmNhighlightPixmapXmCHighlightPixmapPixmapdynamicCSG
_____
XmNinitialFocusXmCInitialFocusWidgetNULLCSG
_____
XmNlayoutDirectionXmCLayoutDirectionXmDirectiondynamicCG
_____
XmNnavigationTypeXmCNavigationTypeXmNavigationTypeXmTAB_GROUPCSG
_____
XmNpopupHandlerCallbackXmCCallbackXtCallbackListNULLC
_____
XmNshadowThicknessXmCShadowThicknessDimension0CSG
_____
XmNstringDirectionXmCStringDirectionXmStringDirectiondynamicCG
_____
XmNtopShadowColorXmCTopShadowColorPixeldynamicCSG
_____
XmNtopShadowPixmapXmCTopShadowPixmapPixmapdynamicCSG
_____
XmNtraversalOnXmCTraversalOnBooleanTrueCSG
_____
XmNunitTypeXmCUnitTypeunsigned chardynamicCSG
_____
XmNuserDataXmCUserDataXtPointerNULLCSG
_____
.TE
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBComposite Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNchildrenXmCReadOnlyWidgetListNULLG
_____
XmNinsertPositionXmCInsertPositionXtOrderProcNULLCSG
_____
XmNnumChildrenXmCReadOnlyCardinal0G
_____
.TE
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBCore Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNacceleratorsXmCAcceleratorsXtAcceleratorsdynamicCSG
_____
XmNancestorSensitiveXmCSensitiveBooleandynamicG
_____
XmNbackgroundXmCBackgroundPixeldynamicCSG
_____
XmNbackgroundPixmapXmCPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNborderColorXmCBorderColorPixelXtDefaultForegroundCSG
_____
XmNborderPixmapXmCPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNborderWidthXmCBorderWidthDimension0CSG
_____
XmNcolormapXmCColormapColormapdynamicCG
_____
XmNdepthXmCDepthintdynamicCG
_____
XmNdestroyCallbackXmCCallbackXtCallbackListNULLC
_____
XmNheightXmCHeightDimensiondynamicCSG
_____
XmNinitialResourcesPersistentXmCInitialResourcesPersistentBooleanTrueC
_____
XmNmappedWhenManagedXmCMappedWhenManagedBooleanTrueCSG
_____
XmNscreenXmCScreenScreen *dynamicCG
_____
XmNsensitiveXmCSensitiveBooleanTrueCSG
_____
XmNtranslationsXmCTranslationsXtTranslationsdynamicCSG
_____
XmNwidthXmCWidthDimensiondynamicCSG
_____
XmNxXmCPositionPosition0CSG
_____
XmNyXmCPositionPosition0CSG
_____
.TE
.SS "Callback Information"
.PP
A pointer to the following structure is passed to callbacks for
\fBXmNoutlineChangedCallback\fP\&.
.PP
.nf
typedef struct
{
        int \fIreason\fP;
        XEvent \fI* event\fP;
        Widget \fIitem\fP;
        unsigned char \fInew_outline_state\fP;
} XmContainerOutlineCallbackStruct;
.fi
.IP "\fIreason\fP" 10
Specifies the reason for the callback\&.
.IP "\fIevent\fP" 10
Points to the \fBXEvent\fP that triggered the callback\&. It can be NULL\&.
.IP "\fIitem\fP" 10
Specifies the container item affected by the event\&.
.IP "\fInew_outline_state\fP" 10
Specifies the next \fBXmNoutlineState\fP for \fIitem\fP\&. The user can
change this value in the callback\&.
.PP
A pointer to the following structure is passed to callbacks for
\fBXmNdefaultActionCallback\fP and \fBXmNselectionCallback\fP\&.
.PP
.nf
typedef struct
{
        int \fIreason\fP;
        XEvent \fI* event\fP;
        WidgetList \fIselected_items\fP;
        int \fIselected_item_count\fP;
        unsigned char \fIauto_selection_type\fP;
} XmContainerSelectCallbackStruct;
.fi
.IP "\fIreason\fP" 10
Specifies the reason for the callback\&. It corresponds to the
\fBXmNselectionPolicy\fP at the time the selection was made, or indicates
that the default action should be taken\&.
.IP "\fIevent\fP" 10
Points to the \fBXEvent\fP that triggered the callback\&. It can be NULL\&.
.IP "\fIselected_items\fP" 10
Specifies a list of items selected at the time of the \fIevent\fP that
caused the callback\&.
The \fIselected_items\fP field points to a temporary storage space
that is reused
after the callback is finished\&.
Therefore, if an application needs to save the selected list, it should
copy the list into its own data space\&.
.IP "\fIselected_item_count\fP" 10
Specifies the number of items in the \fIselected_items\fP list\&.
This number must be positive or 0 (zero)\&.
.IP "\fBauto_selection_type\fP" 10
Indicates the cause of the selection when \fBXmNautomaticSelection\fP is
\fBXmAUTO_SELECT\fP\&. Valid values are the following:
.RS
.IP "\fBXmAUTO_UNSET\fP" 10
Returned when \fBXmNautomaticSelection\fP is
\fBXmNO_AUTO_SELECT\fP\&.
.IP "\fBXmAUTO_BEGIN\fP" 10
Indicates the beginning of automatic selection\&.
.IP "\fBXmAUTO_MOTION\fP" 10
Indicates that there is a button drag selection\&.
.IP "\fBXmAUTO_CANCEL\fP" 10
Indicates that the new selection is canceled\&.
.IP "\fBXmAUTO_NO_CHANGE\fP" 10
Indicates that the currently selected item matches the initial item\&.
.IP "\fBXmAUTO_CHANGE\fP" 10
Indicates that the currently selected item does not match the initial item\&.
.RE
.PP
A pointer to the following structure is passed to the
\fBXmNconvertCallback\fP procedures:
.PP
.nf
typedef struct
{
        int \fIreason\fP;
        XEvent  *\fIevent\fP;
        Atom \fIselection\fP;
        Atom \fItarget\fP;
        XtPointer \fIsource_data\fP;
        XtPointer \fIlocation_data\fP;
        int \fIflags\fP;
        XtPointer \fIparm\fP;
        int \fIparm_format\fP;
        unsigned long \fIparm_length\fP;
        int \fIstatus\fP;
        XtPointer \fIvalue\fP;
        Atom \fItype\fP;
        int \fIformat\fP;
        unsigned long \fIlength\fP;
} XmConvertCallbackStruct;
.fi
.IP "\fIreason\fP" 10
Indicates why the callback was invoked\&.
.IP "\fIevent\fP" 10
Points to the \fBXEvent\fP that triggered the callback\&.
It can be NULL\&.
.IP "\fIselection\fP" 10
Indicates the selection for which conversion is being requested\&.
Possible values are \fBCLIPBOARD\fP, \fBPRIMARY\fP, \fBSECONDARY\fP,
and \fB_MOTIF_DROP\fP\&.
.IP "\fItarget\fP" 10
Indicates the conversion target\&.
.IP "\fIsource_data\fP" 10
Contains information about the selection source\&.
When the selection is \fB_MOTIF_DROP\fP, \fIsource_data\fP is the
DragContext\&.
Otherwise, it is NULL\&.
.IP "\fBlocation_data\fP" 10
Contains information about the location of data to be converted\&.
If the value is NULL, the data to be transferred consists of the
widget\&'s current selection\&.
Otherwise, it is the widget ID of the item being transferred, or the
widget ID of the Container if all items are being transferred\&.
.IP "\fIflags\fP" 10
Indicates the status of the conversion\&. Following are the possible
values:
.RS
.IP "\fBXmCONVERTING_NONE\fP" 10
This flag is currently unused\&.
.IP "\fBXmCONVERTING_PARTIAL\fP" 10
The target widget was able to be converted, but some data was lost\&.
.IP "\fBXmCONVERTING_SAME\fP" 10
The conversion target is the source of the data to be transferred\&.
.IP "\fBXmCONVERTING_TRANSACT\fP" 10
This flag is currently unused\&.
.RE
.IP "\fIparm\fP" 10
Contains parameter data for this target\&.
If no parameter data exists, the value is NULL\&.
.IP "" 10
When \fIselection\fP is \fBCLIPBOARD\fP and \fItarget\fP is
\fB_MOTIF_CLIPBOARD_TARGETS\fP or
\fB_MOTIF_DEFERRED_CLIPBOARD_TARGETS\fP, the value is the requested
operation (\fBXmCOPY\fP, \fBXmMOVE\fP, or \fBXmLINK\fP)\&.
.IP "\fIparm_format\fP" 10
Specifies whether the data in \fIparm\fP should be viewed
as a list of \fIchar\fP, \fIshort\fP, or \fIlong\fP quantities\&.
Possible values are 0 (when \fIparm\fP is NULL),
8 (when the data in \fIparm\fP should be viewed as a list of \fIchar\fPs),
16 (when the data in \fIparm\fP should be viewed as a list of \fIshort\fPs),
or 32 (when the data in \fIparm\fP should be viewed as a list of \fIlong\fPs)\&.
Note that \fIparm_format\fP symbolizes a data type, not the number of bits
in each list element\&.
For example, on some machines, a \fIparm_format\fP of 32 means that
the data in \fIparm\fP should be viewed as a list of 64-bit quantities,
not 32-bit quantities\&.
.IP "\fIparm_length\fP" 10
Specifies the number of elements of data in \fIparm\fP, where each
element has the size specified by \fIparm_format\fP\&.
When \fIparm\fP is NULL, the value is 0\&.
.IP "\fIstatus\fP" 10
An IN/OUT member that specifies the status of the conversion\&.
The initial value is \fBXmCONVERT_DEFAULT\fP\&.
The callback procedure can set this member to one of the following
values:
.RS
.IP "\fBXmCONVERT_DEFAULT\fP" 10
The widget class conversion procedure, if any, is
called after the callback procedures return\&.
If the widget class conversion procedure produces any data, it
overwrites the data provided by the callback procedures in the \fIvalue\fP
member\&.
.IP "\fBXmCONVERT_MERGE\fP" 10
The widget class conversion procedure, if any, is
called after the callback procedures return\&.
If the widget class conversion procedure produces any data, it appends
its data to the data provided by the callback procedures in the
\fIvalue\fP member\&.
This value is intended for use with targets that result in lists of
data, such as \fBTARGETS\fP\&.
.IP "\fBXmCONVERT_DONE\fP" 10
The callback procedure has successfully finished
the conversion\&.
The widget class conversion procedure, if any, is not called after the
callback procedures return\&.
.IP "\fBXmCONVERT_REFUSE\fP" 10
The callback procedure has terminated the
conversion process without completing the requested conversion\&.
The widget class conversion procedure, if any, is not called after the
callback procedures return\&.
.RE
.IP "\fIvalue\fP" 10
An IN/OUT parameter that contains any data that the callback procedure
produces as a result of the conversion\&.
The initial value is NULL\&.
If the callback procedure sets this member, it must ensure that the
\fItype\fP, \fIformat\fP, and \fIlength\fP members correspond
to the data in \fIvalue\fP\&.
The callback procedure is responsible for allocating, but not for
freeing, memory when it sets this member\&.
.IP "\fItype\fP" 10
An IN/OUT parameter that indicates the type of the data in the
\fIvalue\fP member\&.
The initial value is \fBINTEGER\fP\&.
.IP "\fIformat\fP" 10
An IN/OUT parameter that specifies whether the data in \fIvalue\fP should
be viewed as a list of \fIchar\fP, \fIshort\fP, or \fIlong\fP quantities\&.
The initial value is 8\&.
The callback procedure can set this member to 8 (for a list of \fIchar\fP),
16 (for a list of \fIshort\fP), or 32 (for a list of \fIlong\fP)\&.
.IP "\fIlength\fP" 10
An IN/OUT member that specifies the number of elements of data in
\fIvalue\fP, where each element has the size symbolized by \fIformat\fP\&.
The initial value is 0 (zero)\&.
.PP
A pointer to the following callback structure is passed to the
\fBXmNdestinationCallback\fP procedures:
.PP
.nf
typedef struct
{
        int \fIreason\fP;
        XEvent  *\fIevent\fP;
        Atom \fIselection\fP;
        XtEnum \fIoperation\fP;
        int \fIflags\fP;
        XtPointer \fItransfer_id\fP;
        XtPointer \fIdestination_data\fP;
        XtPointer \fIlocation_data\fP;
        Time \fItime\fP;
} XmDestinationCallbackStruct;
.fi
.IP "\fIreason\fP" 10
Indicates why the callback was invoked\&.
.IP "\fIevent\fP" 10
Points to the \fBXEvent\fP that triggered the callback\&.
It can be NULL\&.
.IP "\fIselection\fP" 10
Indicates the selection for which data transfer is being requested\&.
Possible values are \fBCLIPBOARD\fP, \fBPRIMARY\fP, \fBSECONDARY\fP, and
\fB_MOTIF_DROP\fP\&.
.IP "\fIoperation\fP" 10
Indicates the type of transfer operation requested\&.
.RS
.IP "   \(bu" 6
When the selection is \fBPRIMARY\fP, possible values are \fBXmMOVE\fP,
\fBXmCOPY\fP, and \fBXmLINK\fP\&.
.IP "   \(bu" 6
When the selection is \fBSECONDARY\fP or \fBCLIPBOARD\fP, possible
values are \fBXmCOPY\fP and \fBXmLINK\fP\&.
.IP "   \(bu" 6
When the selection is \fB_MOTIF_DROP\fP, possible values are
\fBXmMOVE\fP, \fBXmCOPY\fP, \fBXmLINK\fP, and \fBXmOTHER\fP\&.
A value of \fBXmOTHER\fP means that the callback procedure must get
further information from the \fBXmDropProcCallbackStruct\fR in the
\fIdestination_data\fP member\&.
.RE
.IP "\fIflags\fP" 10
Indicates whether or not the destination widget is also the source of
the data to be transferred\&.
Following are the possible values:
.RS
.IP "\fBXmCONVERTING_NONE\fP" 10
The destination widget is not the source of the data to be transferred\&.
.IP "\fBXmCONVERTING_SAME\fP" 10
The destination widget is the source of the data to be transferred\&.
.RE
.IP "\fBtransfer_id\fP" 10
Serves as a unique ID to identify the transfer transaction\&.
.IP "\fIdestination_data\fP" 10
Contains information about the destination\&.
When the selection is \fB_MOTIF_DROP\fP, the callback procedures are
called by the drop site\&'s \fBXmNdropProc\fP, and \fIdestination_data\fP
is a pointer to the \fBXmDropProcCallbackStruct\fR passed to the
\fBXmNdropProc\fP procedure\&.
When the selection is \fBSECONDARY\fP, \fIdestination_data\fP is an Atom
representing a target recommmended by the selection owner for use in
converting the selection\&.
Otherwise, \fIdestination_data\fP is NULL\&.
.IP "\fBlocation_data\fP" 10
Contains information about the location where data is to be transferred\&.
The value is always NULL when the selection is \fBSECONDARY\fP or
\fBCLIPBOARD\fP\&.
If the value is NULL, the data is to be inserted at the widget\&'s cursor
position\&.
Otherwise, the value is a pointer to an \fBXPoint\fP structure
containing the x and y coordinates at the location where the data is to
be transferred\&.
Once \fBXmTransferDone\fP procedures start to be called,
\fBlocation_data\fP will no longer be stable\&.
.IP "\fItime\fP" 10
Indicates the time when the transfer operation began\&.
.SS "Translations"
.PP
The \fBXmContainer\fP translations are listed below\&.
.PP
The following key names are listed in the
X standard key event translation table syntax\&.
This format is the one used by Motif to
specify the widget actions corresponding to a given key\&.
A brief overview of the format is provided under
\fBVirtualBindings\fP(3)\&.
For a complete description of the format, please refer to the
X Toolkit Instrinsics Documentation\&.
.IP "\fB\(apc \(aps \(apm \(apa\fP \fB<Btn1Down>\fP:" 10
ContainerBeginSelect()
.IP "\fB<Btn1Motion>\fP:" 10
ContainerButtonMotion()
.IP "\fB\(apc \(aps \(apm \(apa\fP \fB<Btn1Up>\fP:" 10
ContainerEndSelect()
.IP "\fBc \(aps \(apm \(apa\fP \fB<Btn1Down>\fP:" 10
ContainerBeginToggle()
.IP "\fBc \(aps \(apm \(apa\fP \fB<Btn1Up>\fP:" 10
ContainerEndToggle()
.IP "\fB\(apc s \(apm \(apa\fP \fB<Btn1Down>\fP:" 10
ContainerBeginExtend()
.IP "\fB\(apc s \(apm \(apa\fP \fB<Btn1Up>\fP:" 10
ContainerEndExtend()
.IP "\fBc s \(apm \(apa\fP \fB<Btn1Down>\fP:" 10
ContainerBeginExtend()
.IP "\fBc s \(apm \(apa\fP \fB<Btn1Up>\fP:" 10
ContainerEndExtend()
.IP "\fB\(apc \(aps \(apm \(apa\fP \fB<Btn2Down>\fP:" 10
ContainerStartTransfer(\fBCopy\fP)
.IP "\fBc s \(apm \(apa\fP \fB<Btn2Down>\fP:" 10
ContainerStartTransfer(\fBLink\fP)
.IP "\fB\(apc s \(apm \(apa\fP \fB<Btn2Down>\fP:" 10
ContainerStartTransfer(\fBMove\fP)
.IP "\fB\(apm \(apa\fP \fB<Btn2Up>\fP:" 10
ContainerEndTransfer()
.IP "\fB:c s a\fP \fB<Key>\fP\fB<osfInsert>\fP:" 10
ContainerPrimaryLink()
.IP "\fB:c s m\fP \fB<Key>\fP\fB<osfInsert>\fP:" 10
ContainerPrimaryLink()
.IP "\fB:a\fP \fB<Key>\fP\fB<osfInsert>\fP:" 10
ContainerPrimaryCopy()
.IP "\fB:m\fP \fB<Key>\fP\fB<osfInsert>\fP:" 10
ContainerPrimaryCopy()
.IP "\fB:s a\fP \fB<Key>\fP\fB<osfDelete>\fP:" 10
ContainerPrimaryMove()
.IP "\fB:s m\fP \fB<Key>\fP\fB<osfDelete>\fP:" 10
ContainerPrimaryMove()
.IP "\fB:\fP\fB<Key>\fP\fB<osfCancel>\fP:" 10
ContainerCancel()
.IP "\fB:s\fP \fB<Key>\fP\fB<osfSelect>\fP:" 10
ContainerExtend()
.IP "\fB:\fP\fB<Key>\fP\fB<osfSelect>\fP:" 10
ContainerSelect()
.IP "\fB:\fP\fB<Key>\fP\fB<osfSelectAll>\fP:" 10
ContainerSelectAll()
.IP "\fB:\fP\fB<Key>\fP\fB<osfDeselectAll>\fP:" 10
ContainerDeselectAll()
.IP "\fB:\fP\fB<Key>\fP\fB<osfAddMode>\fP:" 10
ContainerToggleMode()
.IP "\fB:\fP\fB<Key>\fP\fB<osfActivate>\fP:" 10
ContainerActivate()
.IP "\fBs \(apc \(apm \(apa\fP \fB<Key>\fP\fBspace\fP:" 10
ContainerExtend()
.IP "\fB\(aps \(apc \(apm \(apa\fP \fB<Key>\fP\fBspace\fP:" 10
ContainerSelect()
.IP "\fB\(aps \(apc \(apm \(apa\fP \fB<Key>\fP\fBReturn\fP:" 10
ContainerActivate()
.IP "\fB\(aps c \(apm \(apa\fP \fB<Key>\fP\fBslash\fP:" 10
ContainerSelectAll()
.IP "\fB\(aps c \(apm \(apa\fP \fB<Key>\fP\fBbackslash\fP:" 10
ContainerDeselectAll()
.IP "\fB:c s\fP \fB<Key>\fP\fB<osfBeginLine>\fP:" 10
ContainerExtendCursor(\fBFirst\fP)
.IP "\fB:c s\fP \fB<Key>\fP\fB<osfEndLine>\fP:" 10
ContainerExtendCursor(\fBLast\fP)
.IP "\fB:c\fP \fB<Key>\fP\fB<osfBeginLine>\fP:" 10
ContainerMoveCursor(\fBFirst\fP)
.IP "\fB:c\fP \fB<Key>\fP\fB<osfEndLine>\fP:" 10
ContainerMoveCursor(\fBLast\fP)
.IP "\fB:c\fP \fB<Key>\fP\fB<osfLeft>\fP:" 10
ContainerExpandOrCollapse(\fBLeft\fP)
.IP "\fB:c\fP \fB<Key>\fP\fB<osfRight>\fP:" 10
ContainerExpandOrCollapse(\fBRight\fP)
.IP "\fB:s\fP \fB<Key>\fP\fB<osfUp>\fP:" 10
ContainerExtendCursor(\fBUp\fP)
.IP "\fB:s\fP \fB<Key>\fP\fB<osfDown>\fP:" 10
ContainerExtendCursor(\fBDown\fP)
.IP "\fB:s\fP \fB<Key>\fP\fB<osfLeft>\fP:" 10
ContainerExtendCursor(\fBLeft\fP)
.IP "\fB:s\fP \fB<Key>\fP\fB<osfRight>\fP:" 10
ContainerExtendCursor(\fBRight\fP)
.IP "\fB:\fP\fB<Key>\fP\fB<osfUp>\fP:" 10
ContainerMoveCursor(\fBUp\fP)
.IP "\fB:\fP\fB<Key>\fP\fB<osfDown>\fP:" 10
ContainerMoveCursor(\fBDown\fP)
.IP "\fB:\fP\fB<Key>\fP\fB<osfLeft>\fP:" 10
ContainerMoveCursor(\fBLeft\fP)
.IP "\fB:\fP\fB<Key>\fP\fB<osfRight>\fP:" 10
ContainerMoveCursor(\fBRight\fP)
.IP "\fBs \(apm \(apa\fP \fB<Key>\fP\fBTab\fP:" 10
ManagerGadgetPrevTabGroup()
.IP "\fB\(aps \(apm \(apa\fP \fB<Key>\fP\fBTab\fP:" 10
ManagerGadgetNextTabGroup()
.PP
The Container button event translations are modified when Display\&'s
\fBXmNenableBtn1Transfer\fP resource does not have a value of
\fBXmOFF\fP (in other words, it is either \fBXmBUTTON2_TRANSFER\fP or
\fBXmBUTTON2_ADJUST\fP)\&. This
option allows the
actions for selection and transfer to be integrated on \fB<Btn1>\fP, and
the actions for extending the selection can be bound to
\fB<Btn2>\fP\&. The actions for \fB<Btn1>\fP that are defined in the
preceding list
still apply when the \fB<Btn1>\fP event occurs over text that is not
selected\&. The following actions apply when the \fB<Btn1>\fP event
occurs over text that is selected:
.IP "\fB~c ~s ~m ~a\fP \fB<Btn1Down>\fP\fB:\fP" 10
ContainerHandleBtn1Down(\fBContainerBeginSelect,Copy\fP)
.IP "\fBc ~s ~m ~a <Btn1Down>:\fP" 10
ContainerHandleBtn1Down(\fBContainerBeginToggle,Copy\fP)
.IP "\fBc s ~m ~a <Btn1Down>:\fP" 10
ContainerHandleBtn1Down(\fBContainerNoop,Link\fP)
.IP "\fB~c s ~m ~a <Btn1Down>:\fP" 10
ContainerHandleBtn1Down(\fBContainerBeginExtend,Move\fP)
.IP "\fB<Btn1Motion>\fP\fB:\fP" 10
ContainerHandleBtn1Motion(\fBContainerButtonMotion\fP)
.IP "\fB~c ~s ~m ~a <Btn1Up>:\fP" 10
ContainerHandleBtn1Up(\fBContainerEndSelect\fP)
.IP "\fBc ~s ~m ~a <Btn1Up>:\fP" 10
ContainerHandleBtn1Up(\fBContainerEndToggle\fP)
.IP "\fB~c s ~m ~a <Btn1Up>:\fP" 10
ContainerHandleBtn1Up(\fBContainerEndExtend\fP)
.IP "\fBc s ~m ~a <Btn1Down>:\fP" 10
ContainerHandleBtn1Down(\fBContainerBeginExtend\fP)
.IP "\fBc s ~m ~a <Btn1Up>:\fP" 10
ContainerHandleBtn1Up(\fBContainerEndExtend\fP)
.PP
When Display\&'s \fBXmNenableBtn1Transfer\fP resource has a value of
\fBXmBUTTON2_ADJUST\fP, the following actions apply:
.IP "\fB~c ~s ~m ~a <Btn2Down>:\fP" 10
ContainerHandleBtn2Down(\fBContainerStartTransfer,Copy\fP)
.IP "\fBc s ~m ~a <Btn2Down>:\fP" 10
ContainerHandleBtn2Down(\fBContainerStartTransfer,Link\fP)
.IP "\fB~c s ~m ~a <Btn2Down>:\fP" 10
ContainerHandleBtn2Down(\fBContainerStartTransfer,Move\fP)
.IP "\fB<Btn2Motion>\fP\fB:\fP" 10
ContainerHandleBtn2Motion(\fBContainerButtonMotion\fP)
.IP "\fB~m ~a <Btn2Up>:\fP" 10
ContainerHandleBtn2Up(\fBContainerEndTransfer\fP)
.SS "Action Routines"
.PP
The Container action routines are described below\&.
The current selections are always shown
with the background color specified by the \fBXmNselectColor\fP resource\&.
.IP "ContainerActivate():" 10
This action calls \fBXmNdefaultActionCallback\fP
with reason \fBXmCR_DEFAULT_ACTION\fP\&.
.IP "ContainerBeginExtend():" 10
Simply returns if \fBXmNselectionPolicy\fP is \fBXmSINGLE_SELECT\fP or
\fBXmBROWSE_SELECT\fP\&.
Simply returns if \fBXmNlayoutType\fP is \fBXmSPATIAL\fP\&.
.IP "" 10
Otherwise, this action sets the selection state of all items between
the anchor item and the item under the pointer to
the selection state of the anchor item\&.
The location cursor is moved to the item under the pointer\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP, the
\fBXmNselectionCallback\fP(s) is called with either \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP as the reason depending on
\fBXmNselectionPolicy\fP, and with \fBauto_selection_type\fP
\fBXmAUTO_CHANGE\fP\&.
.IP "ContainerBeginSelect():" 10
If this is a second ContainerBeginSelect() action that has occurred
within the time specified by the display\&'s multiclick time, this action calls
\fBXmNdefaultActionCallback\fP with reason
\fBXmCR_DEFAULT_ACTION\fP and returns\&.
.IP "" 10
Otherwise, processing depends on the value of \fBXmNselectionPolicy\fP
as follows:
.RS
.IP "\fBXmSINGLE_SELECT\fP" 10
This action deselects all items and toggles the item (if any) under the pointer\&.
.IP "\fBXmBROWSE_SELECT\fP" 10
This action deselects all items and toggles the item (if any) under the pointer\&.
This item is now the anchor item for further selection\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any
item\&'s selection state is made, the
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_BROWSE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_BEGIN\fP\&.
.IP "\fBXmMULTIPLE_SELECT\fP" 10
If the pointer is over an item and \fBXmNselectionTechnique\fP is not
\fBXmMARQUEE\fP, this action toggles the selection state of that item\&.
The item becomes the anchor item for further selection\&.
If \fBXmNselectionTechnique\fP is \fBXmMARQUEE\fP, \fBXmMARQUEE_EXTEND_START\fP,
or \fBXmMARQUEE_EXTEND_BOTH\fP, this action sets the start point for the
Marquee rectangle\&.
If \fBXmNselectionTechnique\fP is \fBXmMARQUEE_EXTEND_START\fP or
\fBXmMARQUEE_EXTEND_BOTH\fP and the pointer is over an item, this action
draws the Marquee rectangle around the item\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP, the
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_MULTIPLE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_BEGIN\fP\&.
.IP "\fBXmEXTENDED_SELECT\fP" 10
All items are first deselected\&. Processing is then identical to the
case where \fBXmNselectionPolicy\fP is \fBXmMULTIPLE_SELECT\fP, except that
\fBXmCR_EXTENDED_SELECT\fP is the callback reason given if
\fBXmNselectionCallback\fP is called\&.
.RE
.IP "ContainerBeginToggle():" 10
Simply returns if \fBXmNselectionPolicy\fP is \fBXmSINGLE_SELECT\fP or
\fBXmBROWSE_SELECT\fP\&.
.IP "" 10
Otherwise, if the pointer is over an item and \fBXmNselectionTechnique\fP is not
\fBXmMARQUEE\fP, this action toggles the selection state of that item\&.
The item becomes the anchor item for further selection\&.
If \fBXmNselectionTechnique\fP is \fBXmMARQUEE\fP, \fBXmMARQUEE_EXTEND_START\fP,
or \fBXmMARQUEE_EXTEND_BOTH\fP
this action sets the start point for the
Marquee rectangle\&.
If \fBXmNselectionTechnique\fP is \fBXmMARQUEE_EXTEND_START\fP or
\fBXmMARQUEE_EXTEND_BOTH\fP and the pointer is over an item, this action
draws the Marquee rectangle around the item\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP, the
\fBXmNselectionCallback\fP(s) is called with either \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP as the reason, depending on
\fBXmNselectionPolicy\fP, and with \fBauto_selection_type\fP \fBXmAUTO_BEGIN\fP\&.
.IP "ContainerButtonMotion():" 10
Processing depends on the value of \fBXmNselectionPolicy\fP, as follows:
.RS
.IP "\fBXmSINGLE_SELECT\fP" 10
This action simply returns to the caller\&.
.IP "\fBXmBROWSE_SELECT\fP" 10
Simply returns if this action follows a ContainerBeginExtend()
action or ContainerBeginToggle() action\&.
.IP "" 10
If the pointer is no longer over the current anchor item, this action
toggles the current anchor item and then toggles the item under the pointer
(if any) and makes it the new anchor item for further processing\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any item\&'s
selection state is made, the
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_BROWSE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_MOTION\fP\&.
.IP "\fBXmMULTIPLE_SELECT\fP" 10
If a previous action has set a Marquee rectangle start point,
this action draws the Marquee rectangle
between the current pointer position and the Marquee start point\&. If the
\fBXmNselectionTechnique\fP is \fBXmMARQUEE_EXTEND_BOTH\fP and the pointer is
over an item, the end point of the Marquee rectangle is extended to include
the item\&. The selection states of all items within the Marquee rectangle are
toggled to match the state of the anchor item\&.
.IP "" 10
If no Marquee rectangle start point is set and the pointer is over an
item, processing depends on the \fBXmNlayoutType\fP resource\&.
The anchor item from the previous action is used\&. If
\fBXmNlayoutType\fP is \fBXmSPATIAL\fP,
the selection state of the item
under the pointer is toggled to match the selection state of the anchor item\&.
If \fBXmNlayoutType\fP is \fBXmOUTLINE\fP or
\fBXmDETAIL\fP, the selection state of all items between the anchor item
and the item under the pointer are toggled to match the selection state of
the anchor item\&.
.IP "" 10
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any
item\&'s selection state is made, the
\fBXmNselectionCallback\fP(s) is called with reason \fBXmCR_MULTIPLE_SELECT\fP
and \fBauto_selection_type\fP \fBXmAUTO_MOTION\fP\&.
.IP "\fBXmEXTENDED_SELECT\fP" 10
Processing is identical to the
case where \fBXmNselectionPolicy\fP is \fBXmMULTIPLE_SELECT\fP, except that
\fBXmCR_EXTENDED_SELECT\fP is the callback reason given if
\fBXmNselectionCallback\fP is called\&.
.RE
.IP "ContainerCancel():" 10
If a selection is in progress, this action
restores selection states of all items
to their state before the selection began\&.
If \fBXmNautomaticSelection\fP is True and a change in any item\&'s
selection state is made, the
\fBXmNselectionCallback\fP is called with reason
\fBXmCR_BROWSE_SELECT\fP, \fBXmMULTIPLE_SELECT\fP,
or \fBXmCR_EXTENDED_SELECT\fP
depending on the
\fBXmNselectionPolicy\fP resource and \fBauto_selection_type\fP
\fBXmAUTO_CANCEL\fP\&.
.IP "ContainerDeselectAll():" 10
This action deselects all items and calls \fBXmNselectionCallback\fP with
reason depending on \fBXmNselectionPolicy\fP\&.
.IP "ContainerEndExtend():" 10
Simply returns if \fBXmNselectionPolicy\fP is \fBXmSINGLE_SELECT\fP or
\fBXmBROWSE_SELECT\fP\&.
Simply returns if \fBXmNlayoutType\fP is \fBXmSPATIAL\fP\&.
.IP "" 10
Otherwise,
if \fBXmNautomaticSelection\fP is \fBXmNO_AUTO_SELECT\fP,
\fBXmNselectionCallback\fP(s) is called with either \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP as the reason depending on
\fBXmNselectionPolicy\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and no change
is made in any item\&'s selection state by this action,
\fBXmNselectionCallback\fP(s)
is called with either \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP as the reason depending on
\fBXmNselectionPolicy\fP and
\fBauto_selection_type\fP \fBXmAUTO_CHANGE\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and this action makes no
change in any item\&'s selection state,
\fBXmNselectionCallback\fP(s)
is called with either \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP as the reason depending on
\fBXmNselectionPolicy\fP and
\fBauto_selection_type\fP \fBXmAUTO_NO_CHANGE\fP\&.
.IP "ContainerEndSelect():" 10
Processing depends on the value of \fBXmNselectionPolicy\fP, as follows:
.RS
.IP "\fBXmSINGLE_SELECT\fP" 10
This action calls \fBXmNselectionCallback\fP
with reason \fBXmCR_SINGLE_SELECT\fP\&.
.IP "\fBXmBROWSE_SELECT\fP" 10
If the pointer is no longer over the current anchor item, this action
toggles the current anchor item and then toggles the item under the pointer
(if any)\&. If \fBXmNautomaticSelection\fP is \fBXmNO_AUTO_SELECT\fP,
the
\fBXmNselectionCallback\fP(s) is called with reason \fBXmCR_BROWSE_SELECT\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any item\&'s
selection state is made,
\fBXmNselectionCallback\fP(s) is called with reason \fBXmCR_BROWSE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_CHANGE\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and no change
is made in any item\&'s selection state by this action,
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_BROWSE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_NO_CHANGE\fP\&.
.IP "\fBXmMULTIPLE_SELECT\fP" 10
This action first
performs the same processing as the ContainerButtonMotion()
action, except that \fBXmNselectionCallback\fP is not called\&.
If \fBXmNautomaticSelection\fP is \fBXmNO_AUTO_SELECT\fP, the
\fBXmNselectionCallback\fP(s) is called with reason \fBXmCR_MULTIPLE_SELECT\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any item\&'s
selection state is made, the
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_MULTIPLE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_CHANGE\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and this action makes no
change in any item\&'s selection state,
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_MULTIPLE_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_NO_CHANGE\fP\&.
.IP "\fBXmEXTENDED_SELECT\fP" 10
This action first
performs the same processing as the ContainerButtonMotion()
action, except that \fBXmNselectionCallback\fP is not called\&.
If \fBXmNautomaticSelection\fP is \fBXmNO_AUTO_SELECT\fP, the
\fBXmNselectionCallback\fP(s) is called with reason \fBXmCR_EXTENDED_SELECT\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and a change in any item\&'s
selection state is made,
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_EXTENDED_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_CHANGE\fP\&.
If \fBXmNautomaticSelection\fP is \fBXmAUTO_SELECT\fP and this action makes
no change in any item\&'s selection state,
\fBXmNselectionCallback\fP(s)
is called with reason \fBXmCR_EXTENDED_SELECT\fP and
\fBauto_selection_type\fP \fBXmAUTO_NO_CHANGE\fP\&.
.RE
.IP "ContainerEndToggle():" 10
Simply returns if \fBXmNselectionPolicy\fP is \fBXmSINGLE_SELECT\fP or
\fBXmBROWSE_SELECT\fP\&.
If \fBXmNselectionPolicy\fP is \fBXmMULTIPLE_SELECT\fP or
\fBXmEXTENDED_SELECT\fP, this action performs the same processing as the
ContainerEndSelect() action\&.
.IP "ContainerEndTransfer()::" 10
If the elapsed time since a ContainerStartTransfer()
action has occurred exceeds the time
span specified by the display\&'s multiclick time, this action returns\&.
.IP "" 10
Otherwise, the ContainerPrimaryCopy(), ContainerPrimaryLink(), or
ContainerPrimaryMove() action is invoked, depending on the value
of the operation parameter saved by
ContainerStartTransfer()\&.
.IP "ContainerExpandOrCollapse(\fBLeft|Right|Collapse|Expand\fP):" 10
This action changes the value of the \fBXmNoutlineState\fP of the
current focus widget\&. If the argument value is \fBCollapse\fP or
\fBLeft\fP, the \fBXmNoutlineState\fP resource value is set to
\fBXmCOLLAPSED\fP\&. If the argument value is \fBExpand\fP
or \fBRight\fP, the \fBXmNoutlineState\fP resource value is set to
\fBXmEXPANDED\fP\&.
.IP "" 10
If the argument is \fBLeft\fP or \fBRight\fP and the layout is right to
left, then the setting of the \fBXmNoutlineState\fP value is reversed
from that described in the preceding paragraph\&.
.IP "" 10
Simply returns if \fBXmNlayoutType\fP is \fBXmSPATIAL\fP\&.
.IP "ContainerExtend():" 10
Processing depends on the value of \fBXmNselectionPolicy\fP, as follows:
.IP "" 10
If the selection policy is \fBXmSINGLE_SELECT\fP or \fBXmBROWSE_SELECT\fP,
this action returns\&.
If \fBXmNlayoutType\fP is \fBXmSPATIAL\fP, this action returns\&.
.IP "" 10
If the selection policy is \fBXmMULTIPLE_SELECT\fP,
this action sets the selection state
of all items between the anchor item and the location cursor to
the selection state of the anchor item\&.
.IP "" 10
If the selection policy is \fBXmEXTENDED_SELECT\fP and the
Container is in Normal Mode, this action deselects all items and selects
all items between the anchor item and the location cursor\&.
If the selection policy is
\fBXmEXTENDED_SELECT\fP and the Container is in Add Mode, this action
sets the selection state
of all items between the anchor item and the location cursor to
the selection state of the anchor item\&.
.IP "" 10
\fBXmNselectionCallback\fP is called with reason \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP depending on
\fBXmNselectionPolicy\fP\&.
.IP "ContainerExtendCursor(\fBLeft|Right|Up|Down\fP):" 10
Processing depends on the value of \fBXmNselectionPolicy\fP, as follows:
.IP "" 10
If the selection policy is \fBXmSINGLE_SELECT\fP or \fBXmBROWSE_SELECT\fP,
this action returns\&.
If \fBXmNlayoutType\fP is \fBXmSPATIAL\fP, this action returns\&.
.IP "" 10
This action
moves the location cursor one item in the indicated direction, if possible\&.
If the value of the argument string is \fBFirst\fP or \fBLast\fP, this action
moves the location cursor to the indicated item\&. For other values of the
argument string, the location cursor is not affected\&.
.IP "" 10
If the selection policy is \fBXmMULTIPLE_SELECT\fP,
this action sets the selection state
of all items between the anchor item and the location cursor to
the selection state of the anchor item\&.
.IP "" 10
If the selection policy is \fBXmEXTENDED_SELECT\fP and the
Container is in Normal Mode, this action deselects all items and selects
all items between the anchor item and the location cursor\&.
If the selection policy is
\fBXmEXTENDED_SELECT\fP and the Container is in Add Mode, this action
sets the selection state
of all items between the anchor item and the location cursor to
the selection state of the anchor item\&.
.IP "" 10
\fBXmNselectionCallback\fP is called with reason \fBXmCR_MULTIPLE_SELECT\fP
or \fBXmCR_EXTENDED_SELECT\fP depending on
\fBXmNselectionPolicy\fP\&.
.IP "ContainerHandleBtn1Down(\fIstring\fP\fB)\fP" 10
When Display\&'s \fBXmNenableBtn1Transfer\fP resource is not \fBXmOFF\fP, the
actions for selection and transfer are integrated on \fB<Btn1>\fP\&.
If the pointer is over an unselected item or background, the item is
first selected before
the transfer is started\&. Otherwise, if the item is already selected, the
transfer is started\&.
The value of \fIstring\fP can be one of
the following actions:
.RS
.IP "   \(bu" 6
\fBContainerBeginSelect,Copy\fP
.IP "   \(bu" 6
\fBContainerBeginToggle,Copy\fP
.IP "   \(bu" 6
\fBContainerNoop,Link\fP
.IP "   \(bu" 6
\fBContainerBeginExtend,Move\fP
.RE
.IP "ContainerHandleBtn1Motion(\fIstring\fP\fB)\fP" 10
When Display\&'s \fBXmNenableBtn1Transfer\fP resource is not
\fBXmOFF\fP, the actions for selection
and transfer are integrated
on \fB<Btn1>\fP\&. When this action is invoked, and a selection is in
progress, a drag is performed\&. Otherwise,
the default
action as specified in \fIstring\fP is performed\&. The value of \fIstring\fP
can be \fBContainerButtonMotion\fP\&.
.IP "ContainerHandleBtn1Up(\fIstring\fP\fB)\fP" 10
If a Button 1 transfer was in progress, then when this action
is invoked, that
transfer is cancelled\&. Otherwise,
the default
action as specified in \fIstring\fP is performed\&. The value of \fIstring\fP
can be one of the following actions:
.RS
.IP "   \(bu" 6
\fBContainerEndSelect\fP
.IP "   \(bu" 6
\fBContainerEndToggle\fP
.IP "   \(bu" 6
\fBContainerEndExtend\fP
.RE
.IP "ContainerHandleBtn2Down(\fIstring\fP\fB)\fP" 10
When Display\&'s \fBXmNenableBtn1Transfer\fP resource has a value of
\fBXmBUTTON2_ADJUST\fP, the
actions for extending selection are bound on \fB<Btn2>\fP\&. Otherwise,
the action that is
performed depends on the value of \fIstring\fP, which can be one of
the following actions:
.RS
.IP "   \(bu" 6
\fBContainerStartTransfer,Copy\fP
.IP "   \(bu" 6
\fBContainerStartTransfer,Link\fP
.IP "   \(bu" 6
\fBContainerStartTransfer,Move\fP
.RE
.IP "ContainerHandleBtn2Motion(\fIstring\fP\fB)\fP" 10
When Display\&'s \fBXmNenableBtn1Transfer\fP resource is not
\fBXmBUTTON2_ADJUST\fP, and a selection is in
progress, a drag is performed\&.
Otherwise, the default action that is
performed depends on the value of \fIstring\fP, which can be
\fBContainerButtonMotion\fP\&.
.IP "ContainerHandleBtn2Up(\fIstring\fP\fB)\fP" 10
When Display\&'s \fBXmNenableBtn1Transfer\fP resource has a value of
\fBXmBUTTON2_ADJUST\fP, this action ends an extend\&. Otherwise, the action
that is performed depends on the value of \fIstring\fP, which can be
\fBContainerEndTransfer\fP\&.
.IP "ContainerMoveCursor(\fBLeft|Right|Up|Down|First|Last\fP):" 10
If the argument is \fBLeft\fP, \fBRight\fP, \fBUp\fP, or
\fBDown\fP, this action
moves the location cursor one item in the indicated direction, if possible\&.
If the value of the argument string is \fBFirst\fP or \fBLast\fP, this action
moves the location cursor to the indicated item\&. Any other arguments
are ignored\&.
.IP "" 10
If \fBXmNselectionPolicy\fP is \fBXmBROWSE_SELECT\fP,
or if \fBXmNselectionPolicy\fP is \fBXmEXTENDED_SELECT\fP and the
Container is in Normal Mode,
this action deselects all items, selects the item at the location cursor,
and calls \fBXmNselectionCallback\fP with the reason depending on
\fBXmNselectionPolicy\fP\&.
.IP "ContainerPrimaryCopy():" 10
This action requests that primary selection data be copied to the
Container\&.
This action calls the \fBXmNdestinationCallback\fP procedures for the
\fBPRIMARY\fP selection and the \fBXmCOPY\fP operation\&.
By default, the Container does not do any transfer, and copying the
selection is the responsibility of the \fBXmNdestinationCallback\fP
procedures\&.
.IP "ContainerPrimaryLink():" 10
This action requests that primary selection data be linked to the
Container\&.
This action calls the \fBXmNdestinationCallback\fP procedures for the
\fBPRIMARY\fP selection and the \fBXmLINK\fP operation\&.
By default, the Container does not do any transfer, and linking the
selection is the responsibility of the \fBXmNdestinationCallback\fP
procedures\&.
.IP "ContainerPrimaryMove():" 10
This action requests that primary selection data be copied to the
Container and deleted from the primary source\&.
This action calls the \fBXmNdestinationCallback\fP procedures for the
\fBPRIMARY\fP selection and the \fBXmMOVE\fP operation\&.
By default, the Container does not do any transfer, and moving the
selection is the responsibility of the \fBXmNdestinationCallback\fP
procedures\&.
If the transfer is successful, this action then calls the selection
owner\&'s \fBXmNconvertCallback\fP procedures for the \fBPRIMARY\fP
selection and the \fBDELETE\fP target\&.
.IP "ContainerSelect():" 10
Processing depends on the value of \fBXmNselectionPolicy\fP, as follows:
.IP "" 10
If the selection policy is \fBXmSINGLE_SELECT\fP or \fBXmBROWSE_SELECT\fP,
this action deselects all items and selects the item at the location cursor\&.
.IP "" 10
If the selection policy is \fBXmMULTIPLE_SELECT\fP, this action
toggles the selection state of the item at the location cursor\&.
This item becomes the anchor item for further selections\&.
.IP "" 10
If the selection policy is \fBXmEXTENDED_SELECT\fP and the
Container is in Normal Mode, this action deselects all items and selects
the item at the location cursor\&. If the selection policy is
\fBXmEXTENDED_SELECT\fP and the Container is in Add Mode, this action
toggles the selection state of the item at the location cursor\&.
The selected/toggled item becomes the anchor item for further selections\&.
.IP "" 10
\fBXmNselectionCallback\fP is called with the reason depending on
\fBXmNselectionPolicy\fP\&.
.IP "ContainerSelectAll():" 10
If \fBXmNselectionPolicy\fP is \fBXmSINGLE_SELECT\fP or \fBXmBROWSE_SELECT\fP,
this action deselects all items and selects the item at the location cursor
position\&.
.IP "" 10
If \fBXmNselectionPolicy\fP is \fBXmMULTIPLE_SELECT\fP
or \fBXmEXTENDED_SELECT\fP, this action selects all items\&.
.IP "" 10
\fBXmNselectionCallback\fP is called with the
reason depending on the value
of \fBXmNselectionCallback\fP\&.
.IP "ContainerStartTransfer(\fBCopy|Move|Link\fP):" 10
This action saves the event and the operation specified in the argument
string for use by subsequent actions\&.
If no ContainerEndTransfer() actions occur within the time
span specified by the display\&'s multiclick time and if \fBXmNlayoutType\fP
is \fBXmSPATIAL\fP, this action
creates a DragContext and starts a drag transfer by using \fIstring\fP to
specify the transfer operation\&. If no argument string is
specified, \fBCopy\fP is the default value\&.
.IP "" 10
Unless default drag and drop behavior has been overridden by a
\fBXmNconvertCallback\fP procedure,
if the drop operation occurs within the Container, then
the item(s) being dragged are relocated at the position of the
drop operation\&. If the item targeted by the Drag operation is
not in the selected state, then only that item is moved\&. If the item is
in the selected state, however, all items in the selected state are moved\&.
.IP "ContainerToggleMode():" 10
If \fBXmNselectionPolicy\fP is \fBXmEXTENDED_SELECT\fP, this action
toggles the Container
between Normal Mode and Add Mode\&.
.SS "Additional Behavior"
.PP
The Container widget has the following additional behavior:
.IP "\fB<Btn1Down>\fP\fB(2+)\fP" 10
If a button click is followed by another button click within the time
span specified by the display\&'s multiclick time, the Container interprets
that as a double-click and calls the
\fBXmNdefaultActionCallback\fP callbacks\&.
.IP "\fB<FocusIn>\fP:" 10
If the focus policy is explicit, sets the focus and draws
the location cursor\&.
.IP "\fB<FocusOut>\fP:" 10
If the focus policy is explicit, removes the focus and erases
the location cursor\&.
.SS "Virtual Bindings"
.PP
The bindings for virtual keys are vendor specific\&.
For information about bindings for virtual buttons and keys, see
\fBVirtualBindings\fP(3)\&.
.SH "RELATED"
.PP
\fBComposite\fP(3),
\fBConstraint\fP(3),
\fBCore\fP(3),
\fBXmContainerCopy\fP,
\fBXmContainerCopyLink\fP,
\fBXmContainerCut\fP,
\fBXmContainerGetItemChildren\fP,
\fBXmContainerPaste\fP,
\fBXmContainerPasteLink\fP,
\fBXmContainerRelayout\fP(3),
\fBXmContainerReorder\fP(3),
\fBXmCreateContainer\fP(3),
\fBXmCreateIconGadget\fP(3),
\fBXmIconGadget\fP(3), and
\fBXmManager\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
