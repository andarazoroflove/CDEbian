'\" t
...\" dtsrhili.sgm 1996
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "DtSearchHighlight" "library call"
.SH "NAME"
\fBDtSearchHighlight\fP \(em Generate DtSrHitwords table for highlighting DtSearch document
.SH "SYNOPSIS"
.PP
.nf
#include <Dt/Search\&.h>
\fBint\fBDtSearchHighlight\fP\fR(
\fBchar \fB*dbname\fR\fR,
\fBchar \fB*cleartext\fR\fR,
\fBDtSrHitword \fB**hitwptr\fR\fR,
\fBlong \fB*hitwcount\fR\fR,
\fBint \fBsearch_type\fR\fR,
\fBchar \fB*stems\fR\fR,
\fBint \fBstemcount\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The \fBDtSearchHighlight\fP function generates an array
of offsets and lengths (DtSrHitword) of parsed linguistic terms (stems) in
the passed document cleartext to enable a browser to highlight the words in
the text as appropriate for its user interface\&.
.SH "ARGUMENTS"
.IP "\fIdbname\fP" 10
Specifies which database is to be searched\&. It is any one of the database
name strings returned from \fBDtSearchInit\fP or \fBDtSearchReinit\fP\&. If \fIdbname\fP is NULL,
the first database name string is used\&.
.IP "\fIcleartext\fP" 10
Pointer to a zero terminated C string containing the document text to be
highlighted\&. Usually, but not necessarily, this value is returned from
\fBDtSearchRetrieve\fP\&.
.IP "\fIhitwptr\fP and \fIhitwcount\fP" 10
The hitwords array will be stored in \fIhitwptr\fP,
the address of a DtSrHitword pointer\&. The array is dynamically
allocated by this function and remains valid until the next call to this function\&.
The size of the hitwords array will be stored in \fIhitwcount\fP\&.
.IP "\fIsearch_type\fP" 10
Specifies the \fIsearch_type\fP of the
\fBDtSearchQuery\fP that generated the
\fIstems\fP array\&. It must be zero, \&'P\&', \&'W\&', or \&'S\&'\&.
If zero is passed, the \fIsearch_type\fP of
the last call to \fBDtSearchQuery\fP is assumed\&.
.IP "\fIstems\fP and \fIstemcount\fP" 10
\fIstems\fP and \fIstemcount\fP
are optional; they can be NULL and
zero respectively\&. However, if either is specified, both must be
specified\&. If specified, they refer to the \fIstems\fP
array that was returned from the previous
call to \fBDtSearchQuery\fP that ultimately resulted in
the \fIcleartext\fP argument\&.
.IP "" 10
If these arguments are not passed, the \fIstems\fP
array from the most recent call to
\fBDtSearchQuery\fP is assumed\&.
.SH "RETURN VALUE"
.PP
This function returns \fBDtSrOK\fP,
as well as a DtSrHitword table, when the table generation is completely
successful\&.
.PP
Any other return code signifies failure and user messages on the MessageList
explain why\&.
.PP
Any API function can also return
\fBDtSrREINIT\fP and
the return codes for fatal engine errors at any time\&.
.SH "SEE ALSO"
.PP
\fBDtSrAPI\fP(3),
\fBDtSearchQuery\fP(3),
\fBDtSearchRetrieve\fP(3)
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:40
