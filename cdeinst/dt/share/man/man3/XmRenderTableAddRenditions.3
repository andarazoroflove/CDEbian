'\" t
...\" RendTaB.sgm /main/11 1996/09/08 20:57:19 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmRenderTableAddRenditions" "library call"
.SH "NAME"
\fBXmRenderTableAddRenditions\fP \(em Creates a new render table
.iX "XmRenderTableAddRenditions"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
\fBXmRenderTable \fBXmRenderTableAddRenditions\fP\fR(
\fBXmRenderTable \fBoldtable\fR\fR,
\fBXmRendition \fB*renditions\fR\fR,
\fBCardinal \fBrendition_count\fR\fR,
\fBXmMergeMode \fBmerge_mode\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
\fBXmRenderTableAddRenditions\fP is a function to create a new render
table that
includes the renditions listed in \fIoldtable\fP, if there is one\&. This
function also copies
specified renditions (\fIrenditions\fP) to the new render table\&. The first
\fIrendition_count\fP renditions of the \fIrenditions\fP array are
added to the new table\&. If a rendition is tagged with a tag
that matches a tag already in \fIoldtable\fP, then the existing
rendition using that tag is either modified or freed and replaced with
the new rendition, depending on the value of \fImerge_mode\fP\&. If
\fIoldtable\fP is NULL,
\fBXmRenderTableAddRenditions\fP creates a new render table containing
only the specified renditions\&.
.PP
This function deallocates the original render table after extracting
the required information\&. It is the responsibility of the caller to
free the renditions of the \fIrenditions\fP array by calling the
\fBXmRenditionFree\fP function\&.
.IP "\fIoldtable\fP" 10
Specifies the render table to be added to\&.
.IP "\fIrenditions\fP" 10
Specifies an array of renditions to be added\&.
.IP "\fIrendition_count\fP" 10
Specifies the number of renditions from \fIrenditions\fP to be added\&.
.IP "\fImerge_mode\fP" 10
Specifies what to do if the \fBXmNtag\fP of a rendition matches that
of one that already exists in \fIoldtable\fP\&. The possible values
are as follows:
.RS
.IP "\fBXmMERGE_REPLACE\fP" 10
Completely replaces the old rendition with the new one\&.
.IP "\fBXmMERGE_OLD\fP" 10
Replaces any unspecified values of the old rendition with the
corresponding values from the new rendition\&.
.IP "\fBXmMERGE_NEW\fP" 10
Replaces the old rendition with the new rendition, replacing any
unspecified values of the new rendition with the corresponding values
from the old rendition\&.
.IP "\fBXmSKIP\fP" 10
Skips over the new rendition, leaving the old rendition intact\&.
.RE
.SH "RETURN"
.PP
If \fIrenditions\fP is NULL or \fIrendition_count\fP is 0 (zero), this
function returns \fIoldtable\fP\&.
Otherwise, the function returns a new \fBXmRenderTable\fR\&.
The function allocates space to hold this new render table\&.
The application is responsible for managing this allocated space\&.
The application can recover the allocated space by calling \fBXmRenderTableFree\fP\&.
.SH "RELATED"
.PP
\fBXmRendition\fP(3) and
\fBXmRenderTableFree\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
