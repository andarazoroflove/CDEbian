'\" t
...\" x_proces.sgm /main/5 1996/08/30 15:40:49 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "csa_x_process_updates" "library call"
.SH "NAME"
\fBcsa_x_process_updates\fP \(em invoke a calendar application\&'s calendar event handler
.SH "SYNOPSIS"
.PP
.nf
#include <csa/csa\&.h>
\fBvoid \fBcsa_x_process_updates\fP\fR(
\fBCSA_session_handle \fBcal\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The
\fBcsa_x_process_updates\fP function checks to see if there have been calendar updates
that are of interest to the client\&.
If there have been one
or more calendar updates, and the client previously
registered a callback handler using
\fBcsa_register_callback\fP(3) for updates of this type, the callback function is called by
\fBcsa_x_process_updates\fP\&.
.PP
The
\fIcal\fP argument specifies a calendar session handle\&.
The callback
function will be invoked only if there have been updates to
this calendar\&.
If
\fIcal\fP is set to
\fBNULL\fP, the callback function will be invoked if there have been
updates to any logged on calendars\&.
.SH "RETURN VALUE"
.PP
The
\fBcsa_x_process_updates\fP function returns no value\&.
.SH "APPLICATION USAGE"
.PP
The
\fBcsa_x_process_updates\fP function is useful for applications that maintain a
dynamic representation of calendar information, such as a
GUI calendar display\&.
Because the calendar server can
simultaneously maintain multiple read/write connections for
the same calendar, any data retrieved by a client should be
considered immediately out of date\&.
To create the
appearance of a dynamic display of calendar data, such an
application should call
\fBcsa_x_process_updates\fP as frequently as necessary from within its main event loop\&.
.PP
One way to do this is to have a timeout handler call
\fBcsa_x_process_updates\fP at regular intervals\&.
The duration of the timer should be
appropriate for the expected user environment\&.
This does
not eliminate the risk of the client holding outdated
information;
it merely gives the application control over
how old the information can get\&.
.SH "SEE ALSO"
.PP
\fBcsa/csa\&.h - csacsa\fP(5), \fBcsa_register_callback\fP(3)\&. 
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:40
