'\" t
...\" Label.sgm /main/9 1996/09/08 20:49:33 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmLabel" "library call"
.SH "NAME"
\fBXmLabel\fP \(em The Label widget class
.iX "XmLabel"
.iX "widget class" "Label"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Label\&.h>
.fi
.SH "DESCRIPTION"
.PP
Label is an instantiable widget and is also used as a superclass for
other button widgets, such as PushButton and ToggleButton\&. The Label
widget does not accept any button or key input, and the help
callback is the only callback defined\&. Label also receives enter
and leave events\&.
.PP
Label can contain either text or a pixmap\&. Label text is a
compound string\&. Refer to the \fIMotif Programmer\&'s Guide\fP
for more information on compound strings\&.
The text can be multilingual,
multiline, and/or multifont\&. When a Label is insensitive, its text is
stippled, or the user-supplied insensitive pixmap is displayed\&.
.PP
Label supports both accelerators and mnemonics primarily for use in
Label subclass widgets that are contained in menus\&.
Mnemonics are available in a menu system when the button is visible\&.
Accelerators in a menu system are accessible even when the button is not
visible\&.
The Label widget displays the mnemonic by underlining the first matching
character in the text string\&.
The accelerator is displayed
as a text string adjacent to the label text or pixmap, depending on
the layout direction\&.
.PP
Label consists of many margin fields surrounding the text or pixmap\&.
These margin fields are resources that may
be set by the user, but Label subclasses and Manager parents also
modify some of these fields\&. They tend to modify the
\fBXmNmarginLeft\fP, \fBXmNmarginRight\fP, \fBXmNmarginTop\fP, and
\fBXmNmarginBottom\fP resources and leave the \fBXmNmarginWidth\fP and
\fBXmNmarginHeight\fP resources as set by the application\&.
.PP
Label takes into account \fBXmNshadowThickness\fP in determining
its layout but does not draw the shadow\&. That is, if \fBXmNshadowThickness\fP
is greater than 0 (zero), Label leaves space for the shadow, but the shadow
does not appear\&.
.PP
In a Label, \fBXmNtraversalOn\fP and \fBXmNhighlightOnEnter\fP are forced
to False inside Popup menu panes, Pulldown menu panes, and OptionMenus\&.
Otherwise, these resources default to False\&.
.PP
Label uses the \fBXmQTmenuSystem\fP and \fBXmQTspecifyRenderTable\fP
traits, and
holds the \fBXmQTaccessTextual\fP, \fBXmQTmenuSavvy\fP, and
\fBXmQTtransfer\fP traits\&.
.SS "Data Transfer Behavior"
.PP
Label and it subclasses, except when used in a menu system, support
dragging of the label contents from the Label\&.
However, the label contents are draggable only if
the \fBXmNenableUnselectableDrag\fP resource of \fBXmDisplay\fP
is set to True\&.
.PP
As a source of data, Label and its subclasses support the following
targets and associated conversions of data to these targets:
.IP "\fIlocale\fP" 10
If the \fIlocale\fP target matches the widget\&'s locale, the widget
transfers \fBXmNlabelString\fP in the encoding of the locale\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmSTRING\fP\&.
.IP "\fBCOMPOUND_TEXT\fP" 10
The widget transfers \fBXmNlabelString\fP as type \fBCOMPOUND_TEXT\fP\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmSTRING\fP\&.
.IP "\fBPIXMAP\fP" 10
The widget transfers \fBXmNlabelPixmap\fP as type \fBDRAWABLE\fP\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmPIXMAP\fP\&.
.IP "\fBSTRING\fP" 10
The widget transfers \fBXmNlabelString\fP as type \fBSTRING\fP\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmSTRING\fP\&.
.IP "\fBTEXT\fP" 10
If \fBXmNlabelString\fP is fully convertible to the encoding of the
locale, the widget transfers \fBXmNlabelString\fP in the encoding of
the locale\&.
Otherwise, the widget transfers \fBXmNlabelString\fP as type
\fBCOMPOUND_TEXT\fP\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmSTRING\fP\&.
.IP "\fB_MOTIF_CLIPBOARD_TARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets it
supports for the \fBCLIPBOARD\fP selection\&.
When \fBXmNlabelType\fP is \fBXmSTRING\fP, these include the following
targets:
.RS
.IP "   \(bu" 6
\fB_MOTIF_COMPOUND_STRING\fP
.IP "   \(bu" 6
\fBCOMPOUND_TEXT\fP
.IP "   \(bu" 6
The encoding of the locale, if \fBXmNlabelString\fP is fully convertible
to the encoding of the locale
.IP "   \(bu" 6
\fBSTRING\fP, if \fBXmNlabelString\fP is fully convertible to
\fBSTRING\fP
.RE
.IP "" 10
When \fBXmNlabelType\fP is \fBXmPIXMAP\fP, the targets include
\fBPIXMAP\fP\&.
.IP "\fB_MOTIF_COMPOUND_STRING\fP" 10
The widget transfers \fBXmNlabelString\fP as a compound string in
Byte Stream format\&.
This target is supported only when \fBXmNlabelType\fP is \fBXmSTRING\fP\&.
.IP "\fB_MOTIF_EXPORT_TARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets to be
used as the value of the DragContext\&'s \fBXmNexportTargets\fP in a
drag-and-drop transfer\&.
When \fBXmNlabelType\fP is \fBXmSTRING\fP, these include
\fB_MOTIF_COMPOUND_STRING\fP, \fBCOMPOUND_TEXT\fP, the encoding of the
locale, \fBSTRING\fP, \fBTEXT\fP, \fBBACKGROUND\fP, and
\fBFOREGROUND\fP\&.
When \fBXmNlabelType\fP is \fBXmPIXMAP\fP, these include \fBPIXMAP\fP,
\fBBACKGROUND\fP, and \fBFOREGROUND\fP\&.
.PP
As a source of data, Label also supports the following standard Motif
targets:
.IP "\fBBACKGROUND\fP" 10
The widget transfers \fBXmNbackground\fP as type \fBPIXEL\fP\&.
.IP "\fBCLASS\fP" 10
The widget finds the first shell in the widget hierarchy that has a
\fBWM_CLASS\fP property and transfers the contents as text in the
current locale\&.
.IP "\fBCLIENT_WINDOW\fP" 10
The widget finds the first shell in the widget hierarchy and transfers
its window as type \fBWINDOW\fP\&.
.IP "\fBCOLORMAP\fP" 10
The widget transfers \fBXmNcolormap\fP as type \fBCOLORMAP\fP\&.
.IP "\fBFOREGROUND\fP" 10
The widget transfers \fBXmNforeground\fP as type \fBPIXEL\fP\&.
.IP "\fBNAME\fP" 10
The widget finds the first shell in the widget hierarchy that has a
\fBWM_NAME\fP property and transfers the contents as text in the current
locale\&.
.IP "\fBTARGETS\fP" 10
The widget transfers, as type \fBATOM\fP, a list of the targets it
supports\&.
These include the standard targets in this list\&.
When \fBXmNlabelType\fP is \fBXmSTRING\fP, these also include
\fB_MOTIF_COMPOUND_STRING\fP, \fBCOMPOUND_TEXT\fP, the encoding of the
locale, \fBSTRING\fP, and \fBTEXT\fP\&.
When \fBXmNlabelType\fP is \fBXmPIXMAP\fP, these also include
\fBPIXMAP\fP\&.
.IP "\fBTIMESTAMP\fP" 10
The widget transfers the timestamp used to acquire the selection as type
\fBINTEGER\fP\&.
.IP "\fB_MOTIF_RENDER_TABLE\fP" 10
The widget transfers \fBXmNrenderTable\fP if it exists, or else the
default text render table, as type \fBSTRING\fP\&.
.IP "\fB_MOTIF_ENCODING_REGISTRY\fP" 10
The widget transfers its encoding registry as type \fBSTRING\fP\&.
The value is a list of NULL separated items in the
form of tag encoding pairs\&.
This target symbolizes the transfer target for the
Motif Segment Encoding Registry\&.
Widgets and applications can use this Registry to register
text encoding formats for specified render table tags\&.
Applications access this Registry by calling
\fBXmRegisterSegmentEncoding\fP and \fBXmMapSegmentEncoding\fP\&.
.SS "Classes"
.PP
Label inherits behavior, resources, and traits from
\fBCore\fP and \fBXmPrimitive\fP\&.
.PP
The class pointer is \fBxmLabelWidgetClass\fP\&.
.PP
The class name is \fBXmLabel\fP\&.
.SS "New Resources"
.PP
The following table defines a set of widget resources used by the programmer
to specify data\&. The programmer can also set the resource values for the
inherited classes to set attributes for this widget\&. To reference a
resource by name or by class in a \fB\&.Xdefaults\fP file, remove the \fBXmN\fP or
\fBXmC\fP prefix and use the remaining letters\&. To specify one of the defined
values for a resource in a \fB\&.Xdefaults\fP file, remove the \fBXm\fP prefix and use
the remaining letters (in either lowercase or uppercase, but include any
underscores between words)\&.
The codes in the access column indicate if the given resource can be
set at creation time (C),
set by using \fBXtSetValues\fP (S),
retrieved by using \fBXtGetValues\fP (G),
or is not applicable (N/A)\&.
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmLabel Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNacceleratorXmCAcceleratorStringNULLCSG
_____
XmNacceleratorTextXmCAcceleratorTextXmStringNULLCSG
_____
XmNalignmentXmCAlignmentunsigned chardynamicCSG
_____
XmNfontListXmCFontListXmFontListdynamicCSG
_____
XmNlabelInsensitivePixmapXmCLabelInsensitivePixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNlabelPixmapXmCLabelPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNlabelStringXmCXmStringXmStringdynamicCSG
_____
XmNlabelTypeXmCLabelTypeunsigned charXmSTRINGCSG
_____
XmNmarginBottomXmCMarginBottomDimension0CSG
_____
XmNmarginHeightXmCMarginHeightDimension2CSG
_____
XmNmarginLeftXmCMarginLeftDimension0CSG
_____
XmNmarginRightXmCMarginRightDimension0CSG
_____
XmNmarginTopXmCMarginTopDimension0CSG
_____
XmNmarginWidthXmCMarginWidthDimension2CSG
_____
XmNmnemonicXmCMnemonicKeySymNULLCSG
_____
XmNmnemonicCharSetXmCMnemonicCharSetStringXmFONTLIST_DEFAULT_TAGCSG
_____
XmNrecomputeSizeXmCRecomputeSizeBooleanTrueCSG
_____
XmNrenderTableXmCRenderTableXmRenderTabledynamicCSG
_____
XmNstringDirectionXmCStringDirectionXmStringDirectiondynamicCSG
_____
.TE
.IP "\fBXmNaccelerator\fP" 10
Sets the accelerator on a button widget in a menu, which
activates a visible or invisible, but managed, button from the keyboard\&.
This resource is a string that describes a set of modifiers
and the key that may be used to select the button\&.
The format of this string
is identical to that used by the translations manager, with the exception
that only a single event may be specified and only \fBKeyPress\fP events are
allowed\&.
.IP "" 10
Accelerators for buttons are supported only for
PushButtons and ToggleButtons in Pulldown and Popup menu panes\&.
.IP "\fBXmNacceleratorText\fP" 10
Specifies the text displayed
for the accelerator\&.
The text is displayed
adjacent to the label string or pixmap\&. The direction of its layout depends on
the \fBXmNlayoutDirection\fP resource of the widget\&.
Accelerator text for buttons is displayed only for
PushButtons and ToggleButtons in Pulldown and Popup Menus\&.
.IP "\fBXmNalignment\fP" 10
Specifies the label alignment for text or pixmap\&.
.RS
.IP "\fBXmALIGNMENT_BEGINNING\fP (left alignment)" 10
Causes the left sides of
the lines of text to be vertically aligned with the
left edge of the widget window\&. For a pixmap, its left side is vertically
aligned with the left edge of the widget window\&.
.IP "\fBXmALIGNMENT_CENTER\fP (center alignment)" 10
Causes the centers of the lines of text to be vertically aligned
in the center of the widget window\&. For a pixmap, its center is vertically aligned with the
center of the widget window\&.
.IP "\fBXmALIGNMENT_END\fP (right alignment)" 10
Causes the right sides of the
lines of text to be vertically aligned with the
right edge of the widget window\&. For a pixmap, its right side is vertically
aligned with the right edge of the widget window\&.
.RE
.IP "" 10
The preceding descriptions for text are correct when
\fBXmNlayoutDirection\fP is \fBXmLEFT_TO_RIGHT\fP\&. When that resource
is \fBXmRIGHT_TO_LEFT\fP, the descriptions for
\fBXmALIGNMENT_BEGINNING\fP and \fBXmALIGNMENT_END\fP are switched\&.
.IP "" 10
If the parent is a RowColumn whose \fBXmNisAligned\fP resource is True,
\fBXmNalignment\fP is forced to the same value as the RowColumn\&'s
\fBXmNentryAlignment\fP if the RowColumn\&'s \fBXmNrowColumnType\fP is
\fBXmWORK_AREA\fP or if the widget is a subclass of XmLabel\&.
Otherwise, the default is \fBXmALIGNMENT_CENTER\fP\&.
.IP "\fBXmNfontList\fP" 10
Specifies the font of the text used in the widget\&. \fBXmNfontList\fP
is obsolete and exists for compatibility with previous releases\&. You
should now use \fBXmNrenderTable\fP instead of \fBXmNfontList\fP\&. If
both are specified, the render table will take precedence\&. If
\fBXmNfontList\fP is NULL at initialization, Label searches its parent
hierarchy for an ancestor that is a subclass of the XmBulletinBoard,
VendorShell, or XmMenuShell widget class\&. If such an ancestor is
found, Label initializes \fBXmNfontList\fP to the
\fBXmNlabelFontList\fP of the ancestor widget\&. Similarly, button
subclasses of Label initialize \fBXmNfontList\fP to the
\fBXmNbuttonFontList\fP of the ancestor widget\&. (Currently, all
subclasses of Label are button subclasses\&.) If no such ancestor is
found, the default is implementation dependent\&. Refer to
\fBXmFontList\fP(3) for more information on the creation and
structure of a font list\&.
.IP "\fBXmNlabelInsensitivePixmap\fP" 10
Specifies a pixmap used as the button face if \fBXmNlabelType\fP is
\fBXmPIXMAP\fP and the button is insensitive\&.
The default value, \fBXmUNSPECIFIED_PIXMAP\fP, displays an empty label\&.
.IP "\fBXmNlabelPixmap\fP" 10
Specifies the pixmap when \fBXmNlabelType\fP is
\fBXmPIXMAP\fP\&.
The default value, \fBXmUNSPECIFIED_PIXMAP\fP, displays an empty label\&.
.IP "\fBXmNlabelString\fP" 10
Specifies the compound string when \fBXmNlabelType\fP is
\fBXmSTRING\fP\&.
If this value is NULL, it is initialized by converting the name
of the widget to a compound string\&.
Refer to \fBXmString\fP(3)
for more information on the
creation and structure of compound strings\&.
.IP "\fBXmNlabelType\fP" 10
Specifies the label type\&.
.RS
.IP "\fBXmSTRING\fP" 10
Displays text using \fBXmNlabelString\fP\&.
.IP "\fBXmPIXMAP\fP" 10
Displays pixmap using \fBXmNlabelPixmap\fP or
\fBXmNlabelInsensitivePixmap\fP\&.
.RE
.IP "\fBXmNmarginBottom\fP" 10
Specifies the amount of spacing between the bottom of the label text
and the top of the bottom margin specified by \fBXmNmarginHeight\fP\&.
This may be modified by Label\&'s
subclasses\&. For example, CascadeButton may increase this field to make
room for the cascade pixmap\&.
.IP "\fBXmNmarginHeight\fP" 10
Specifies an equal amount of spacing above the margin
defined by \fBXmNmarginTop\fP and below the margin defined by
\fBXmNmarginBottom\fP\&. \fBXmNmarginHeight\fP specifies the amount
of spacing between the top edge of the margin set by \fBXmNmarginTop\fP
and the bottom edge of the top shadow, and the amount of spacing between
the bottom edge of the margin specified by \fBXmNmarginBottom\fP and the
top edge of the bottom shadow\&.
.IP "\fBXmNmarginLeft\fP" 10
Specifies the amount of spacing between the left edge of the label text
and the right side of the left margin (specified by \fBXmNmarginWidth\fP)\&.
This may be modified by Label\&'s
subclasses\&. For example, ToggleButton may increase this field to make room
for the toggle indicator and for spacing between the indicator and label\&.
Whether this actually applies to the left or right side of the label
depends on the value of
the \fBXmNlayoutDirection\fP resource\&.
.IP "\fBXmNmarginRight\fP" 10
Specifies the amount of spacing between the right edge of the label text
and the left side of the right margin (specified by \fBXmNmarginWidth\fP)\&.
This may be modified by Label\&'s
subclasses\&. For example, CascadeButton may increase this field to make room
for the cascade pixmap\&.
Whether this actually applies to the left or right side of the label
depends on the value of
the \fBXmNlayoutDirection\fP resource\&.
.IP "\fBXmNmarginTop\fP" 10
Specifies the amount of spacing between the top of the label text and
the bottom of the top margin specified by \fBXmNmarginHeight\fP\&.
This may be modified by Label\&'s subclasses\&. For example, CascadeButton
may increase this field to make room for the cascade pixmap\&.
.IP "\fBXmNmarginWidth\fP" 10
Specifies an equal amount of spacing to the left of the margin defined
by \fBXmNmarginLeft\fP and to the right of the margin defined by
\fBXmNmarginRight\fP\&. \fBXmNmarginWidth\fP specifies the amount
of spacing between the left edge of the margin set by \fBXmNmarginLeft\fP
and the right edge of the left shadow, and the amount of spacing between
the right edge of the margin specified by \fBXmNmarginRight\fP and the
left edge of the right shadow\&.
.IP "\fBXmNmnemonic\fP" 10
Provides the user with an alternate means of activating a button\&.
A button in a MenuBar, a Popup menu pane, or a Pulldown
menu pane can have a mnemonic\&.
.IP "" 10
This resource contains a keysym as listed in the X11 keysym table\&.
The first character in the label string that exactly matches
the mnemonic in the character set specified in
\fBXmNmnemonicCharSet\fP
is underlined when the button is displayed\&.
.IP "" 10
When a mnemonic has been specified, the user activates the button by
pressing the mnemonic key while the button is visible\&.
If the button is a CascadeButton in a MenuBar and the MenuBar does not
have the focus, the user must use the \fBMAlt\fP modifier while
pressing the mnemonic\&.
The user can activate the button by pressing either the shifted or the
unshifted mnemonic key\&.
.IP "\fBXmNmnemonicCharSet\fP" 10
Specifies the character set of the mnemonic for the label\&.
The default is \fBXmFONTLIST_DEFAULT_TAG\fP\&.
.IP "\fBXmNrecomputeSize\fP" 10
Specifies a Boolean value that indicates whether the widget
shrinks or expands to accommodate its contents (label string or
pixmap) as a result of an \fBXtSetValues\fP resource value that
would change the size of the widget\&. If True, the widget shrinks
or expands to exactly fit the label string or pixmap\&.
If False, the widget never attempts to change size on its own\&.
.IP "\fBXmNrenderTable\fP" 10
Specifies the render table associated with the \fBlabelString\fP\&. If
this value is NULL at initialization, Label searches its parent
hierarchy for an ancestor that holds the \fBXmQTspecifyRenderTable\fP trait\&.
If such an ancestor is
found, Label initializes \fBXmNrenderTable\fP to the
\fBXmLABEL_RENDER_TABLE\fP value of the ancestor widget\&. Similarly, button
subclasses of Label initialize \fBXmNrenderTable\fP to the
\fBXmBUTTON_RENDER_TABLE\fP value of the ancestor widget\&. (Note that all
current subclasses of Label are button subclasses\&.) If no such
ancestor is found, the default is implementation dependent\&. If a font
list and a render table are both sepcified, the render table will take
precedence\&. Refer to \fBXmRenderTable\fP(3) for more information on
the creation and structure of a render table\&.
.IP "\fBXmNstringDirection\fP" 10
Is a synthetic resource for setting \fBXmNlayoutDirection\fP\&.
The values for this resource are \fBXmSTRING_DIRECTION_L_TO_R\fP and
\fBXmSTRING_DIRECTION_R_TO_L\fP\&. Refer to the
\fBXmNlayoutDirection\fP resource description\&. The
\fBXmNstringDirection\fP resource is obsoleted by
\fBXmNlayoutDirection\fP, but is kept here for backward compatibility\&.
.SS "Inherited Resources"
.PP
Label inherits behavior and resources from the following
superclasses\&. For a complete description of each resource, refer to the
reference page for that superclass\&.
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBXmPrimitive Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNbottomShadowColorXmCBottomShadowColorPixeldynamicCSG
_____
XmNbottomShadowPixmapXmCBottomShadowPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNconvertCallbackXmCCallbackXtCallbackListNULLC
_____
XmNforegroundXmCForegroundPixeldynamicCSG
_____
XmNhelpCallbackXmCCallbackXtCallbackListNULLC
_____
XmNhighlightColorXmCHighlightColorPixeldynamicCSG
_____
XmNhighlightOnEnterXmCHighlightOnEnterBooleanFalseCSG
_____
XmNhighlightPixmapXmCHighlightPixmapPixmapdynamicCSG
_____
XmNhighlightThicknessXmCHighlightThicknessDimension0CSG
_____
XmNlayoutDirectionXmCLayoutDirectionXmDirectiondynamicCG
_____
XmNnavigationTypeXmCNavigationTypeXmNavigationTypeXmNONECSG
_____
XmNpopupHandlerCallbackXmCCallbackXtCallbackListNULLC
_____
XmNshadowThicknessXmCShadowThicknessDimension0CSG
_____
XmNtopShadowColorXmCTopShadowColorPixeldynamicCSG
_____
XmNtopShadowPixmapXmCTopShadowPixmapPixmapdynamicCSG
_____
XmNtraversalOnXmCTraversalOnBooleanFalseCSG
_____
XmNunitTypeXmCUnitTypeunsigned chardynamicCSG
_____
XmNuserDataXmCUserDataXtPointerNULLCSG
_____
.TE
.PP
.TS
tab() box;
c s s s s
l| l| l| l| l.
\fBCore Resource Set\fP
\fBName\fP\fBClass\fP\fBType\fP\fBDefault\fP\fBAccess\fP
_____
XmNacceleratorsXmCAcceleratorsXtAcceleratorsdynamicCSG
_____
XmNancestorSensitiveXmCSensitiveBooleandynamicG
_____
XmNbackgroundXmCBackgroundPixeldynamicCSG
_____
XmNbackgroundPixmapXmCPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNborderColorXmCBorderColorPixelXtDefaultForegroundCSG
_____
XmNborderPixmapXmCPixmapPixmapXmUNSPECIFIED_PIXMAPCSG
_____
XmNborderWidthXmCBorderWidthDimension0CSG
_____
XmNcolormapXmCColormapColormapdynamicCG
_____
XmNdepthXmCDepthintdynamicCG
_____
XmNdestroyCallbackXmCCallbackXtCallbackListNULLC
_____
XmNheightXmCHeightDimensiondynamicCSG
_____
XmNinitialResourcesPersistentXmCInitialResourcesPersistentBooleanTrueC
_____
XmNmappedWhenManagedXmCMappedWhenManagedBooleanTrueCSG
_____
XmNscreenXmCScreenScreen *dynamicCG
_____
XmNsensitiveXmCSensitiveBooleanTrueCSG
_____
XmNtranslationsXmCTranslationsXtTranslationsdynamicCSG
_____
XmNwidthXmCWidthDimensiondynamicCSG
_____
XmNxXmCPositionPosition0CSG
_____
XmNyXmCPositionPosition0CSG
_____
.TE
.SS "Translations"
.PP
XmLabel includes translations from Primitive\&.
The XmLabel translations are described in the following list\&.
.PP
The following key names are listed in the
X standard key event translation table syntax\&.
This format is the one used by Motif to
specify the widget actions corresponding to a given key\&.
A brief overview of the format is provided under
\fBVirtualBindings\fP(3)\&.
For a complete description of the format, please refer to the
X Toolkit Instrinsics Documentation\&.
.IP "\fB<Btn2Down>\fP:" 10
ProcessDrag()
.IP "\fB:\fP\fB<Key>\fP\fB<osfHelp>\fP:" 10
Help()
.PP
The translations used by subclasses of XmLabel for menu
traversal are described in the following list\&.
.IP "\fB:\fP\fB<Key>\fP\fB<osfCancel>\fP:" 10
MenuEscape()
.IP "\fB:\fP\fB<Key>\fP\fB<osfLeft>\fP:" 10
MenuTraverseLeft()
.IP "\fB:\fP\fB<Key>\fP\fB<osfRight>\fP:" 10
MenuTraverseRight()
.IP "\fB:\fP\fB<Key>\fP\fB<osfUp>\fP:" 10
MenuTraverseUp()
.IP "\fB:\fP\fB<Key>\fP\fB<osfDown>\fP:" 10
MenuTraverseDown()
.SS "Action Routines"
.PP
The \fBXmLabel\fP action routines are
.IP "Help():" 10
In a Popup or Pulldown MenuPane, unposts all menus in the menu hierarchy
and, when the shell\&'s keyboard focus policy is \fBXmEXPLICIT\fP,
restores keyboard focus to the widget that had the focus before the
menu system was entered\&.
Calls the callbacks for \fBXmNhelpCallback\fP if any exist\&.
If there are no help
callbacks for this widget, this action calls the help callbacks
for the nearest ancestor that has them\&.
.IP "MenuEscape():" 10
In a MenuBar, disarms the CascadeButton and the menu and, when the
shell\&'s keyboard focus policy is \fBXmEXPLICIT\fP, restores keyboard
focus to the widget that had the focus before the menu was entered\&.
.IP "" 10
In a top-level Pulldown MenuPane from a MenuBar, unposts the menu,
disarms the MenuBar CascadeButton and the MenuBar, and, when the shell\&'s
keyboard focus policy is \fBXmEXPLICIT\fP, restores keyboard focus to
the widget that had the focus before the MenuBar was entered\&.
In other Pulldown MenuPanes, unposts the menu and moves the focus
to its CascadeButton\&.
.IP "" 10
In a Popup MenuPane, unposts the menu and, when the shell\&'s keyboard
focus policy is \fBXmEXPLICIT\fP, restores keyboard focus to the widget
from which the menu was posted\&.
.IP "MenuTraverseDown():" 10
If the current menu item has a submenu and is in a MenuBar, then this
action posts the submenu, disarms the current menu item, and arms
the submenu\&'s first traversable menu item\&.
.IP "" 10
If the current menu item is in a MenuPane, then this action disarms the
current menu item and arms the item below it\&. This action wraps within the
MenuPane\&. The direction of the wrapping depends on the
\fBXmNlayoutDirection\fP resource\&.
.IP "MenuTraverseLeft():" 10
When the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the left\&.
This action wraps within the MenuBar\&.
.IP "" 10
In MenuPanes, if the current menu item is not at the left edge of a MenuPane,
this action disarms the current item and arms the item to its left\&.
If the current menu item is at the left edge of a submenu attached to a
MenuBar item, then this action unposts the submenu and traverses to the
MenuBar item to the left, wrapping if necessary\&. If that MenuBar item
has a submenu, it posts the submenu and arms the first traversable
item in the submenu\&.
If the current menu item is at the left edge of a submenu not directly
attached to a MenuBar item, then this action unposts the current submenu only\&.
.IP "" 10
In Popup or Torn-off MenuPanes, when the current menu item is at the
left edge, this action wraps within the MenuPane\&. If the current menu
item is at the left edge of the MenuPane and not in the top row, this
action wraps to the rightmost menu item in the row above\&. If the current
menu item is in the upper, leftmost corner, this action wraps
to the tear-off control, if present, or else it wraps to the bottom,
rightmost menu item in the MenuPane\&.
The preceding description applies when the \fBXmNlayoutDirection\fP horizontal
direction is \fBXmLEFT_TO_RIGHT\fP\&. If the \fBXmNlayoutDirection\fP horizontal
direction is \fBXmRIGHT_TO_LEFT\fP, then the following applies\&.
.IP "" 10
If the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the left\&.
This action wraps within the MenuBar\&.
.IP "" 10
In MenuPanes, if the current menu item is a CascadeButton, then this
action posts its associated submenu\&.
If the current menu item is not a CascadeButton and is not at the left
edge of a MenuPane, this action disarms the current item and arms the
item to its left, wrapping if necessary\&.
If the current menu item is not a CascadeButton and is at the left edge of a
submenu that is a descendent of a MenuBar, then this action unposts all
submenus and traverses to the MenuBar item to the left\&.
If that MenuBar item has a submenu, it posts the submenu and arms
the submenu\&'s first traversable item\&.
.IP "" 10
In Popup or Torn-off menus, if the current menu item is not a
CascadeButton and is at the left edge of a row (except the
bottom row), this action wraps to the rightmost menu item in the
row below\&. If the current menu item is not a CascadeButton and
is in the bottom, leftmost corner of a Popup or Pulldown MenuPane, this
action wraps to the tear-off control, if present, or else it wraps to
the top, rightmost menu item of the MenuPane\&.
.IP "MenuTraverseRight():" 10
If the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the right\&.
This action wraps within the MenuBar\&.
.IP "" 10
In MenuPanes, if the current menu item is a CascadeButton, then this
action posts its associated submenu\&.
If the current menu item is not a CascadeButton and is not at the right
edge of a MenuPane, this action disarms the current item and arms the
item to its right, wrapping if necessary\&.
If the current menu item is not a CascadeButton and is at the right edge of a
submenu that is a descendent of a MenuBar, then this action unposts all
submenus and traverses to the MenuBar item to the right\&.
If that MenuBar item has a submenu, it posts the submenu and arms
the submenu\&'s first traversable item\&.
.IP "" 10
In Popup or Torn-off menus, if the current menu item is not a
CascadeButton and is at the right edge of a row (except the
bottom row), this action wraps to the leftmost menu item in the
row below\&. If the current menu item is not a CascadeButton and
is in the bottom, rightmost corner of a Popup or Pulldown MenuPane, this
action wraps to the tear-off control, if present, or else it wraps to
the top, leftmost menu item of the MenuPane\&.
The preceding description applies when the \fBXmNlayoutDirection\fP horizontal
direction is \fBXmLEFT_TO_RIGHT\fP\&. If the \fBXmNlayoutDirection\fP horizontal
direction is \fBXmRIGHT_TO_LEFT\fP, then the following applies\&.
When the current menu item is in a MenuBar, then this action disarms the
current item and arms the MenuBar item to the left\&.
This action wraps within the MenuBar\&.
.IP "" 10
In MenuPanes, if the current menu item is not at the right edge of a MenuPane,
this action disarms the current item and arms the item to its right\&.
If the current menu item is at the right edge of a submenu attached to a
MenuBar item, then this action unposts the submenu and traverses to the
MenuBar item to the right, wrapping if necessary\&. If that MenuBar item
has a submenu, it posts the submenu and arms the first traversable
item in the submenu\&.
If the current menu item is at the right edge of a submenu not directly
attached to a MenuBar item, then this action unposts the current submenu only\&.
.IP "" 10
In Popup or Torn-off MenuPanes, when the current menu item is at the
right edge, this action wraps within the MenuPane\&. If the current menu
item is at the right edge of the MenuPane and not in the top row, this
action wraps to the leftmost menu item in the row above\&. If the current
menu item is in the upper, rightmost corner, this action wraps
to the tear-off control, if present, or else it wraps to the bottom,
leftmost menu item in the MenuPane\&.
.IP "MenuTraverseUp():" 10
When the current menu item is in a MenuPane, then
this action disarms the current menu item and arms the item above it\&.
This action wraps within the MenuPane\&. The direction of the wrapping
depends on the \fBXmNlayoutDirection\fP resource\&.
.IP "ProcessDrag():" 10
Drags the contents of a Label, identified when \fBBTransfer\fP is
pressed\&.
This action sets the \fBXmNconvertProc\fP of the DragContext to a
function that calls the \fBXmNconvertCallback\fP procedures, possibly
multiple times, for the \fB_MOTIF_DROP\fP selection\&.
This action is undefined for Labels used in a menu system\&.
.SS "Virtual Bindings"
.PP
The bindings for virtual keys are vendor specific\&.
For information about bindings for virtual buttons and keys, see
\fBVirtualBindings\fP(3)\&.
.SH "RELATED"
.PP
\fBCore\fP(3), \fBXmCreateLabel\fP(3),
\fBXmFontListAppendEntry\fP(3),
\fBXmStringCreate\fP(3),
\fBXmStringCreateLtoR\fP(3),
and \fBXmPrimitive\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
