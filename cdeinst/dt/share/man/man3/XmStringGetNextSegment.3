'\" t
...\" StrGeE.sgm /main/9 1996/09/08 21:05:23 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmStringGetNextSegment" "library call"
.SH "NAME"
\fBXmStringGetNextSegment\fP \(em A compound string function that fetches the bytes in the next segment of a compound string
.iX "XmStringGetNextSegment"
.iX "compound string functions" "XmStringGetNextSegment"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
\fBBoolean \fBXmStringGetNextSegment\fP\fR(
\fBXmStringContext \fBcontext\fR\fR,
\fBchar **\fBtext\fR\fR,
\fBXmStringTag *\fBtag\fR\fR,
\fBXmStringDirection *\fBdirection\fR\fR,
\fBBoolean *\fBseparator\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
This routine is obsolete and exists for compatibility with previous
releases\&. To read the contents of a compound string, read each
component of the string with \fBXmStringGetNextTriple\fP\&. This
\fBXmString\fR function returns the type, length, and value of the next
component in the compound string\&.
\fBXmStringGetNextSegment\fP
fetches the
bytes
in the next segment; repeated calls
fetch sequential segments\&. The \fItext\fP, \fItag\fP,
and \fIdirection\fP of the fetched segment are returned each time\&. A
Boolean status is returned to indicate whether a valid segment was
successfully parsed\&.
.PP
If the function returns True, then the function allocates space to hold the
returned \fItext\fP and \fItag\fP\&. The application is responsible for
managing the allocated space\&. The application can recover the allocated space
by calling \fBXtFree\fP\&.
.IP "\fIcontext\fP" 10
Specifies the string context structure which was allocated by the
\fBXmStringInitContext\fP function
.IP "\fItext\fP" 10
Specifies a pointer to a NULL-terminated string
.IP "\fItag\fP" 10
Specifies a pointer to the font list element tag associated with the
text
.IP "\fIdirection\fP" 10
Specifies a pointer to the direction of the text
.IP "\fIseparator\fP" 10
Specifies whether the next component of the compound string is a
separator
.SH "RETURN"
.PP
Returns True if a valid segment is found\&.
.SH "RELATED"
.PP
\fBXmStringCreate\fP(3) and \fBXmStringInitContext\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:42
