'\" t
...\" FetchWiA.sgm /main/9 1996/09/08 21:25:23 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "MrmFetchWidget" "library call"
.SH "NAME"
\fBMrmFetchWidget\fP \(em Fetches and creates an indexed (UIL named) application widget and its children
.iX "MrmFetchWidget"
.iX "uil functions" "MrmFetchWidget"
.SH "SYNOPSIS"
.PP
.nf
#include <Mrm/MrmPublic\&.h>
\fBCardinal \fBMrmFetchWidget\fP\fR(
\fBMrmHierarchy \fBhierarchy_id\fR\fR,
\fBString \fBindex\fR\fR,
\fBWidget \fBparent_widget\fR\fR,
\fBWidget *\fBwidget\fR\fR,
\fBMrmType *\fBclass\fR\fR);
.fi
.iX "MRM function" "MrmFetchWidget"
.iX "MrmFetchWidget" "definition"
.SH "DESCRIPTION"
.PP
The
\fBMrmFetchWidget\fP
function
.iX "MrmFetchWidget" "description"
fetches and creates an
indexed application widget and its children\&.
The indexed application widget is any widget that is named in UIL\&.
In
fetch operations, the fetched widget\&'s subtree is also
fetched and created\&.
This widget must not appear as the child of a widget within its own
subtree\&. \fBMrmFetchWidget\fP does not execute \fBXtManageChild\fP
for the newly created widget\&.
.PP
All widgets fetched by a call to \fBMrmFetchWidget\fP are not managed
at the time of their creation callbacks\&.
.IP "\fIhierarchy_id\fP" 10
Specifies the ID of the \fBUID\fP hierarchy that contains the
interface definition\&.
The value of \fIhierarchy_id\fP was returned in a previous call to
\fBMrmOpenHierarchyPerDisplay\fP\&.
.IP "\fIindex\fP" 10
Specifies the UIL name of the widget to fetch\&.
.IP "\fIparent_widget\fP" 10
Specifies the parent widget ID\&.
.IP "\fIwidget\fP" 10
Returns the widget ID of the created widget\&.
.IP "\fIclass\fP" 10
This argument must be set to an actual pointer; it
cannot be a NULL pointer\&. \fBMrmFetchWidget\fP sets this argument to
an implementation dependent value\&.
.PP
An application can fetch
any named widget in the \fBUID\fP hierarchy using
\fBMrmFetchWidget\fP\&.
\fBMrmFetchWidget\fP
can be called at any time to fetch a widget that was not fetched at
application startup\&.
\fBMrmFetchWidget\fP
can be used to defer fetching pop-up
widgets until they are first
referenced (presumably in a callback), and then used to fetch them
once\&.
.PP
\fBMrmFetchWidget\fP
can also create multiple instances of a widget (and its subtree)\&.
In this case, the \fBUID\fP definition functions as a template;
a widget definition can be fetched any number of times\&.
An application can use
this template to make multiple instances of a widget, for example, in a
dialog box box or menu\&.
.PP
The index (UIL name) that identifies the widget must be
known to the application\&.
.SH "RETURN"
.iX "MrmSUCCESS"
.iX "MrmBAD_HIERARCHY"
.iX "MrmNOT_FOUND"
.iX "MrmFAILURE"
.PP
This function returns one of the following status return constants:
.IP "\fBMrmSUCCESS\fP" 10
The function executed successfully\&.
.IP "\fBMrmBAD_HIERARCHY\fP" 10
The hierarchy ID was invalid\&.
.IP "\fBMrmNOT_FOUND\fP" 10
The widget was not found in UID hierarchy\&.
.IP "\fBMrmFAILURE\fP" 10
The function failed\&.
.SH "RELATED"
.PP
\fBMrmOpenHierarchyPerDisplay\fP(3),
\fBMrmFetchWidgetOverride\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
