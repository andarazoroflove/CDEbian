'\" t
...\" m_accept.sgm /main/8 1996/08/30 14:29:32 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "ttdt_message_accept" "library call"
.SH "NAME"
\fBttdt_message_accept\fP \(em accept a contract to handle a ToolTalk request
.SH "SYNOPSIS"
.PP
.nf
#include <Tt/tttk\&.h>
\fBTt_pattern \fB*ttdt_message_accept\fP\fR(
\fBTt_message \fBcontract\fR\fR,
\fBTtdt_contract_cb \fBcb\fR\fR,
\fBWidget \fBshell\fR\fR,
\fBvoid *\fBclientdata\fR\fR,
\fBint \fBaccept\fR\fR,
\fBint \fBsendStatus\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The
\fBttdt_message_accept\fP function
registers in the default session for
\fBTT_HANDLER\fP-addressed requests:
.IP "   1." 6
\fBGet_Geometry\fP, \fBSet_Geometry\fP, \fBGet_Iconified\fP, \fBSet_Iconified\fP, \fBGet_Mapped\fP, \fBSet_Mapped\fP, \fBRaise\fP, \fBLower\fP, \fBGet_XInfo\fP
.IP "   2." 6
\fBPause\fP, \fBResume\fP
.IP "   3." 6
\fBQuit\fP, \fBGet_Status\fP
.PP
If the
\fIshell\fP argument is not
\fBNULL\fP, the ToolTalk service
handles messages in (1) transparently;
otherwise, it treats them like messages in (3)\&.
.PP
If
\fIshell\fP is non-
\fBNULL\fP and
\fIcb\fP is
\fBNULL\fP, then
the ToolTalk service
handles messages in (2) transparently by passing
\fIshell\fP and the appropriate boolean value to
\fBXtSetSensitive\fP(3)\&. If
\fIcb\fP is
\fBNULL\fP, then
the ToolTalk service
treats messages in (2) like (3)\&.
.PP
If
\fIcb\fP is not
\fBNULL\fP, \fBttdt_message_accept\fP passes messages in (3) to the
\fIcb\fP callback; otherwise it fails with
\fBTT_DESKTOP_ENOTSUP\fP\&.
.PP
If
\fIaccept\fP is True,
\fBttdt_message_accept\fP calls
\fBtt_message_accept\fP(3) with a
\fIcontract\fP argument\&.
If
\fIcontract\fP has a returned value from
\fBtt_message_status\fP of
\fBTT_WRN_START_MESSAGE\fP, it is the message that caused the tool to be started\&.
The tool should join any scopes it wants to serve before accepting
\fIcontract\fP, so that it will receive any other messages already dispatched to its
ptype\&.
Otherwise, those messages will cause other instances of the
ptype
to be started\&.
If that is in fact desired (for example,
because the tool can only service one message at a time), then
the tool should undeclare its
ptype
while it is busy\&.
.PP
If
\fIsendStatus\fP is True,
\fBttdt_message_accept\fP sends a
\fBStatus\fP notice to the requester, using the
arguments (if any) passed to
\fBttdt_open\fP\&.
.SH "RETURN VALUE"
.PP
Upon successful completion, the
\fBttdt_message_accept\fP function
returns a null-terminated array of
\fBTt_pattern\fR, and associates this array with
\fIcontract\fP; otherwise, it returns an error pointer\&.
The application can use
\fBtt_ptr_error\fP(3) to extract one of the following
\fBTt_status\fR values from the returned handle:
.IP "TT_ERR_NOMP" 10
The
\fBttsession\fP(1) process is not running and the ToolTalk service cannot restart it\&.
.IP "TT_ERR_POINTER" 10
The pointer passed does not point to an object
of the correct type for this operation\&.
.IP "TT_ERR_UNIMP" 10
The
\fBttsession\fP(1) for the default session is of a version that does not support
\fBtt_message_accept\fP\&. If
\fIcontract\fP is a
\fBTT_WRN_START_MESSAGE\fP, messages to the tool\&'s
ptype
will remain blocked until
\fIcontract\fP is rejected, replied to, or failed\&.
.SH "APPLICATION USAGE"
.PP
The
\fBttdt_message_accept\fP function
is what a tool calls when it wants to accept responsibility for
handling (that is, failing or rejecting) a request\&.
.PP
If
\fIcontract\fP is destroyed by
\fBtttk_message_destroy\fP(3), then the patterns will also be destroyed\&.
Otherwise, the caller
is responsible for iterating over the array and destroying each
pattern\&.
.SH "EXAMPLES"
.PP
See
\fBttdt_session_join\fP(3) for an example of a
\fBTtdt_contract_cb\fR callback that can be used with
\fBttdt_message_accept\fP\&.
.SH "SEE ALSO"
.PP
\fBTt/tttk\&.h - Tttttk\fP(5),
\fBttdt_open\fP(3),
\fBttmedia_ptype_declare\fP(3),
\fBtt_ptype_declare\fP(3),
\fBttdt_session_join\fP(3),
\fBttdt_file_join\fP(3),
\fBtt_ptype_undeclare\fP(3),
\fBXtSetSensitive\fP(3)\&. 
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
