'\" t
...\" MsgLogO.sgm /main/9 1996/10/25 10:36:30 cdedoc $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "DtMsgLogOpenFile" "library call"
.SH "NAME"
\fBDtMsgLogOpenFile\fP \(em opens a log file
.SH "SYNOPSIS"
.PP
.nf
#include <Dt/MsgLog\&.h>
\fBFILE* \fBDtMsgLogOpenFile\fP\fR(
\fBconst char* \fBtype\fR\fR,
\fBchar** \fBfilename_return\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The \fBDtMsgLogOpenFile\fP function
calls \fBfopen\fP to open a log file
with type \fBopen\fP mode\&. If \fBfopen\fP opens
a log file successfully and returns a non-NULL
\fIfilename_return\fP,
\fBDtMsgLogOpenFile\fP calls
\fBmalloc\fP to allocate space for
\fIfilename_return\fP\&.
\fBDtMsgLogOpenFile\fP then copies the
log file name to
\fIfilename_return\fP\&.
.PP
The caller must use the \fBfree\fP function to release the
space allocated for \fIfilename_return\fP,
if it is not NULL\&. The caller must also close the file pointer
returned by \fBDtMsgLogOpenFile\fP\&. Use
caution in doing this because stderr may be returned\&.
.PP
For a description of the algorithm used to determine the log file to open,
see \fBDtMsgLogMessage\fP(3)\&. Note that if a log file cannot
be opened, \fIfilename_return\fP will be set to NULL\&.
.SH "ARGUMENTS"
.IP "\fItype\fP" 10
Specifies the file open flag\&. See
\fBfopen\fP(3) for more information\&.
.IP "\fIfilename_return\fP" 10
Specifies the variable to receive the returned log file name\&.
.SH "ENVIRONMENT VARIABLES"
.PP
None\&.
.SH "RESOURCES"
.PP
None\&.
.SH "ACTIONS/MESSAGES"
.PP
None\&.
.SH "ERRORS/WARNINGS"
.PP
None\&.
.SH "EXAMPLES"
.PP
The following code fragment opens the log file,
logs the log file name, closes the file, and frees
the space allocated for the file name\&.
.PP
.nf
\f(CWchar * log_file;
FILE * fp = DtMsgLogOpenFile ("a+", &log_file);

if (log_file) {
    DtMsgLogMessage (argv[0], DtMsgLogInformation,
          "The log file name is: %s", log_file);
    free (log_file);
}
if (fp && fp != stderr)
     fclose (fp);\fR
.fi
.PP
.SH "RETURN VALUE"
.PP
If \fBDtMsgLogMessage\fP completes
successfully, it returns a pointer to the opened log file\&.
If it cannot open a log file, it returns stderr\&.
.SH "FILES"
.PP
None\&.
.SH "SEE ALSO"
.PP
\fBDtMsgLogMessage\fP(3),
\fBDtMsgLogSetHandler\fP(3)
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:40
