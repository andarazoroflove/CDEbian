'\" t
...\" MsgLogS.sgm /main/9 1996/11/12 11:26:42 cdedoc $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "DtMsgLogSetHandler" "library call"
.SH "NAME"
\fBDtMsgLogSetHandler\fP \(em installs an alternate message logging handler
.SH "SYNOPSIS"
.PP
.nf
#include <Dt/MsgLog\&.h>
\fBDtMsgLogHandler \fBDtMsgLogSetHandler\fP\fR(
\fBDtMsgLogHandler \fBhandler\fR\fR);
.fi
.SH "DESCRIPTION"
.PP
The \fBDtMsgLogSetHandler\fP function
installs an alternate message logging handler that will be
invoked when \fBDtMsgLogMessage\fP is called\&.
If \fIhandler\fP is \fBNULL\fP,
the default handler is installed\&.
.PP
\fBDtMsgLogSetHandler\fP is optional and should
be used only to override the default message logging handler\&.
If the handler function wants to log a message, it must use the
format and file specified in \fBDtMsgLogMessage\fP(3)
so applications can reliably parse the log file\&. (If the handler
wants to log a message, it can obtain the byte count to output
by using the return value from a call to
\fBvfprint\fP\&.)
.PP
The \fBDtMsgLogHandler\fP handler function has
the following arguments:
.IP "\fIprogram_name\fP" 10
A string "tag" to identify the application
issuing the message\&. This is generally an application\&'s
\fBargv[0]\fP\&.
.IP "\fImsg_type\fP" 10
The message type\&.
.IP "\fIformat\fP" 10
Specifies the \fBsprintf\fP format of the message\&.
.IP "\fIargs\fP" 10
Specifies the variable number of arguments needed by
\fIformat\fP\&.
.PP
The handler function should not call \fBDtMsgLogMessage\fP\&.
.PP
A sample use of the \fBDtMsgLogSetHandler\fP function
is in an application that prints the
CDE data types and actions databases\&. If an error occurs when the
databases are loaded, the error messages are logged and the application
is not able to get the messages\&. However, if the application installs
a message logging handler, when the database loading code encounters
an error, the application\&'s installed handler will be invoked to give
the application access to the database loading error messages\&.
.SH "ARGUMENTS"
.IP "\fIhandler\fP" 10
Specifies a message handler function\&.
.SH "ENVIRONMENT VARIABLES"
.PP
None\&.
.SH "RESOURCES"
.PP
None\&.
.SH "ACTIONS/MESSAGES"
.PP
None\&.
.SH "ERRORS/WARNINGS"
.PP
None\&.
.SH "EXAMPLES"
.PP
The following code installs a
\fBDtMsgLogHandler\fP handler
and then calls \fBDtDbLoad\fP to load the CDE
data typing and action databases\&. If an error occurs when the
databases are loaded, the handler function will be invoked\&.
The handler writes the message to an alternate file\&. After the databases are
loaded, the default handler is restored\&.
.PP
.nf
\f(CW(void) DtMsgLogSetHandler (msglog_handler);
DtDbLoad ();
(void) DtMsgLogSetHandler (NULL);

void my_handler (
    const char    * prog_name,
    DtMsgLogType    msg_type,
    const char    * format,
    va_list         args)
{
   FILE	     *fp;

   fp = fopen ("/tmp/foo", "a+");

   (void) fprintf (fp, "progname = %s\n\tformat = %s\n\tmsg_type = %d\n",
		prog_name, format, msg_type);
   (void) vfprintf (fp, format, args);
   (void) fprintf (fp, "\n");
}\fR
.fi
.PP
.SH "RETURN VALUE"
.PP
If \fBDtMsgLogMessage\fP completes
successfully, it returns the previously installed handler\&.
If it fails, it returns \fBNULL\fP\&.
.SH "FILES"
.PP
None\&.
.SH "SEE ALSO"
.PP
\fBDtMsgLogMessage\fP(3),
\fBDtMsgLogOpenFile\fP(3)
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:40
