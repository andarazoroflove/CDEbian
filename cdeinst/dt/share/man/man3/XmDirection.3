'\" t
...\" DirectA.sgm /main/8 1996/09/08 20:38:49 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "XmDirection" "library call"
.SH "NAME"
\fBXmDirection\fR \(em Data type for the direction of widget components
.iX "XmDirection"
.iX "data types" "XmDirection"
.SH "SYNOPSIS"
.PP
.nf
#include <Xm/Xm\&.h>
.fi
.SH "DESCRIPTION"
.PP
\fBXmDirection\fR is the data type specifying the direction in which
the system displays subwidgets, children of
widgets, or other visual components that are to be laid out\&.
This data type also affects traversal order within tab groups\&.
.PP
\fBXmDirection\fR is implemented as an unsigned char bit mask\&.
The horizontal and vertical directions can be specified independent of
each other\&. \fBXmDirection\fR also specifies the precedence of the
horizontal and vertical directions relative to each other\&. For
example, a value of \fBXmRIGHT_TO_LEFT_TOP_TO_BOTTOM\fP lays out a
component horizontally from right to left first, then vertically
top to bottom\&.
.PP
\fBXmDirection\fR provides the following masks, each of which
corresponds to a particular bit in \fBXmDirection\fR:
.IP "   \(bu" 6
\fBXmRIGHT_TO_LEFT_MASK\fP
.IP "   \(bu" 6
\fBXmLEFT_TO_RIGHT_MASK\fP
.IP "   \(bu" 6
\fBXmTOP_TO_BOTTOM_MASK\fP
.IP "   \(bu" 6
\fBXmBOTTOM_TO_TOP_MASK\fP
.IP "   \(bu" 6
\fBXmPRECEDENCE_HORIZ_MASK\fP
.IP "   \(bu" 6
\fBXmPRECEDENCE_VERT_MASK\fP
.PP
In addition to the preceding single bit masks, \fBXmDirection\fR
also provides the following multiple bit masks\&. These multiple
bit masks are particularly useful as arguments to
\fBXmDirectionMatchPartial\fP:
.IP "   \(bu" 6
\fBXmHORIZONTAL_MASK\fP
.IP "   \(bu" 6
\fBXmPRECEDENCE_MASK\fP
.IP "   \(bu" 6
\fBXmVERTICAL_MASK\fP
.PP
Motif also provides the following enumerated constants for
specifying various combinations of directions:
.IP "\fBXmRIGHT_TO_LEFT_TOP_TO_BOTTOM\fP" 10
Specifies that the components are laid out from right to left first, then
top to bottom\&.
.IP "\fBXmLEFT_TO_RIGHT_TOP_TO_BOTTOM\fP" 10
Specifies that the components are laid out from left to right first, then
top to bottom\&.
.IP "\fBXmRIGHT_TO_LEFT_BOTTOM_TO_TOP\fP" 10
Specifies that the components are laid out from right to left first, then
bottom to top\&.
.IP "\fBXmLEFT_TO_RIGHT_BOTTOM_TO_TOP\fP" 10
Specifies that the components are laid out from left to right first, then
bottom to top\&.
.IP "\fBXmTOP_TO_BOTTOM_RIGHT_TO_LEFT\fP" 10
Specifies that the components are laid out from top to bottom first, then
right to left\&.
.IP "\fBXmTOP_TO_BOTTOM_LEFT_TO_RIGHT\fP" 10
Specifies that the components are laid out from top to bottom first, then
left to right\&.
.IP "\fBXmBOTTOM_TO_TOP_RIGHT_TO_LEFT\fP" 10
Specifies that the components are laid out from bottom to top first, then
right to left\&.
.IP "\fBXmBOTTOM_TO_TOP_LEFT_TO_RIGHT\fP" 10
Specifies that the components are laid out from bottom to top first, then
left to right\&.
.IP "\fBXmTOP_TO_BOTTOM\fP" 10
Specifies that the components are laid out from top to bottom\&.
If horizontal direction is important, do not use this constant\&.
.IP "\fBXmBOTTOM_TO_TOP\fP" 10
Specifies that the components are laid out from bottom to top\&.
If horizontal direction is important, do not use this constant\&.
.IP "\fBXmDEFAULT_DIRECTION\fP" 10
Specifies that the components are laid out according to the default
direction\&. (This constant is primarily for widget writers\&.)
.IP "\fBXmLEFT_TO_RIGHT\fP" 10
Specifies that the components are laid out from left to right\&.
If vertical direction is important, do not use this constant\&.
.IP "\fBXmRIGHT_TO_LEFT\fP" 10
Specifies that the components are laid out from right to left\&.
If vertical direction is important, do not use this constant\&.
.SH "RELATED"
.PP
\fBXmDirectionMatch\fP(3), \fBXmDirectionMatchPartial\fP(3),
\fBXmDirectionToStringDirection\fP(3), \fBXmString\fP(3),
\fBXmStringDirection\fP(3), and
\fBXmStringDirectionToDirection\fP(3)\&.
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
