'\" t
...\" bil.sgm /main/7 1996/09/08 20:16:53 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "BIL" "special file"
.SH "NAME"
\fBBIL\fP \(em Builder Interface Language for the CDE Application Builder
.SH "SYNOPSIS"
.PP
.nf
\fB:bil-version\fP \fImajor minor\fP
\fB:project\fP \fIproject_name\fP
\fB(\fP
        \fIproject_attributes\fP
[\fB:connection\fP
\fB(\fP
        \fIconnection_attributes\fP
\fB)\fP]
\fB)\fP
\fB:module\fP \fImodule_name\fP
\fB(\fP
\fB:element\fP \fIelement_name\fP
\fB(\fP
        \fIelement_attributes\fP
        [\fIchildren\fP]
\fB)\fP
[\fB:connection\fP
\fB(\fP
        \fIconnection_attributes\fP
\fB)\fP]
\fB)\fP
.fi
.SH "DESCRIPTION"
.PP
BIL, the Builder Interface Language, is a specialized representation syntax
designed to meet the intermediate storage requirements of the CDE
Application Builder\&.
It describes the overall attributes of the application (also known as a
"project"), the modules that it contains, the elements that
comprise modules, and the behavioral relationships between objects
("connections")\&.
.PP
BIL is not a compiled language\&.
It is read and written as data by the CDE Application Builder and its
associated code generator\&.
Even so, the format of BIL is printable ASCII characters with a
"human readable" nature, making it possible for users to examine
the contents of a BIL-formatted file and to process a BIL file
using simple ASCII string-oriented tools and techniques\&.
.PP
Two distinct types of BIL files are recognized by the CDE Application
Builder\&.
One type is known as a
\fIproject file\fP, and is used to describe overall attributes of the project (application)
as well as identify the modules that comprise it\&.
It will also contain any cross-module information, such as connections
that bind together objects in different modules\&.
.PP
A second type of BIL file exists for each module and is known as a
\fImodule file\fP\&. It contains all module-specific information, including definition of
the elements that comprise the module and connections that exist within
it\&.
.PP
BIL is structured in an object-oriented fashion\&.
Objects are defined and named, and sets of parenthesis are used to
enclose declarations of all the object\&'s attributes\&.
Object types recognized by BIL include project, module, element
and connection\&.
.IP ":bil-version major minor" 10
Version information is useful to the CDE Application Builder and
code generators in determining how to handle BIL files that may
date from earlier releases\&.
.IP ":project project_name" 10
The
\fB:project\fP directive names the project (application)\&.
It encloses a declaration of \fIproject_attributes\fP
as well as a list of any cross-module \fIconnections\fP
that may exist within the project\&.
.IP ":module module_name" 10
The
\fB:module\fP directive names a module\&.
It encloses a declaration of all \fIelements\fP that comprise the
module as well as a list of any \fIconnections\fP
that may exist within the module\&.
.IP ":element element_name" 10
The
\fB:element\fP directive names an element\&.
It encloses a declaration of all \fIelement_attributes\fP,
including a list of any \fIchildren\fP that may be part of the
element\&.
.IP ":connection" 10
The
\fB:connection\fP directive names a connection and
specifies its attributes\&.
It can occur as part of a
\fIproject\fP or a
\fImodule\fP\&.
.IP ":children" 10
The
\fB:children\fP directive appears as an attribute of any
element which contains ("parents") other
elements\&.
It encloses a list of all child elements,
referencing each by its element name\&.
.IP "" 10
Project, element and connection attributes take the form:
\fB:\fP\fIattribute_name\fP \fIattribute_value\fP
Where \fIattribute_name\fP is an attribute appropriate for the project,
element or connection, and \fIattribute_value\fP is typed according to the
attribute\&.
Attribute types include integer, string, object name, and keyword, where
the keyword is one of a fixed list used by BIL to identify specific
data values (e\&.g\&. :true, :none)\&.
Some attribute values are ordered N-tuples, in which case the
complete set is enclosed in parentheses\&.
.IP "" 10
Comments may be placed in a BIL file by starting a line with two slashes (//)\&.
Any comments that occur in a BIL file prior to the
\fB:bil-version\fP line will be preserved by the
CDE Application Builder
across successive updates to the file\&.
Comments that occur after the
\fB:bil-version\fP line will not be retained\&.
.SH "RETURN VALUE"
.PP
None\&.
.SH "EXAMPLES"
.PP
The following is an example of a project file:
.PP
.nf
\f(CW:bil-version    1 0
:project todotool
(
    :files      (main_window\&.bil task_dialog\&.bil)

:connection
(
    :from       main_window\&.add_item_btn
    :to task_dialog\&.task_dialog
    :when       :activate
    :action-type        :builtin
    :action     :show
    :arg-type   :void
)
)\fR
.fi
.PP
.PP
A typical module file would contain:
.PP
.nf
\f(CW:bil-version    1 0
:module task_dialog
(

:element        task_dialog
(
    :type       :dialog
    :x  649
    :y  499
    :width      354
    :height     57
    :bg-color   "white"
    :label      "Adding a New Task"
    :resizable  :true
    :has-footer :false
    :visible    :false
    :children   (
        ctrl_panel
        activate_panel)
)
:element        ctrl_panel
(
    :type       :container
    :container-type     :relative
    :x  0
    :y  0
    :width      354
    :height     57
    :visible    :true
    :border-frame       :none
    :north-attachment   (:obj task_dialog 0)
    :south-attachment   (:obj task_dialog 0)
    :east-attachment    (:obj task_dialog 0)
    :west-attachment    (:point 0 0)
    :children   (
        task)
)
:element        task
(
    :type       :text-field
    :text-type  :alphanumeric
    :x  28
    :y  6
    :width      -1
    :height     -1
    :border-frame       :none
    :label-type :string
    :label      "Task:"
    :label-position     :west
    :num-columns        32
    :max-length 80
    :read-only  :false
    :active     :true
    :visible    :true
    :north-attachment   (:point 0 6)
    :south-attachment   (:none 0 0)
    :east-attachment    (:none 0 0)
    :west-attachment    (:point 0 28)
)
:element        activate_panel
(
    :type       :container
    :container-type     :activate
    :x  -1
    :y  -1
    :width      -1
    :height     -1
    :visible    :true
    :border-frame       :etched-in
    :children   (
        ok_button
        cancel_button
        help_button)
)
:element        ok_button
(
    :type       :button
    :button-type        :push-button
    :x  -1
    :y  -1
    :width      -1
    :height     -1
    :border-frame       :none
    :label-type :string
    :label-alignment    :center
    :label      "OK"
    :active     :true
    :visible    :true
    :north-attachment   (:grid-line 5 0)
    :south-attachment   (:grid-line 95 0)
    :east-attachment    (:grid-line 30 0)
    :west-attachment    (:grid-line 10 0)
)
:element        cancel_button
(
    :type       :button
    :button-type        :push-button
    :x  -1
    :y  -1
    :width      -1
    :height     -1
    :border-frame       :none
    :label-type :string
    :label-alignment    :center
    :label      "Cancel"
    :active     :true
    :visible    :true
    :north-attachment   (:grid-line 5 0)
    :south-attachment   (:grid-line 95 0)
    :east-attachment    (:grid-line 60 0)
    :west-attachment    (:grid-line 40 0)
)
:element        help_button
(
    :type       :button
    :button-type        :push-button
    :x  -1
    :y  -1
    :width      -1
    :height     -1
    :border-frame       :none
    :label-type :string
    :label-alignment    :center
    :label      "Help"
    :active     :true
    :visible    :true
    :north-attachment   (:grid-line 5 0)
    :south-attachment   (:grid-line 95 0)
    :east-attachment    (:grid-line 90 0)
    :west-attachment    (:grid-line 70 0)
)
:connection
(
    :from       ok_button
    :to task_dialog
    :when       :activate
    :action-type        :builtin
    :action     :hide
    :arg-type   :void
)
:connection
(
    :from       cancel_button
    :to task_dialog
    :when       :activate
    :action-type        :builtin
    :action     :hide
    :arg-type   :void
)
:connection
(
    :from       ok_button
    :when       :create
    :action-type        :call-function
    :action     confirm_taskCB
    :arg-type   :void
)
:connection
(
    :from       cancel_button
    :when       :create
    :action-type        :call-function
    :action     cancel_taskCB
    :arg-type   :void
)
)\fR
.fi
.PP
.SH "APPLICATION USAGE"
.PP
Applications and application developers typically do not work
directly with BIL files, instead using them indirectly through
the CDE Application Builder\&.
It may, however, be useful for them to understand the layout and
scope of BIL to satisfy particular application development needs
(e\&.g\&. to add specialized comments to BIL files or to examine them
to examine useful information (such as help text built-into a
application))\&.
.SH "SEE ALSO"
.PP
\fBdtbuilder\fP(1) \fBdtcodegen\fP(1)
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
