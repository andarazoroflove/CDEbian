'\" t
...\" mt-libtt.sgm /main/4 1996/08/30 15:17:54 rws $
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "mt-libtt-intro" "special file"
.SH "NAME"
mt-libtt-intro \(em introduction to multi-thread safe ToolTalk library\&.
.SH "DESCRIPTION"
.PP
To enable developers to write multithreaded applications, the \fBTt/tt_c\&.h\fP header defines the following features:
.PP
.nf
\f(CW    typedef enum tt_feature {
        _TT_FEATURE_MULTITHREADED = 1,  // Thread-safety
        _TT_FEATURE_LAST                // Enum end marker
    } Tt_feature;\fR
.fi
.PP
.PP
Note that the \fBTT_FEATURE_MULTITHREADED\fP
value is part of the \fBlibtt\fP binary interface\&.
.PP
These features are accessed by calling code with corresponding
\fB#define\fP constants:
.PP
.nf
\f(CW#define TT_FEATURE_MULTITHREADED _TT_FEATURE_MULTITHREADED\fR
.fi
.PP
.PP
Developers can write multi-threaded applications for ToolTalk without
managing locks around ToolTalk resources explicitly in application code\&.
Note that threading inside ToolTalk is not supported\&.
.PP
An extended version of the \fBXthreads\&.h\fP thread API
wrappers has been used so that multithreaded \fBlibtt\fP
is easily portable to various thread implementations\&.
.PP
A process-wide lock is used to protect internal
\fBlibtt\fP resources\&. Because few applications spend a
significant amount of their time in \fBlibtt\fP, a more
fine-grained locking approach is not required\&.
.PP
A few ToolTalk global values, such as the default
\fBprocid\fP and the storage stack manipulated by the
\fBtt_mark\fP and \fBtt_release\fP calls,
must have a consistent state as seen by one thread across ToolTalk API
calls\&. These global values have been made into thread-specific data\&. The calls
described below are used to initialize this behavior and manipulate the new
data\&. The other API calls have been modified to reference the
thread-specific value instead of the process-wide value when a
thread-specific value has been set for the current thread\&. If no
thread-specific value has been set for the current thread, the
process-wide value is used\&.
.PP
The following ToolTalk API calls implement support for
multithreaded \fBlibtt\fP:
.IP "\fBtt_feature_enabled\fP" 10
Queries the ToolTalk service to see if a specified feature has been
enabled\&. This allows \fBlibtt\fP to determine if
multithreaded execution has been enabled by the main program, and to
modify its behavior accordingly\&.
.IP "\fBtt_feature_required\fP" 10
Declares a feature to be required by the calling code\&. If the feature is
available, \fBtt_feature_required\fP enables it\&. If the
feature requires the ToolTalk service to perform some initialization
(for example, \fBTT_FEATURE_MULTITHREADED\fP), the
initialization is performed in this call\&. Some features (such as
\fBTT_FEATURE_MULTITHREADED\fP)
require this call to be made before calling
\fBtt_open\fP\&.
.IP "\fBtt_procid_session\fP" 10
Returns the identifier of the session in which a
specified procid was opened\&.
.IP "\fBtt_thread_procid\fP" 10
Returns the current default procid for the currently-active thread\&.
If there is no default procid set for the thread, then the process
default procid is returned\&.
.IP "\fBtt_thread_procid_set\fP" 10
Sets the default procid for the currently active thread\&.
The default procid is an implicit argument to most ToolTalk API calls\&.
.IP "\fBtt_thread_session\fP" 10
Retrieves the default session identifier for the currently active
thread\&. If there is no default session set for the currently-active
thread, then the process default session identifier is returned\&.
.IP "\fBtt_thread_session_set\fP" 10
Sets the default session identifier for the currently active thread\&. The
ToolTalk service uses the initial user session as the default session
and supports one session per procid\&. The application can make this call
before it calls \fBtt_open\fP to specify which session it
wants to connect to in the active thread\&.
.PP
Note that since the multithreaded feature may not be available on all
platforms, the \fBtt_feature_enabled\fP function is
provided to query for the existence of the feature\&. The intent is that
even platforms that do not enable the multithreaded feature should
implement the thread-related calls, returning \fBTT_ERR_UNIMP\fP\&. This allows a run-time check
without unresolved symbol problems\&.
.SH "SEE ALSO"
.PP
\fBTt/tt_c\&.h - Tttt_c\fP(5),
\fBtt_feature_enabled\fP(3),
\fBtt_feature_required\fP(3),
\fBtt_procid_session\fP(3),
\fBtt_thread_procid\fP(3),
\fBtt_thread_procid_set\fP(3),
\fBtt_thread_session\fP(3),
\fBtt_thread_session\fP(3)
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
