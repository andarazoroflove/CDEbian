'\" t
...\" Tttttk.sgm /main/6 1996/08/31 14:47:22 rws $
...\" Tttttk.sgm /main/6 1996/08/31 14:47:22 rws $-->
.de P!
.fl
\!!1 setgray
.fl
\\&.\"
.fl
\!!0 setgray
.fl			\" force out current output buffer
\!!save /psv exch def currentpoint translate 0 0 moveto
\!!/showpage{}def
.fl			\" prolog
.sy sed -e 's/^/!/' \\$1\" bring in postscript file
\!!psv restore
.
.de pF
.ie     \\*(f1 .ds f1 \\n(.f
.el .ie \\*(f2 .ds f2 \\n(.f
.el .ie \\*(f3 .ds f3 \\n(.f
.el .ie \\*(f4 .ds f4 \\n(.f
.el .tm ? font overflow
.ft \\$1
..
.de fP
.ie     !\\*(f4 \{\
.	ft \\*(f4
.	ds f4\"
'	br \}
.el .ie !\\*(f3 \{\
.	ft \\*(f3
.	ds f3\"
'	br \}
.el .ie !\\*(f2 \{\
.	ft \\*(f2
.	ds f2\"
'	br \}
.el .ie !\\*(f1 \{\
.	ft \\*(f1
.	ds f1\"
'	br \}
.el .tm ? font underflow
..
.ds f1\"
.ds f2\"
.ds f3\"
.ds f4\"
.ta 8n 16n 24n 32n 40n 48n 56n 64n 72n 
.TH "Tt/tttk\&.h" "file formats"
.SH "NAME"
\fBTt/tttk\&.h\fP \(em ToolTalk definitions
.SH "SYNOPSIS"
.PP
.nf
#include <Tt/tttk\&.h>
.fi
.SH "DESCRIPTION"
.PP
The
\fBTt/tttk\&.h\fP header defines the following enumeration data type,
with at least the following members:
.IP "\fBTttk_op\fR" 10
\fBTTDT_CREATED\fP,
\fBTTDT_DELETED\fP,
\fBTTDT_DO_COMMAND\fP,
\fBTTDT_GET_ENVIRONMENT\fP,
\fBTTDT_GET_GEOMETRY\fP,
\fBTTDT_GET_ICONIFIED\fP,
\fBTTDT_GET_LOCALE\fP,
\fBTTDT_GET_MAPPED\fP,
\fBTTDT_GET_MODIFIED\fP,
\fBTTDT_GET_SITUATION\fP,
\fBTTDT_GET_STATUS\fP,
\fBTTDT_GET_SYSINFO\fP,
\fBTTDT_GET_XINFO\fP,
\fBTTDT_LOWER\fP,
\fBTTDT_MODIFIED\fP,
\fBTTDT_MOVED\fP,
\fBTTDT_OP_LAST\fP,
\fBTTDT_OP_NONE\fP,
\fBTTDT_PAUSE\fP,
\fBTTDT_QUIT\fP,
\fBTTDT_RAISE\fP,
\fBTTDT_RESUME\fP,
\fBTTDT_REVERT\fP,
\fBTTDT_REVERTED\fP,
\fBTTDT_SAVE\fP,
\fBTTDT_SAVED\fP,
\fBTTDT_SET_ENVIRONMENT\fP,
\fBTTDT_SET_GEOMETRY\fP,
\fBTTDT_SET_ICONIFIED\fP,
\fBTTDT_SET_LOCALE\fP,
\fBTTDT_SET_MAPPED\fP,
\fBTTDT_SET_SITUATION\fP,
\fBTTDT_SET_XINFO\fP,
\fBTTDT_SIGNAL\fP,
\fBTTDT_STARTED\fP,
\fBTTDT_STATUS\fP,
\fBTTDT_STOPPED\fP,
\fBTTME_ABSTRACT\fP,
\fBTTME_COMPOSE\fP,
\fBTTME_DEPOSIT\fP,
\fBTTME_DISPLAY\fP,
\fBTTME_EDIT\fP,
\fBTTME_INSTANTIATE\fP,
\fBTTME_INTERPRET\fP,
\fBTTME_MAIL\fP,
\fBTTME_MAIL_COMPOSE\fP,
\fBTTME_MAIL_EDIT\fP,
\fBTTME_PRINT\fP,
\fBTTME_TRANSLATE\fP
.PP
The header declares the following global
string constants for some standard vtypes:
.PP
.nf
extern const char  *Tttk_boolean:
extern const char  *Tttk_file:
extern const char  *Tttk_height:
extern const char  *Tttk_integer:
extern const char  *Tttk_message_id:
extern const char  *Tttk_string:
extern const char  *Tttk_title:
extern const char  *Tttk_width:
extern const char  *Tttk_xoffset:
extern const char  *Tttk_yoffset:
.fi
.PP
The header declares the following as functions:
.PP
.nf
int ttdt_Get_Modified(Tt_message \fIcontext\fP,
        const char *\fIpathname\fP,
        Tt_scope \fIthe_scope\fP,
        XtAppContext \fIapp2run\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_status ttdt_Revert(Tt_message \fIcontext\fP,
        const char *\fIpathname\fP,
        Tt_scope \fIthe_scope\fP,
        XtAppContext \fIapp2run\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_status ttdt_Save(Tt_message \fIcontext\fP,
        const char *\fIpathname\fP,
        Tt_scope \fIthe_scope\fP,
        XtAppContext \fIapp2run\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_status ttdt_close(const char *\fIprocid\fP,
        const char *\fInew_procid\fP,
        int \fIsendStopped\fP);
.fi
.PP
.nf
Tt_status ttdt_file_event(Tt_message \fIcontext\fP,
        Tttk_op \fIevent\fP,
        Tt_pattern *\fIpatterns\fP,
        int \fIsend\fP);
.fi
.PP
.nf
Tt_pattern *ttdt_file_join(const char *\fIpathname\fP,
        Tt_scope \fIthe_scope\fP,
        int \fIjoin\fP,
        Ttdt_file_cb \fIcb\fP,
        void *\fIclientdata\fP);
.fi
.PP
.nf
Tt_message ttdt_file_notice(Tt_message \fIcontext\fP,
        Tttk_op \fIop\fP,
        Tt_scope \fIscope\fP,
        const char *\fIpathname\fP,
        int \fIsend_and_destroy\fP);
.fi
.PP
.nf
Tt_status ttdt_file_quit(Tt_pattern *\fIpatterns\fP,
        int \fIquit\fP);
.fi
.PP
.nf
Tt_message ttdt_file_request(Tt_message \fIcontext\fP,
        Tttk_op \fIop\fP,
        Tt_scope \fIscope\fP,
        const char *\fIpathname\fP,
        Ttdt_file_cb \fIcb\fP,
        void *\fIclient_data\fP,
        int \fIsend_and_destroy\fP);
.fi
.PP
.nf
Tt_pattern *ttdt_message_accept(Tt_message \fIcontract\fP,
        Ttdt_contract_cb \fIcb\fP,
        Widget \fIshell\fP,
        void *\fIclientdata\fP,
        int \fIaccept\fP,
        int \fIsendStatus\fP);
.fi
.PP
.nf
char *ttdt_open(int *\fIttfd\fP,
        const char *\fItoolname\fP,
        const char *\fIvendor\fP,
        const char *\fIversion\fP,
        int \fIsendStarted\fP);
.fi
.PP
.nf
Tt_status ttdt_sender_imprint_on(const char *\fIhandler\fP,
        Tt_message \fIcontract\fP,
        char **\fIdisplay\fP,
        int *\fIwidth\fP,
        int *\fIheight\fP,
        int *\fIxoffset\fP,
        int *\fIyoffset\fP,
        XtAppContext \fIapp2run\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_pattern *ttdt_session_join(const char *\fIsessid\fP,
        Ttdt_contract_cb \fIcb\fP,
        Widget \fIshell\fP,
        void *\fIclientdata\fP,
        int \fIjoin\fP);
.fi
.PP
.nf
Tt_status ttdt_session_quit(const char *\fIsessid\fP,
        Tt_pattern *\fIsess_pats\fP,
        int \fIquit\fP);
.fi
.PP
.nf
Tt_pattern *ttdt_subcontract_manage(Tt_message \fIsubcontract\fP,
        Ttdt_contract_cb \fIcb\fP,
        Widget \fIshell\fP,
        void *\fIclientdata\fP);
.fi
.PP
.nf
Tt_status ttmedia_Deposit(Tt_message \fIload_contract\fP,
        const char *\fIbuffer_id\fP,
        const char *\fImedia_type\fP,
        const unsigned char *\fInew_contents\fP,
        int \fInew_len\fP,
        const char *\fIpathname\fP,
        XtAppContext \fIapp2run\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_message ttmedia_load(Tt_message \fIcontext\fP,
        Ttmedia_load_msg_cb \fIcb\fP,
        void *\fIclientdata\fP,
        Tttk_op \fIop\fP,
        const char *\fImedia_type\fP,
        const unsigned char *\fIcontents\fP,
        int \fIlen\fP,
        const char *\fIfile\fP,
        const char *\fIdocname\fP,
        int \fIsend\fP);
.fi
.PP
.nf
Tt_message ttmedia_load_reply(Tt_message \fIcontract\fP,
        const unsigned char *\fInew_contents\fP,
        int \fInew_len\fP,
        int \fIreply_and_destroy\fP);
.fi
.PP
.nf
Tt_status ttmedia_ptype_declare(const char *\fIptype\fP,
        int \fIbase_opnum\fP,
        Ttmedia_load_pat_cb \fIcb\fP,
        void *\fIclientdata\fP,
        int \fIdeclare\fP);
.fi
.PP
.nf
void tttk_Xt_input_handler(XtPointer \fIprocid\fP,
        int *\fIsource\fP,
        XtInputId *\fIid\fP);
.fi
.PP
.nf
Tt_status tttk_block_while(XtAppContext \fIapp2run\fP,
        const int *\fIblocked\fP,
        int \fIms_timeout\fP);
.fi
.PP
.nf
Tt_status tttk_message_abandon(Tt_message \fImsg\fP);
.fi
.PP
.nf
Tt_message tttk_message_create(Tt_message \fIcontext\fP,
        Tt_class \fIthe_class\fP,
        Tt_scope \fIthe_scope\fP,
        const char *\fIhandler\fP,
        const char *\fIop\fP,
        Tt_message_callback \fIcallback\fP);
.fi
.PP
.nf
Tt_status tttk_message_destroy(Tt_message \fImsg\fP);
.fi
.PP
.nf
Tt_status tttk_message_fail(Tt_message \fImsg\fP,
        Tt_status \fIstatus\fP,
        const char *\fIstatus_string\fP,
        int \fIdestroy\fP);
.fi
.PP
.nf
Tt_status tttk_message_reject(Tt_message \fImsg\fP,
        Tt_status \fIstatus\fP,
        const char *\fIstatus_string\fP,
        int \fIdestroy\fP);
.fi
.PP
.nf
char *tttk_op_string(Tttk_op \fIopcode\fP);
.fi
.PP
.nf
Tttk_op tttk_string_op(const char *\fIopstring\fP);
.fi
...\" created by instant / docbook-to-man, Sun 02 Sep 2012, 09:41
