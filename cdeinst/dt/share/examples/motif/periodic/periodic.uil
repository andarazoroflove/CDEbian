! 
! (c) Copyright 1989, 1990, 1991, 1992 OPEN SOFTWARE FOUNDATION, INC. 
! ALL RIGHTS RESERVED 
! 
! 
! Motif Release 1.2
! 
!   $XConsortium: periodic.uil /main/3 1995/10/27 10:44:20 rswiston $
!******************************************************************************


module periodic 
    version = 'v1.2'
    names = case_sensitive
    character_set=iso_latin1
    objects = {
	XmLabel = widget;
	XmPushButton = widget;
	XmToggleButton = widget;
	XmCascadeButton = widget;
	XmSeparator = widget;
    }

include file ("periodic_local.uil");

procedure
	ManageCb(string);
	UnmapCb();
	UnmanageCb(string);
	ShowCb(string);
	InitPopupCb(string);
	PopdownCb();
	DaExposeCb();
	DaResizeCb();
	DbExposeCb();
	DbResizeCb();
	ScaleCb();
	SetScaleCb(integer);
	ViewCb();
	LayoutCb();
	ToggleLightsCb();
	ExitCb();

value
	x0 : 0;
	x1 : 5;
	x2 : 10;
	x3 : 15;
	x4 : 20;
	x5 : 25;
	x6 : 30;
	x7 : 35;
	x8 : 40;

	y0 : 0;
	y1 : 8;
	y2 : 16;
	y3 : 24;
	y4 : 32;
	y5 : 40;

value
	boxMarginWidth : 5;
	boxMarginHeight : 5;

list formArgs : arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNbottomAttachment = XmATTACH_POSITION;
};

list titleArgs : arguments {
	XmNchildType = XmFRAME_TITLE_CHILD;
	XmNchildHorizontalSpacing = 4;
	XmNchildVerticalAlignment = XmALIGNMENT_WIDGET_BOTTOM;
};

list toggleArgs : arguments {
	XmNfillOnSelect = true;
	XmNindicatorOn = false;
	XmNshadowThickness = 1;
};




!
! Main window
!
object appMain : XmMainWindow {
    arguments {
	XmNmenuBar = XmMenuBar menuBar;
    };
    controls {
	XmMenuBar menuBar;
	XmFrame {
	    arguments {
		XmNmarginWidth = 20;
		XmNmarginHeight = 20;
	    };
	    controls { XmForm workArea; };
	};
	unmanaged XmFileSelectionDialog fileDialog;
	unmanaged XmSelectionDialog selectDialog;
	unmanaged XmTemplateDialog templateDialog;
	unmanaged XmInformationDialog infoDialog;
	unmanaged XmWarningDialog warningDialog;
	unmanaged XmErrorDialog errorDialog;
	unmanaged XmQuestionDialog questionDialog;
	unmanaged XmWorkingDialog workingDialog;
	unmanaged XmPromptDialog promptDialog;
	unmanaged XmInformationDialog showDialog;
    };
};




!
! Menu bar and pulldown menus
!

object menuBar : XmMenuBar {
    arguments {
	XmNmenuHelpWidget = XmCascadeButton helpCascade;
    };
    controls {
	XmCascadeButton fileCascade;
	XmCascadeButton editCascade;
	XmCascadeButton viewCascade;
	XmCascadeButton optionsCascade;
	XmCascadeButton helpCascade;
    };
};

object fileCascade : XmCascadeButton {
    arguments {
	XmNlabelString = fileCascadeText;
	XmNmnemonic = keysym(fileCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton newButton;
	    XmPushButton openButton;
	    XmPushButton saveButton;
	    XmPushButton saveAsButton;
	    XmPushButton printButton;
	    XmPushButton exitButton;
	}; };
    };
};

object newButton : XmPushButton {
    arguments {
	XmNlabelString = newButtonText;
	XmNmnemonic = keysym(newButtonMnem);
    };
};
object openButton : XmPushButton {
    arguments {
	XmNlabelString = openButtonText;
	XmNmnemonic = keysym(openButtonMnem);
    };
};
object saveButton : XmPushButton {
    arguments {
	XmNlabelString = saveButtonText;
	XmNmnemonic = keysym(saveButtonMnem);
    };
};
object saveAsButton : XmPushButton {
    arguments {
	XmNlabelString = saveAsButtonText;
	XmNmnemonic = keysym(saveAsButtonMnem);
    };
};
object printButton : XmPushButton {
    arguments {
	XmNlabelString = printButtonText;
	XmNmnemonic = keysym(printButtonMnem);
    };
};
object exitButton : XmPushButton {
    arguments {
	XmNlabelString = exitButtonText;
	XmNmnemonic = keysym(exitButtonMnem);
    };
    callbacks { XmNactivateCallback = procedure ExitCb(); };
};

object editCascade : XmCascadeButton {
    arguments {
	XmNlabelString = editCascadeText;
	XmNmnemonic = keysym(editCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton undoButton;
	    XmSeparator { };
	    XmPushButton cutButton;
	    XmPushButton copyButton;
	    XmPushButton pasteButton;
	    XmSeparator { };
	    XmPushButton clearButton;
	    XmPushButton deleteButton;
	}; };
    };
};

object undoButton : XmPushButton {
    arguments {
	XmNlabelString = undoButtonText;
	XmNmnemonic = keysym(undoButtonMnem);
    };
};
object cutButton : XmPushButton {
    arguments {
	XmNlabelString = cutButtonText;
	XmNmnemonic = keysym(cutButtonMnem);
    };
};
object copyButton : XmPushButton {
    arguments {
	XmNlabelString = copyButtonText;
	XmNmnemonic = keysym(copyButtonMnem);
    };
};
object pasteButton : XmPushButton {
    arguments {
	XmNlabelString = pasteButtonText;
	XmNmnemonic = keysym(pasteButtonMnem);
    };
};
object clearButton : XmPushButton {
    arguments {
	XmNlabelString = clearButtonText;
	XmNmnemonic = keysym(clearButtonMnem);
    };
};
object deleteButton : XmPushButton {
    arguments {
	XmNlabelString = deleteButtonText;
	XmNmnemonic = keysym(deleteButtonMnem);
    };
};

object viewCascade : XmCascadeButton {
    arguments {
	XmNlabelString = viewCascadeText;
	XmNmnemonic = keysym(viewCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmToggleButton stackButton;
	    XmToggleButton tileButton;
	    XmSeparator { };
	    XmToggleButton dayButton;
	    XmToggleButton weekButton;
	    XmToggleButton monthButton;
	    XmToggleButton yearButton;
	}; };
    };
};

object stackButton : XmToggleButton {
    arguments {
	XmNlabelString = stackButtonText;
	XmNmnemonic = keysym(stackButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure LayoutCb(); };
};
object tileButton : XmToggleButton {
    arguments {
	XmNlabelString = tileButtonText;
	XmNmnemonic = keysym(tileButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure LayoutCb(); };
};
object dayButton : XmToggleButton {
    arguments {
	XmNlabelString = dayButtonText;
	XmNmnemonic = keysym(dayButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object weekButton : XmToggleButton {
    arguments {
	XmNlabelString = weekButtonText;
	XmNmnemonic = keysym(weekButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object monthButton : XmToggleButton {
    arguments {
	XmNlabelString = monthButtonText;
	XmNmnemonic = keysym(monthButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};
object yearButton : XmToggleButton {
    arguments {
	XmNlabelString = yearButtonText;
	XmNmnemonic = keysym(yearButtonMnem);
	XmNindicatorType = XmONE_OF_MANY;
    };
    callbacks { XmNvalueChangedCallback = procedure ViewCb(); };
};

object optionsCascade : XmCascadeButton {
    arguments {
	XmNlabelString = optionsCascadeText;
	XmNmnemonic = keysym(optionsCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmCascadeButton fontCascade;
	    XmCascadeButton directCascade;
	    XmToggleButton caseButton;
	    XmToggleButton wrapButton;
	}; };
    };
};

object fontCascade : XmCascadeButton {
    arguments {
	XmNlabelString = fontCascadeText;
	XmNmnemonic = keysym(fontCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton smallFontButton;
	    XmPushButton mediumFontButton;
	    XmPushButton largeFontButton;
	}; };
    };
};

object smallFontButton : XmPushButton {
    arguments {
	XmNlabelString = smallFontButtonText;
	XmNmnemonic = keysym(smallFontButtonMnem);
    };
};
object mediumFontButton : XmPushButton {
    arguments {
	XmNlabelString = mediumFontButtonText;
	XmNmnemonic = keysym(mediumFontButtonMnem);
    };
};
object largeFontButton : XmPushButton {
    arguments {
	XmNlabelString = largeFontButtonText;
	XmNmnemonic = keysym(largeFontButtonMnem);
    };
};

object directCascade : XmCascadeButton {
    arguments {
	XmNlabelString = directCascadeText;
	XmNmnemonic = keysym(directCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton upDirButton;
	    XmPushButton downDirButton;
	    XmPushButton leftDirButton;
	    XmPushButton rightDirButton;
	}; };
    };
};

object upDirButton : XmPushButton {
    arguments {
	XmNlabelString = upButtonText;
	XmNmnemonic = keysym(upButtonMnem);
    };
};
object downDirButton : XmPushButton {
    arguments {
	XmNlabelString = downButtonText;
	XmNmnemonic = keysym(downButtonMnem);
    };
};
object leftDirButton : XmPushButton {
    arguments {
	XmNlabelString = leftButtonText;
	XmNmnemonic = keysym(leftButtonMnem);
    };
};
object rightDirButton : XmPushButton {
    arguments {
	XmNlabelString = rightButtonText;
	XmNmnemonic = keysym(rightButtonMnem);
    };
};
object caseButton : XmToggleButton {
    arguments {
	XmNlabelString = caseButtonText;
	XmNmnemonic = keysym(caseButtonMnem);
    };
};
object wrapButton : XmToggleButton {
    arguments {
	XmNlabelString = wrapButtonText;
	XmNmnemonic = keysym(wrapButtonMnem);
    };
};

object helpCascade : XmCascadeButton {
    arguments {
	XmNlabelString = helpCascadeText;
	XmNmnemonic = keysym(helpCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton contextButton;
	    XmPushButton windowButton;
	    XmPushButton tutorButton;
	    XmPushButton versionButton;
	}; };
    };
};

object contextButton : XmPushButton {
    arguments {
	XmNlabelString = contextButtonText;
	XmNmnemonic = keysym(contextButtonMnem);
    };
};
object windowButton : XmPushButton {
    arguments {
	XmNlabelString = windowButtonText;
	XmNmnemonic = keysym(windowButtonMnem);
    };
};
object tutorButton : XmPushButton {
    arguments {
	XmNlabelString = tutorButtonText;
	XmNmnemonic = keysym(tutorButtonMnem);
    };
};
object versionButton : XmPushButton {
    arguments {
	XmNlabelString = versionButtonText;
	XmNmnemonic = keysym(versionButtonMnem);
    };
};




!
! Work area widgets
!

object workArea : XmForm {
    arguments {
	XmNfractionBase = 40;
    };
    controls {
	XmLabel titleLabel;
	XmLabel subtitleLabel;
	XmFrame separatorFrame;
	XmFrame arrowFrame;
	XmFrame pushFrame;
	XmFrame toggleFrame;
	XmFrame labelFrame;
	XmFrame optionFrame;
	XmFrame scaleFrame;
	XmFrame radioFrame;
	XmFrame textFrame;
	XmFrame commandFrame;
	XmFrame dialogFrame;
	XmFrame scrollFrame;
	XmFrame listFrame;
	XmFrame paneFrame;
	XmFrame popupFrame;
	XmFrame drawFrame;
	XmFrame drawBtnFrame;
    };
};

object titleLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNleftPosition = x1; XmNrightPosition = x7;
	XmNtopAttachment = XmATTACH_FORM;
	XmNlabelString = titleLabelText;
    };
};
object subtitleLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_POSITION;
	XmNrightAttachment = XmATTACH_POSITION;
	XmNleftPosition = x1; XmNrightPosition = x7;
	XmNtopAttachment = XmATTACH_WIDGET;
	XmNtopWidget = XmLabel titleLabel;
	XmNlabelString = subtitleLabelText;
    };
};

object separatorFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y0; XmNbottomPosition = y1;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = separatorFrameText;
	}; }; 
	XmSeparator { };
    };
};

object arrowFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = arrowFrameText;
	}; }; 
	XmForm {
	    arguments {
		XmNfractionBase = 3;
	    };
	    controls {
		XmArrowButton arrowB1;
		XmArrowButton arrowB2;
		XmArrowButton arrowB3;
		XmArrowButton arrowB4;
	    };
	};
    };
};

object arrowB1 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 0; XmNrightPosition = 1;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	XmNarrowDirection = XmARROW_LEFT;
	XmNshadowThickness = 0;
    };
};
object arrowB2 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 2; XmNrightPosition = 3;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	XmNarrowDirection = XmARROW_RIGHT;
	XmNshadowThickness = 0;
    };
};
object arrowB3 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 0; XmNbottomPosition = 1;
	XmNarrowDirection = XmARROW_UP;
	XmNshadowThickness = 0;
    };
};
object arrowB4 : XmArrowButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 2; XmNbottomPosition = 3;
	XmNarrowDirection = XmARROW_DOWN;
	XmNshadowThickness = 0;
    };
};

object pushFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x1; XmNrightPosition = x2;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = pushFrameText;
	}; }; 
	XmForm {
	    controls {
		XmPushButton { arguments {
		    XmNleftAttachment = XmATTACH_FORM;
		    XmNrightAttachment = XmATTACH_FORM;
		    XmNtopAttachment = XmATTACH_POSITION;
		    XmNtopPosition = 10;
		    XmNbottomAttachment = XmATTACH_POSITION;
		    XmNbottomPosition = 90;
		    XmNlabelString = pushButtonText;
		}; };
	    };
	};
    };
};

object toggleFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x1; XmNrightPosition = x2;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginWidth;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = toggleFrameText;
	}; }; 
	XmForm { controls { XmToggleButton toggleButton; }; };
    };
};

object toggleButton : XmToggleButton {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNtopPosition = 10;
	XmNbottomAttachment = XmATTACH_POSITION;
	XmNbottomPosition = 90;
	XmNlabelString = toggleButtonText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ToggleLightsCb();
    };
};

object labelFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x1;
	XmNtopPosition = y2; XmNbottomPosition = y3;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = labelFrameText;
	}; };
	XmForm { controls { XmLabel labelLabel; }; };
    };
};

object labelLabel : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNlabelString = labelText;
    };
};
 
object optionFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y2; XmNbottomPosition = y3;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = optionFrameText;
	}; };
	XmOptionMenu {
	    arguments {
		XmNlabelString = optionMenuText;
		XmNorientation = XmVERTICAL;
		XmNmnemonic = keysym(optionMenuMnem);
	    };
	    controls {
		XmPulldownMenu {
		    arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
		    controls {
			XmPushButton { arguments {
			    XmNlabelString = sundayButtonText;
			    XmNmnemonic = keysym(sundayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = mondayButtonText;
			    XmNmnemonic = keysym(mondayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = tuesdayButtonText;
			    XmNmnemonic = keysym(tuesdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = wednesdayButtonText;
			    XmNmnemonic = keysym(wednesdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = thursdayButtonText;
			    XmNmnemonic = keysym(thursdayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = fridayButtonText;
			    XmNmnemonic = keysym(fridayButtonMnem);
			}; };
			XmPushButton { arguments {
			    XmNlabelString = saturdayButtonText;
			    XmNmnemonic = keysym(saturdayButtonMnem);
			}; };
		    };
		};
	    };
	};
    };
};

object scaleFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x7;
	XmNtopPosition = y1; XmNbottomPosition = y2;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = scaleFrameText;
	}; };
	XmForm { controls { XmScale valueScale; }; };
    };
};

object valueScale : XmScale {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_POSITION;
	XmNtopPosition = 15;
	XmNshowValue = true;
	XmNminimum = scaleMinimum;
	XmNmaximum = scaleMaximum;
	XmNvalue = scaleValue;
	XmNdecimalPoints = 1;
	XmNtitleString = scaleTitleText;
	XmNorientation = XmHORIZONTAL;
    };
    callbacks {
	XmNdragCallback = procedure ScaleCb();
	XmNvalueChangedCallback = procedure ScaleCb();
    };
};

object radioFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y1; XmNbottomPosition = y2;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = radioFrameText;
	}; }; 
	XmRadioBox { 
	    arguments { XmNradioAlwaysOne = true; XmNspacing = 0; };
	    controls {
		XmToggleButton {
		    arguments {
			XmNlabelString = radio1Text; XmNset = true;
		    };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio1Value);
		    };
		};
		XmToggleButton {
		    arguments { XmNlabelString = radio2Text; };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio2Value);
		    };
		};
		XmToggleButton {
		    arguments { XmNlabelString = radio3Text; };
		    callbacks { XmNvalueChangedCallback = procedure
				SetScaleCb(radio3Value);
		    };
		};
	    };
	};
    };
};

object textFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x4; XmNrightPosition = x5;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = textFrameText;
	}; }; 
	XmText { arguments {
	    XmNeditMode = XmMULTI_LINE_EDIT;
	}; };
    };
};

object scrollFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x3; XmNrightPosition = x4;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = scrollFrameText;
	}; }; 
	XmForm {
	    controls {
		XmScrollBar { arguments {
		    XmNleftAttachment = XmATTACH_FORM;
		    XmNrightAttachment = XmATTACH_FORM;
		    XmNbottomAttachment = XmATTACH_POSITION;
		    XmNbottomPosition = 50;
		    XmNtraversalOn = true;
		    XmNhighlightThickness = 2;
		    XmNorientation = XmHORIZONTAL;
		}; };
	    };
	};
    };
};

object listFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x7;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = listFrameText;
	}; }; 
	XmScrolledList { arguments {
	    XmNitems = greekAlphabet;
	}; };
    };
};

object paneFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x6; XmNrightPosition = x8;
	XmNtopPosition = y3; XmNbottomPosition = y5;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = paneFrameText;
	}; }; 
	XmPanedWindow { controls {
	    XmScrolledText { arguments {
		XmNvalue = pane1Text;
		XmNeditMode = XmMULTI_LINE_EDIT;
	    }; };
	    XmScrolledText { arguments {
		XmNvalue = pane2Text;
		XmNeditMode = XmMULTI_LINE_EDIT;
	    }; };
	}; };
    };
};

object popupFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x7; XmNrightPosition = x8;
	XmNtopPosition = y0; XmNbottomPosition = y1;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = popupFrameText;
	}; };
	XmForm { controls { XmLabel popupWindow; }; };
    };
};

object popupWindow : XmLabel {
    arguments {
	XmNleftAttachment = XmATTACH_FORM;
	XmNrightAttachment = XmATTACH_FORM;
	XmNtopAttachment = XmATTACH_FORM;
	XmNbottomAttachment = XmATTACH_FORM;
	XmNborderWidth = 1;
	XmNlabelString = popupWindowText;
	XmNtraversalOn = true;
    };
    controls { unmanaged XmPopupMenu popupMenu; };
};

object popupMenu : XmPopupMenu {
    arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
    controls {
	XmLabel { arguments { XmNlabelString = popupTitleText; }; };
	XmSeparator { arguments { XmNseparatorType = XmDOUBLE_LINE; }; };
	XmPushButton {
	    arguments {
		XmNlabelString = popupUndoText;
		XmNmnemonic = keysym(popupUndoMnem);
	    };
	};
	XmSeparator { };
	XmPushButton {
	    arguments {
		XmNlabelString = popupCutText;
		XmNmnemonic = keysym(popupCutMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupCopyText;
		XmNmnemonic = keysym(popupCopyMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupPasteText;
		XmNmnemonic = keysym(popupPasteMnem);
	    };
	};
	XmSeparator { };
	XmPushButton {
	    arguments {
		XmNlabelString = popupClearText;
		XmNmnemonic = keysym(popupClearMnem);
	    };
	};
	XmPushButton {
	    arguments {
		XmNlabelString = popupDeleteText;
		XmNmnemonic = keysym(popupDeleteMnem);
	    };
	};
    };
    callbacks {
	MrmNcreateCallback = procedure InitPopupCb("*popupWindow");
	XmNpopdownCallback = procedure PopdownCb();
    };
};

object drawFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x5; XmNrightPosition = x6;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = drawFrameText;
	}; };
	XmFrame {
	    arguments {
		XmNshadowType = XmSHADOW_IN;
		XmNshadowThickness = 2;
	    };
	    controls { XmDrawingArea drawArea; };
	};
    };
};

object drawArea : XmDrawingArea {
    arguments {
	XmNtraversalOn = false;
    };
    callbacks {
	XmNexposeCallback = procedure DaExposeCb();
	XmNresizeCallback = procedure DaResizeCb();
    };
};

object drawBtnFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x3;
	XmNtopPosition = y2; XmNbottomPosition = y3;
	XmNmarginWidth = 2 * boxMarginWidth;
	XmNmarginHeight = 2 * boxMarginHeight;
    };
    controls {
	XmLabel  { arguments {
	    arguments titleArgs;
	    XmNlabelString = drawBtnFrameText;
	}; }; 
	XmDrawnButton drawnButton;
    };
};

object drawnButton : XmDrawnButton {
   arguments {
	XmNpushButtonEnabled = true;
    };
    callbacks {
	XmNexposeCallback = procedure DbExposeCb();
	XmNresizeCallback = procedure DbResizeCb();
	XmNactivateCallback = procedure ShowCb("*showDialog");
    };
};

object commandFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x0; XmNrightPosition = x2;
	XmNtopPosition = y3; XmNbottomPosition = y5;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = commandFrameText;
	}; };
	XmCommand { 
	    arguments {
		XmNmarginWidth = 4;
		XmNmarginHeight = 4;
		XmNhistoryMaxItems = 20;
		XmNpromptString = commandPromptText;
	    };
	};
    };
};

object dialogFrame : XmFrame {
    arguments {
	arguments formArgs;
	XmNleftPosition = x2; XmNrightPosition = x6;
	XmNtopPosition = y3; XmNbottomPosition = y5;
	XmNmarginWidth = boxMarginWidth;
	XmNmarginHeight = boxMarginHeight;
    };
    controls {
	XmLabel { arguments {
	    arguments titleArgs;
	    XmNlabelString = dialogFrameText;
	}; };
	XmForm dialogForm;
    };
};

object dialogForm : XmForm {
    arguments {
	XmNfractionBase = 3;
    };
    controls {
	XmToggleButton templatePick;
	XmToggleButton infoPick;
	XmToggleButton warningPick;
	XmToggleButton errorPick;
	XmToggleButton questionPick;
	XmToggleButton workingPick;
	XmToggleButton filePick;
	XmToggleButton selectPick;
	XmToggleButton promptPick;
    };
};

object templatePick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 0; XmNrightPosition = 1;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	arguments toggleArgs;
	XmNlabelString = templatePickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*templateDialog");
    };
};
object infoPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 0; XmNbottomPosition = 1;
	arguments toggleArgs;
	XmNlabelString = infoPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*infoDialog");
    };
};
object warningPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	arguments toggleArgs;
	XmNlabelString = warningPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*warningDialog");
    };
};
object errorPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 0; XmNrightPosition = 1;
	XmNtopPosition = 0; XmNbottomPosition = 1;
	arguments toggleArgs;
	XmNlabelString = errorPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*errorDialog");
    };
};
object questionPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 2; XmNrightPosition = 3;
	XmNtopPosition = 0; XmNbottomPosition = 1;
	arguments toggleArgs;
	XmNlabelString = questionPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*questionDialog");
    };
};
object workingPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 2; XmNrightPosition = 3;
	XmNtopPosition = 1; XmNbottomPosition = 2;
	arguments toggleArgs;
	XmNlabelString = workingPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*workingDialog");
    };
};
object filePick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 0; XmNrightPosition = 1;
	XmNtopPosition = 2; XmNbottomPosition = 3;
	arguments toggleArgs;
	XmNlabelString = filePickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*fileDialog");
    };
};
object selectPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 2; XmNrightPosition = 3;
	XmNtopPosition = 2; XmNbottomPosition = 3;
	arguments toggleArgs;
	XmNlabelString = selectPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*selectDialog");
    };
};
object promptPick : XmToggleButton {
    arguments {
	arguments formArgs;
	XmNleftPosition = 1; XmNrightPosition = 2;
	XmNtopPosition = 2; XmNbottomPosition = 3;
	arguments toggleArgs;
	XmNlabelString = promptPickText;
    };
    callbacks {
	XmNvalueChangedCallback = procedure ManageCb("*promptDialog");
    };
};




!
! Dialog widgets
!

object templateDialog : XmTemplateDialog{
    arguments {
	XmNokLabelString = templateOkText;
	XmNcancelLabelString = templateCancelText;
	XmNdialogTitle = templateTitleText;
	XmNautoUnmanage = false;
    };
    controls {
	XmMenuBar templateMenuBar;
	XmScrolledText { arguments {
	    XmNeditMode = XmMULTI_LINE_EDIT;
	    XmNrows = 10;
	};};
	XmPushButton { arguments { XmNlabelString = templateIncludeText; }; };
	XmPushButton { arguments { XmNlabelString = templateDraftText; }; };
	XmPushButton { arguments { XmNlabelString = templateSpellText; }; };
    };
    callbacks {
	XmNcancelCallback = procedure UnmanageCb("*templateDialog");
	XmNunmapCallback = procedure UnmapCb();
    };
};

object templateMenuBar : XmMenuBar {
    arguments { };
    controls { XmCascadeButton templateFileCascade; };
};

object templateFileCascade : XmCascadeButton {
    arguments {
	XmNlabelString = templateCascadeText;
	XmNmnemonic = keysym(templateCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton sendButton;
	    XmPushButton includeButton;
	    XmPushButton draftButton;
	    XmPushButton spellButton;
	    XmPushButton cancelButton;
	}; };
    };
};

object sendButton : XmPushButton {
    arguments {
	XmNlabelString = templateOkText;
	XmNmnemonic = keysym(templateOkMnem);
    };
};
object includeButton : XmPushButton {
    arguments {
	XmNlabelString = templateIncludeText;
	XmNmnemonic = keysym(templateIncludeMnem);
    };
};
object draftButton : XmPushButton {
    arguments {
	XmNlabelString = templateDraftText;
	XmNmnemonic = keysym(templateDraftMnem);
    };
};
object spellButton : XmPushButton {
    arguments {
	XmNlabelString = templateSpellText;
	XmNmnemonic = keysym(templateSpellMnem);
    };
};
object cancelButton : XmPushButton {
    arguments {
	XmNlabelString = templateCancelText;
	XmNmnemonic = keysym(templateCancelMnem);
    };
    callbacks {
	XmNactivateCallback = procedure UnmanageCb("*templateDialog");
    };
};
object showDialog : XmInformationDialog {
    arguments {
	XmNdialogTitle = "OSF/Motif Release 1.2";
	XmNcancelLabelString = "Enjoy!";
	XmNmessageString =
		compound_string("OSF/Motif Release 1.2", separate = true) &
		compound_string("", separate = true) &
		compound_string("May 1992", separate = true) &
		compound_string("", separate = true) &
		compound_string("Dev: Vania, Ellis, Mike C, Mike Y, ") &
		compound_string ("Al, Scott, Daniel, Andrew, Pam") &
		compound_string("", separate = true) &
		compound_string("", separate = true) &
		compound_string("QA: Libby, Carl, Tom, Ramesh, ") &
		compound_string("Susan, Shobana", separate = true) &
		compound_string("", separate = true) &
		compound_string("Doc: Bob M, Ken, Bob C.",separate=true) &
		compound_string("", separate = true) &
		compound_string("Rats: Yakov, Bruce",separate=true) &
		compound_string("", separate = true) &
		compound_string("VTS: Carlos, Roy",separate=true) &
		compound_string("", separate = true) &
		compound_string("Sys: David, Kevin, Chauncy, Ron, ") &
                compound_string("Weidong, Barbara", separate = true) &
		compound_string("", separate = true) &
		compound_string("Ops: Bruce, Cathy", separate = true) &
		compound_string("");
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
    };
};

object infoDialog : XmInformationDialog {
    arguments {
	XmNdialogTitle = informationTitleText;
	XmNmessageString = infoMessageText;
	XmNcancelLabelString = infoCancelText;
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object warningDialog : XmWarningDialog {
    arguments {
	XmNdialogTitle = warningTitleText;
	XmNmessageString = warningMessageText;
	XmNokLabelString = warningOkText;
	XmNcancelLabelString = warningCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object errorDialog : XmErrorDialog {
    arguments {
	XmNdialogTitle = errorTitleText;
	XmNmessageString = errorMessageText;
	XmNokLabelString = errorOkText;
	XmNcancelLabelString = errorCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object questionDialog : XmQuestionDialog {
    arguments {
	XmNdialogTitle = questionTitleText;
	XmNmessageString = questionMessageText;
	XmNokLabelString = questionYesText;
	XmNcancelLabelString = questionNoText;
    };
    controls {
	Xm_Help unmanaged { };
	XmPushButton { arguments { XmNlabelString = questionMaybeText; }; };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object workingDialog : XmWorkingDialog {
    arguments {
	XmNcancelLabelString = workingCancelText;
	XmNdialogTitle = workingTitleText;
    };
    controls {
	Xm_OK unmanaged { };
	Xm_Help unmanaged { };
	Xm_Message unmanaged { };
	XmScale { arguments {
	    XmNorientation = XmHORIZONTAL;
	    XmNshowValue = true;
	    XmNtitleString = workingScaleText;
	}; };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object fileDialog : XmFileSelectionDialog {
    arguments {
	XmNautoUnmanage = true;
	XmNdialogTitle = fileTitleText;
	XmNselectionLabelString = fileSelectText;
	XmNlistLabelString = fileListText;
	XmNdirListLabelString = fileDirListText;
	XmNfileListLabelString = fileFileListText;
	XmNfilterLabelString = fileFilterLabelText;
	XmNnoMatchString = fileNoMatchText;
	XmNokLabelString = fileLoadText;
	XmNapplyLabelString = fileFilterText;
	XmNcancelLabelString = fileCancelText;
	XmNlistVisibleItemCount = 6;
    };
    controls {
	Xm_Help unmanaged { };
	unmanaged XmSeparator { }; ! First, a dummy work area child
	XmMenuBar fileMenuBar;
	XmPushButton { arguments { XmNlabelString = fileMergeText; }; };
	XmPushButton { arguments { XmNlabelString = fileRemoveText; }; };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object fileMenuBar : XmMenuBar {
    arguments { };
    controls { XmCascadeButton filterCascade; };
};

object filterCascade : XmCascadeButton {
    arguments {
	XmNlabelString = formatCascadeText;
	XmNmnemonic = keysym(formatCascadeMnem);
    };
    controls { XmPulldownMenu {
	arguments { XmNtearOffModel = XmTEAR_OFF_ENABLED; };
	controls {
	    XmPushButton audioButton;
	    XmPushButton graphicsButton;
	    XmPushButton textButton;
	}; };
    };
};

object audioButton : XmPushButton {
    arguments {
	XmNlabelString = audioButtonText;
	XmNmnemonic = keysym(audioButtonMnem);
    };
};
object graphicsButton : XmPushButton {
    arguments {
	XmNlabelString = graphicsButtonText;
	XmNmnemonic = keysym(graphicsButtonMnem);
    };
};
object textButton : XmPushButton {
    arguments {
	XmNlabelString = textButtonText;
	XmNmnemonic = keysym(textButtonMnem);
    };
};

object selectDialog : XmSelectionDialog {
    arguments {
	XmNdialogTitle = selectTitleText;
	XmNlistItems = greekAlphabet;
	XmNlistVisibleItemCount = 6;

	XmNselectionLabelString = selectSelectionText;
	XmNlistLabelString = selectListText;
	XmNokLabelString = selectOkText;
	XmNapplyLabelString = selectApplyText;
	XmNcancelLabelString = selectCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

object promptDialog : XmPromptDialog {
    arguments {
	XmNdialogTitle = promptTitleText;
	XmNselectionLabelString = promptMessageText;
	XmNokLabelString = promptOkText;
	XmNcancelLabelString = promptCancelText;
    };
    controls {
	Xm_Help unmanaged { };
    };
    callbacks { XmNunmapCallback = procedure UnmapCb(); };
};

end module;
